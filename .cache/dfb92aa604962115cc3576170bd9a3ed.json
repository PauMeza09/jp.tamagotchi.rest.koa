{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../util/OrmUtils","loc":{"line":3,"column":25}},{"name":"../driver/mongodb/MongoDriver","loc":{"line":4,"column":28}},{"name":"../util/PromiseUtils","loc":{"line":5,"column":29}},{"name":"../find-options/FindOperator","loc":{"line":6,"column":29}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../util/OrmUtils\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar FindOperator_1 = require(\"../find-options/FindOperator\");\n/**\n * This metadata contains all information about entity's column.\n */\nvar ColumnMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ColumnMetadata(options) {\n        /**\n         * Type's length in the database.\n         */\n        this.length = \"\";\n        /**\n         * Indicates if this column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this column is generated (auto increment or generated other way).\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column can contain nulls or not.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is selected by query builder or not.\n         */\n        this.isSelect = true;\n        /**\n         * Indicates if column is protected from updates or not.\n         */\n        this.isReadonly = false;\n        /**\n         * Column comment.\n         * This feature is not supported by all databases.\n         */\n        this.comment = \"\";\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        /**\n         * Indicates if this column is an array.\n         */\n        this.isArray = false;\n        /**\n         * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n         */\n        this.isVirtual = false;\n        /**\n         * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n         */\n        this.isDiscriminator = false;\n        /**\n         * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n         */\n        this.isTreeLevel = false;\n        /**\n         * Indicates if this column contains an entity creation date.\n         */\n        this.isCreateDate = false;\n        /**\n         * Indicates if this column contains an entity update date.\n         */\n        this.isUpdateDate = false;\n        /**\n         * Indicates if this column contains an entity version.\n         */\n        this.isVersion = false;\n        /**\n         * Indicates if this column contains an object id.\n         */\n        this.isObjectId = false;\n        /**\n         * Indicates if this column is nested set's left column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetLeft = false;\n        /**\n         * Indicates if this column is nested set's right column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetRight = false;\n        /**\n         * Indicates if this column is materialized path's path column.\n         * Used only in tree entities with materialized path type.\n         */\n        this.isMaterializedPath = false;\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.target)\n            this.target = options.args.target;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = options.args.options.length ? options.args.options.length.toString() : \"\";\n        if (options.args.options.width)\n            this.width = options.args.options.width;\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset;\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation;\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select;\n        if (options.args.options.readonly !== undefined)\n            this.isReadonly = options.args.options.readonly;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate;\n        if (options.args.options.scale !== null && options.args.options.scale !== undefined)\n            this.scale = options.args.options.scale;\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill;\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned;\n        if (options.args.options.precision !== undefined)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum) {\n            if (options.args.options.enum instanceof Object) {\n                this.enum = Object.keys(options.args.options.enum).map(function (key) {\n                    return options.args.options.enum[key];\n                });\n            }\n            else {\n                this.enum = options.args.options.enum;\n            }\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression;\n            this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : \"VIRTUAL\";\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType;\n        if (options.args.options.array)\n            this.isArray = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer;\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = function () { return options.connection.driver.mappedDataTypes.createDateDefault; };\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = function () { return options.connection.driver.mappedDataTypes.updateDateDefault; };\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n        if (options.closureType)\n            this.closureType = options.closureType;\n        if (options.nestedSetLeft)\n            this.isNestedSetLeft = options.nestedSetLeft;\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight;\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    ColumnMetadata.prototype.createValueMap = function (value, useDatabaseName) {\n        var _this = this;\n        if (useDatabaseName === void 0) { useDatabaseName = false; }\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_1 = function (propertyNames, map) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue_1(propertyNames, map[propertyName]);\n                    return map;\n                }\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if (_this.generationStrategy === \"increment\" && _this.type === \"bigint\")\n                    value = String(value);\n                map[useDatabaseName ? _this.databaseName : _this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_1(propertyNames, {});\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if (this.generationStrategy === \"increment\" && this.type === \"bigint\")\n                value = String(value);\n            return _a = {}, _a[useDatabaseName ? this.databaseName : this.propertyName] = value, _a;\n        }\n        var _a;\n    };\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    ColumnMetadata.prototype.getEntityValueMap = function (entity, options) {\n        var _this = this;\n        var returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_2 = function (propertyNames, value, map) {\n                var propertyName = propertyNames.shift();\n                if (value === undefined)\n                    return map;\n                if (propertyName) {\n                    var submap = {};\n                    extractEmbeddedColumnValue_2(propertyNames, value[propertyName], submap);\n                    if (Object.keys(submap).length > 0) {\n                        map[propertyName] = submap;\n                    }\n                    return map;\n                }\n                if (value[_this.propertyName] !== undefined && (returnNulls === false || value[_this.propertyName] !== null))\n                    map[_this.propertyName] = value[_this.propertyName];\n                return map;\n            };\n            var map = {};\n            extractEmbeddedColumnValue_2(propertyNames, entity, map);\n            return Object.keys(map).length > 0 ? map : undefined;\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {\n                var map = this.relationMetadata.joinColumns.reduce(function (map, joinColumn) {\n                    var value = joinColumn.referencedColumn.getEntityValueMap(entity[_this.propertyName]);\n                    if (value === undefined)\n                        return map;\n                    return OrmUtils_1.OrmUtils.mergeDeep(map, value);\n                }, {});\n                if (Object.keys(map).length > 0)\n                    return _a = {}, _a[this.propertyName] = map, _a;\n                return undefined;\n            }\n            else {\n                if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))\n                    return _b = {}, _b[this.propertyName] = entity[this.propertyName], _b;\n                return undefined;\n            }\n        }\n        var _a, _b;\n    };\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    ColumnMetadata.prototype.getEntityValue = function (entity, transform) {\n        // if (entity === undefined || entity === null) return undefined; // uncomment if needed\n        if (transform === void 0) { transform = false; }\n        // extract column value from embeddeds of entity if column is in embedded\n        var value = undefined;\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            var extractEmbeddedColumnValue_3 = function (propertyNames, value) {\n                var propertyName = propertyNames.shift();\n                return propertyName && value ? extractEmbeddedColumnValue_3(propertyNames, value[propertyName]) : value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            var embeddedObject = extractEmbeddedColumnValue_3(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    var relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator_1.FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(relatedEntity));\n                    }\n                    else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator_1.FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n                    }\n                    else {\n                        value = PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                    }\n                }\n                else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n                }\n                else {\n                    value = PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                }\n            }\n        }\n        else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                var relatedEntity = this.relationMetadata.getEntityValue(entity);\n                if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator_1.FindOperator) && !(relatedEntity instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(relatedEntity));\n                }\n                else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator_1.FindOperator) && !(entity[this.propertyName] instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(entity[this.propertyName]));\n                }\n                else {\n                    value = entity[this.propertyName];\n                }\n            }\n            else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(entity[this.propertyName]));\n            }\n            else {\n                value = entity[this.propertyName];\n            }\n        }\n        if (transform && this.transformer)\n            value = this.transformer.to(value);\n        return value;\n    };\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    ColumnMetadata.prototype.setEntityValue = function (entity, value) {\n        var _this = this;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var extractEmbeddedColumnValue_4 = function (embeddedMetadatas, map) {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                var embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                    extractEmbeddedColumnValue_4(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[_this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_4(this.embeddedMetadata.embeddedMetadataTree.slice(), entity);\n        }\n        else {\n            entity[this.propertyName] = value;\n        }\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    ColumnMetadata.prototype.build = function (connection) {\n        this.propertyPath = this.buildPropertyPath();\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\n        this.databaseName = this.buildDatabaseName(connection);\n        this.databasePath = this.buildDatabasePath();\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    };\n    ColumnMetadata.prototype.buildPropertyPath = function () {\n        var path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.propertyName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\n            path += \".\" + this.referencedColumn.propertyName;\n        return path;\n    };\n    ColumnMetadata.prototype.buildDatabasePath = function () {\n        var path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.databaseName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)\n            path += \".\" + this.referencedColumn.databaseName;\n        return path;\n    };\n    ColumnMetadata.prototype.buildDatabaseName = function (connection) {\n        var propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];\n        if (connection.driver instanceof MongoDriver_1.MongoDriver) // we don't need to include embedded name for the mongodb column names\n            propertyNames = [];\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    };\n    return ColumnMetadata;\n}());\nexports.ColumnMetadata = ColumnMetadata;\n\n//# sourceMappingURL=ColumnMetadata.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/metadata/ColumnMetadata.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}}],"sources":{"../node_modules/typeorm/metadata/ColumnMetadata.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../util/OrmUtils\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar FindOperator_1 = require(\"../find-options/FindOperator\");\n/**\n * This metadata contains all information about entity's column.\n */\nvar ColumnMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ColumnMetadata(options) {\n        /**\n         * Type's length in the database.\n         */\n        this.length = \"\";\n        /**\n         * Indicates if this column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this column is generated (auto increment or generated other way).\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column can contain nulls or not.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is selected by query builder or not.\n         */\n        this.isSelect = true;\n        /**\n         * Indicates if column is protected from updates or not.\n         */\n        this.isReadonly = false;\n        /**\n         * Column comment.\n         * This feature is not supported by all databases.\n         */\n        this.comment = \"\";\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        /**\n         * Indicates if this column is an array.\n         */\n        this.isArray = false;\n        /**\n         * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n         */\n        this.isVirtual = false;\n        /**\n         * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n         */\n        this.isDiscriminator = false;\n        /**\n         * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n         */\n        this.isTreeLevel = false;\n        /**\n         * Indicates if this column contains an entity creation date.\n         */\n        this.isCreateDate = false;\n        /**\n         * Indicates if this column contains an entity update date.\n         */\n        this.isUpdateDate = false;\n        /**\n         * Indicates if this column contains an entity version.\n         */\n        this.isVersion = false;\n        /**\n         * Indicates if this column contains an object id.\n         */\n        this.isObjectId = false;\n        /**\n         * Indicates if this column is nested set's left column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetLeft = false;\n        /**\n         * Indicates if this column is nested set's right column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetRight = false;\n        /**\n         * Indicates if this column is materialized path's path column.\n         * Used only in tree entities with materialized path type.\n         */\n        this.isMaterializedPath = false;\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.target)\n            this.target = options.args.target;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = options.args.options.length ? options.args.options.length.toString() : \"\";\n        if (options.args.options.width)\n            this.width = options.args.options.width;\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset;\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation;\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select;\n        if (options.args.options.readonly !== undefined)\n            this.isReadonly = options.args.options.readonly;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate;\n        if (options.args.options.scale !== null && options.args.options.scale !== undefined)\n            this.scale = options.args.options.scale;\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill;\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned;\n        if (options.args.options.precision !== undefined)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum) {\n            if (options.args.options.enum instanceof Object) {\n                this.enum = Object.keys(options.args.options.enum).map(function (key) {\n                    return options.args.options.enum[key];\n                });\n            }\n            else {\n                this.enum = options.args.options.enum;\n            }\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression;\n            this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : \"VIRTUAL\";\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType;\n        if (options.args.options.array)\n            this.isArray = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer;\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = function () { return options.connection.driver.mappedDataTypes.createDateDefault; };\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = function () { return options.connection.driver.mappedDataTypes.updateDateDefault; };\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n        if (options.closureType)\n            this.closureType = options.closureType;\n        if (options.nestedSetLeft)\n            this.isNestedSetLeft = options.nestedSetLeft;\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight;\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    ColumnMetadata.prototype.createValueMap = function (value, useDatabaseName) {\n        var _this = this;\n        if (useDatabaseName === void 0) { useDatabaseName = false; }\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_1 = function (propertyNames, map) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue_1(propertyNames, map[propertyName]);\n                    return map;\n                }\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if (_this.generationStrategy === \"increment\" && _this.type === \"bigint\")\n                    value = String(value);\n                map[useDatabaseName ? _this.databaseName : _this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_1(propertyNames, {});\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if (this.generationStrategy === \"increment\" && this.type === \"bigint\")\n                value = String(value);\n            return _a = {}, _a[useDatabaseName ? this.databaseName : this.propertyName] = value, _a;\n        }\n        var _a;\n    };\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    ColumnMetadata.prototype.getEntityValueMap = function (entity, options) {\n        var _this = this;\n        var returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_2 = function (propertyNames, value, map) {\n                var propertyName = propertyNames.shift();\n                if (value === undefined)\n                    return map;\n                if (propertyName) {\n                    var submap = {};\n                    extractEmbeddedColumnValue_2(propertyNames, value[propertyName], submap);\n                    if (Object.keys(submap).length > 0) {\n                        map[propertyName] = submap;\n                    }\n                    return map;\n                }\n                if (value[_this.propertyName] !== undefined && (returnNulls === false || value[_this.propertyName] !== null))\n                    map[_this.propertyName] = value[_this.propertyName];\n                return map;\n            };\n            var map = {};\n            extractEmbeddedColumnValue_2(propertyNames, entity, map);\n            return Object.keys(map).length > 0 ? map : undefined;\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {\n                var map = this.relationMetadata.joinColumns.reduce(function (map, joinColumn) {\n                    var value = joinColumn.referencedColumn.getEntityValueMap(entity[_this.propertyName]);\n                    if (value === undefined)\n                        return map;\n                    return OrmUtils_1.OrmUtils.mergeDeep(map, value);\n                }, {});\n                if (Object.keys(map).length > 0)\n                    return _a = {}, _a[this.propertyName] = map, _a;\n                return undefined;\n            }\n            else {\n                if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))\n                    return _b = {}, _b[this.propertyName] = entity[this.propertyName], _b;\n                return undefined;\n            }\n        }\n        var _a, _b;\n    };\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    ColumnMetadata.prototype.getEntityValue = function (entity, transform) {\n        // if (entity === undefined || entity === null) return undefined; // uncomment if needed\n        if (transform === void 0) { transform = false; }\n        // extract column value from embeddeds of entity if column is in embedded\n        var value = undefined;\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            var extractEmbeddedColumnValue_3 = function (propertyNames, value) {\n                var propertyName = propertyNames.shift();\n                return propertyName && value ? extractEmbeddedColumnValue_3(propertyNames, value[propertyName]) : value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            var embeddedObject = extractEmbeddedColumnValue_3(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    var relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator_1.FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(relatedEntity));\n                    }\n                    else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator_1.FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n                    }\n                    else {\n                        value = PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                    }\n                }\n                else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n                }\n                else {\n                    value = PromiseUtils_1.PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                }\n            }\n        }\n        else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                var relatedEntity = this.relationMetadata.getEntityValue(entity);\n                if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator_1.FindOperator) && !(relatedEntity instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(relatedEntity));\n                }\n                else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator_1.FindOperator) && !(entity[this.propertyName] instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(entity[this.propertyName]));\n                }\n                else {\n                    value = entity[this.propertyName];\n                }\n            }\n            else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(PromiseUtils_1.PromiseUtils.extractValue(entity[this.propertyName]));\n            }\n            else {\n                value = entity[this.propertyName];\n            }\n        }\n        if (transform && this.transformer)\n            value = this.transformer.to(value);\n        return value;\n    };\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    ColumnMetadata.prototype.setEntityValue = function (entity, value) {\n        var _this = this;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var extractEmbeddedColumnValue_4 = function (embeddedMetadatas, map) {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                var embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                    extractEmbeddedColumnValue_4(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[_this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_4(this.embeddedMetadata.embeddedMetadataTree.slice(), entity);\n        }\n        else {\n            entity[this.propertyName] = value;\n        }\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    ColumnMetadata.prototype.build = function (connection) {\n        this.propertyPath = this.buildPropertyPath();\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\n        this.databaseName = this.buildDatabaseName(connection);\n        this.databasePath = this.buildDatabasePath();\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    };\n    ColumnMetadata.prototype.buildPropertyPath = function () {\n        var path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.propertyName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\n            path += \".\" + this.referencedColumn.propertyName;\n        return path;\n    };\n    ColumnMetadata.prototype.buildDatabasePath = function () {\n        var path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.databaseName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)\n            path += \".\" + this.referencedColumn.databaseName;\n        return path;\n    };\n    ColumnMetadata.prototype.buildDatabaseName = function (connection) {\n        var propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];\n        if (connection.driver instanceof MongoDriver_1.MongoDriver) // we don't need to include embedded name for the mongodb column names\n            propertyNames = [];\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    };\n    return ColumnMetadata;\n}());\nexports.ColumnMetadata = ColumnMetadata;\n\n//# sourceMappingURL=ColumnMetadata.js.map\n"},"lineCount":448}},"hash":"ff7a6dfc8e207619c00c7dbadca8fb7f","cacheData":{"env":{}}}