{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./RelationCountAttribute","loc":{"line":3,"column":39}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RelationCountAttribute_1 = require(\"./RelationCountAttribute\");\nvar RelationCountMetadataToAttributeTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountMetadataToAttributeTransformer(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationCountMetadataToAttributeTransformer.prototype.transform = function () {\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n        var _this = this;\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(function (relationCount) {\n                var attribute = _this.metadataToAttribute(_this.expressionMap.mainAlias.name, relationCount);\n                _this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationCounts.forEach(function (relationCount) {\n                var attribute = _this.metadataToAttribute(join.alias.name, relationCount);\n                _this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    RelationCountMetadataToAttributeTransformer.prototype.metadataToAttribute = function (parentAliasName, relationCount) {\n        return new RelationCountAttribute_1.RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName,\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName,\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory\n        });\n    };\n    return RelationCountMetadataToAttributeTransformer;\n}());\nexports.RelationCountMetadataToAttributeTransformer = RelationCountMetadataToAttributeTransformer;\n\n//# sourceMappingURL=RelationCountMetadataToAttributeTransformer.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RelationCountAttribute_1 = require(\"./RelationCountAttribute\");\nvar RelationCountMetadataToAttributeTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountMetadataToAttributeTransformer(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationCountMetadataToAttributeTransformer.prototype.transform = function () {\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n        var _this = this;\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(function (relationCount) {\n                var attribute = _this.metadataToAttribute(_this.expressionMap.mainAlias.name, relationCount);\n                _this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationCounts.forEach(function (relationCount) {\n                var attribute = _this.metadataToAttribute(join.alias.name, relationCount);\n                _this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    RelationCountMetadataToAttributeTransformer.prototype.metadataToAttribute = function (parentAliasName, relationCount) {\n        return new RelationCountAttribute_1.RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName,\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName,\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory\n        });\n    };\n    return RelationCountMetadataToAttributeTransformer;\n}());\nexports.RelationCountMetadataToAttributeTransformer = RelationCountMetadataToAttributeTransformer;\n\n//# sourceMappingURL=RelationCountMetadataToAttributeTransformer.js.map\n"},"lineCount":57}},"hash":"7ec69b2a5e8fbf27e8ee3e67179092d0","cacheData":{"env":{}}}