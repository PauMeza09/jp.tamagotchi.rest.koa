{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../metadata/RelationMetadata","loc":{"line":38,"column":33}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RelationMetadata_1 = require(\"../metadata/RelationMetadata\");\n/**\n * Loads relation ids for the given entities.\n */\nvar RelationIdLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationIdLoader(connection) {\n        this.connection = connection;\n    }\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    RelationIdLoader.prototype.load = function (relationOrTarget, relationNameOrEntities, entitiesOrRelatedEntities, maybeRelatedEntities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var relation, entities, relatedEntities, entityMetadata;\n            return __generator(this, function (_a) {\n                if (relationOrTarget instanceof RelationMetadata_1.RelationMetadata) {\n                    relation = relationOrTarget;\n                    entities = relationNameOrEntities instanceof Array ? relationNameOrEntities : [relationNameOrEntities];\n                    relatedEntities = entitiesOrRelatedEntities instanceof Array ? entitiesOrRelatedEntities : (entitiesOrRelatedEntities ? [entitiesOrRelatedEntities] : undefined);\n                }\n                else {\n                    entityMetadata = this.connection.getMetadata(relationOrTarget);\n                    relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities);\n                    if (!relation)\n                        throw new Error(\"Relation \\\"\" + relation + \"\\\" was not found in \\\"\" + entityMetadata.name + \"\\\".\");\n                    entities = entitiesOrRelatedEntities instanceof Array ? entitiesOrRelatedEntities : [entitiesOrRelatedEntities];\n                    relatedEntities = maybeRelatedEntities instanceof Array ? maybeRelatedEntities : (maybeRelatedEntities ? [maybeRelatedEntities] : undefined);\n                }\n                // load relation ids depend of relation type\n                if (relation.isManyToMany) {\n                    return [2 /*return*/, this.loadForManyToMany(relation, entities, relatedEntities)];\n                }\n                else if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    return [2 /*return*/, this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities)];\n                }\n                else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    return [2 /*return*/, this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    RelationIdLoader.prototype.loadManyToManyRelationIdsAndGroup = function (relation, entitiesOrEntities, relatedEntityOrEntities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var isMany, entities, relationIds, relatedEntities, columns, inverseColumns;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isMany = relation.isManyToMany || relation.isOneToMany;\n                        entities = entitiesOrEntities instanceof Array ? entitiesOrEntities : [entitiesOrEntities];\n                        if (!!relatedEntityOrEntities) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.connection.relationLoader.load(relation, entitiesOrEntities)];\n                    case 1:\n                        relatedEntityOrEntities = _a.sent();\n                        if (!relatedEntityOrEntities.length)\n                            return [2 /*return*/, entities.map(function (entity) { return ({ entity: entity, related: isMany ? [] : undefined }); })];\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, this.load(relation, entitiesOrEntities, relatedEntityOrEntities)];\n                    case 3:\n                        relationIds = _a.sent();\n                        relatedEntities = relatedEntityOrEntities instanceof Array ? relatedEntityOrEntities : [relatedEntityOrEntities];\n                        if (relation.isManyToManyOwner) {\n                            columns = relation.junctionEntityMetadata.inverseColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.junctionEntityMetadata.ownerColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else if (relation.isManyToManyNotOwner) {\n                            columns = relation.junctionEntityMetadata.ownerColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.junctionEntityMetadata.inverseColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else if (relation.isManyToOne || relation.isOneToOneOwner) {\n                            columns = relation.joinColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.entityMetadata.primaryColumns;\n                        }\n                        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                            columns = relation.inverseRelation.entityMetadata.primaryColumns;\n                            inverseColumns = relation.inverseRelation.joinColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else {\n                        }\n                        return [2 /*return*/, entities.map(function (entity) {\n                                var group = { entity: entity, related: isMany ? [] : undefined };\n                                relationIds.forEach(function (relationId) {\n                                    var entityMatched = inverseColumns.every(function (column) {\n                                        return column.getEntityValue(entity) === relationId[column.entityMetadata.name + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                                    });\n                                    if (entityMatched) {\n                                        relatedEntities.forEach(function (relatedEntity) {\n                                            var relatedEntityMatched = columns.every(function (column) {\n                                                return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                                            });\n                                            if (relatedEntityMatched) {\n                                                if (isMany) {\n                                                    group.related.push(relatedEntity);\n                                                }\n                                                else {\n                                                    group.related = relatedEntity;\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                return group;\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    RelationIdLoader.prototype.loadForManyToMany = function (relation, entities, relatedEntities) {\n        var junctionMetadata = relation.junctionEntityMetadata;\n        var mainAlias = junctionMetadata.name;\n        var columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        var inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        var qb = this.connection.createQueryBuilder();\n        // select all columns from junction table\n        junctionMetadata.ownerColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        junctionMetadata.inverseColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add conditions for the given entities\n        var condition1 = \"\";\n        if (columns.length === 1) {\n            qb.setParameter(\"values1\", entities.map(function (entity) { return columns[0].referencedColumn.getEntityValue(entity); }));\n            condition1 = mainAlias + \".\" + columns[0].propertyPath + \" IN (:...values1)\"; // todo: use ANY for postgres\n        }\n        else {\n            condition1 = \"(\" + entities.map(function (entity, entityIndex) {\n                return columns.map(function (column) {\n                    var paramName = \"entity1_\" + entityIndex + \"_\" + column.propertyName;\n                    qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \") + \")\";\n        }\n        // add conditions for the given inverse entities\n        var condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                qb.setParameter(\"values2\", relatedEntities.map(function (entity) { return inverseColumns[0].referencedColumn.getEntityValue(entity); }));\n                condition2 = mainAlias + \".\" + inverseColumns[0].propertyPath + \" IN (:...values2)\"; // todo: use ANY for postgres\n            }\n            else {\n                condition2 = \"(\" + relatedEntities.map(function (entity, entityIndex) {\n                    return inverseColumns.map(function (column) {\n                        var paramName = \"entity2_\" + entityIndex + \"_\" + column.propertyName;\n                        qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                        return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                    }).join(\" AND \");\n                }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \") + \")\";\n            }\n        }\n        // execute query\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"))\n            .getRawMany();\n    };\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    RelationIdLoader.prototype.loadForManyToOneAndOneToOneOwner = function (relation, entities, relatedEntities) {\n        var mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        var qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            var columnName = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        var condition = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(function (entity) { return relation.entityMetadata.primaryColumns[0].getEntityValue(entity); }));\n            condition = mainAlias + \".\" + relation.entityMetadata.primaryColumns[0].propertyPath + \" IN (:...values)\";\n        }\n        else {\n            condition = entities.map(function (entity, entityIndex) {\n                return relation.entityMetadata.primaryColumns.map(function (column, columnIndex) {\n                    var paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n        }\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    };\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    RelationIdLoader.prototype.loadForOneToManyAndOneToOneNotOwner = function (relation, entities, relatedEntities) {\n        relation = relation.inverseRelation;\n        var mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        var qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            var columnName = primaryColumn.entityMetadata.name + \"_\" + relation.inverseRelation.propertyPath.replace(\".\", \"_\") + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        var condition = \"\";\n        if (relation.joinColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(function (entity) { return relation.joinColumns[0].referencedColumn.getEntityValue(entity); }));\n            condition = mainAlias + \".\" + relation.joinColumns[0].propertyPath + \" IN (:...values)\";\n        }\n        else {\n            condition = entities.map(function (entity, entityIndex) {\n                return relation.joinColumns.map(function (joinColumn, joinColumnIndex) {\n                    var paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn.getEntityValue(entity));\n                    return mainAlias + \".\" + joinColumn.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n        }\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    };\n    return RelationIdLoader;\n}());\nexports.RelationIdLoader = RelationIdLoader;\n\n//# sourceMappingURL=RelationIdLoader.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/query-builder/RelationIdLoader.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/RelationIdLoader.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RelationMetadata_1 = require(\"../metadata/RelationMetadata\");\n/**\n * Loads relation ids for the given entities.\n */\nvar RelationIdLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationIdLoader(connection) {\n        this.connection = connection;\n    }\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    RelationIdLoader.prototype.load = function (relationOrTarget, relationNameOrEntities, entitiesOrRelatedEntities, maybeRelatedEntities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var relation, entities, relatedEntities, entityMetadata;\n            return __generator(this, function (_a) {\n                if (relationOrTarget instanceof RelationMetadata_1.RelationMetadata) {\n                    relation = relationOrTarget;\n                    entities = relationNameOrEntities instanceof Array ? relationNameOrEntities : [relationNameOrEntities];\n                    relatedEntities = entitiesOrRelatedEntities instanceof Array ? entitiesOrRelatedEntities : (entitiesOrRelatedEntities ? [entitiesOrRelatedEntities] : undefined);\n                }\n                else {\n                    entityMetadata = this.connection.getMetadata(relationOrTarget);\n                    relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities);\n                    if (!relation)\n                        throw new Error(\"Relation \\\"\" + relation + \"\\\" was not found in \\\"\" + entityMetadata.name + \"\\\".\");\n                    entities = entitiesOrRelatedEntities instanceof Array ? entitiesOrRelatedEntities : [entitiesOrRelatedEntities];\n                    relatedEntities = maybeRelatedEntities instanceof Array ? maybeRelatedEntities : (maybeRelatedEntities ? [maybeRelatedEntities] : undefined);\n                }\n                // load relation ids depend of relation type\n                if (relation.isManyToMany) {\n                    return [2 /*return*/, this.loadForManyToMany(relation, entities, relatedEntities)];\n                }\n                else if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    return [2 /*return*/, this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities)];\n                }\n                else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    return [2 /*return*/, this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    RelationIdLoader.prototype.loadManyToManyRelationIdsAndGroup = function (relation, entitiesOrEntities, relatedEntityOrEntities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var isMany, entities, relationIds, relatedEntities, columns, inverseColumns;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isMany = relation.isManyToMany || relation.isOneToMany;\n                        entities = entitiesOrEntities instanceof Array ? entitiesOrEntities : [entitiesOrEntities];\n                        if (!!relatedEntityOrEntities) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.connection.relationLoader.load(relation, entitiesOrEntities)];\n                    case 1:\n                        relatedEntityOrEntities = _a.sent();\n                        if (!relatedEntityOrEntities.length)\n                            return [2 /*return*/, entities.map(function (entity) { return ({ entity: entity, related: isMany ? [] : undefined }); })];\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, this.load(relation, entitiesOrEntities, relatedEntityOrEntities)];\n                    case 3:\n                        relationIds = _a.sent();\n                        relatedEntities = relatedEntityOrEntities instanceof Array ? relatedEntityOrEntities : [relatedEntityOrEntities];\n                        if (relation.isManyToManyOwner) {\n                            columns = relation.junctionEntityMetadata.inverseColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.junctionEntityMetadata.ownerColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else if (relation.isManyToManyNotOwner) {\n                            columns = relation.junctionEntityMetadata.ownerColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.junctionEntityMetadata.inverseColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else if (relation.isManyToOne || relation.isOneToOneOwner) {\n                            columns = relation.joinColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.entityMetadata.primaryColumns;\n                        }\n                        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                            columns = relation.inverseRelation.entityMetadata.primaryColumns;\n                            inverseColumns = relation.inverseRelation.joinColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else {\n                        }\n                        return [2 /*return*/, entities.map(function (entity) {\n                                var group = { entity: entity, related: isMany ? [] : undefined };\n                                relationIds.forEach(function (relationId) {\n                                    var entityMatched = inverseColumns.every(function (column) {\n                                        return column.getEntityValue(entity) === relationId[column.entityMetadata.name + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                                    });\n                                    if (entityMatched) {\n                                        relatedEntities.forEach(function (relatedEntity) {\n                                            var relatedEntityMatched = columns.every(function (column) {\n                                                return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                                            });\n                                            if (relatedEntityMatched) {\n                                                if (isMany) {\n                                                    group.related.push(relatedEntity);\n                                                }\n                                                else {\n                                                    group.related = relatedEntity;\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                return group;\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    RelationIdLoader.prototype.loadForManyToMany = function (relation, entities, relatedEntities) {\n        var junctionMetadata = relation.junctionEntityMetadata;\n        var mainAlias = junctionMetadata.name;\n        var columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        var inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        var qb = this.connection.createQueryBuilder();\n        // select all columns from junction table\n        junctionMetadata.ownerColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        junctionMetadata.inverseColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add conditions for the given entities\n        var condition1 = \"\";\n        if (columns.length === 1) {\n            qb.setParameter(\"values1\", entities.map(function (entity) { return columns[0].referencedColumn.getEntityValue(entity); }));\n            condition1 = mainAlias + \".\" + columns[0].propertyPath + \" IN (:...values1)\"; // todo: use ANY for postgres\n        }\n        else {\n            condition1 = \"(\" + entities.map(function (entity, entityIndex) {\n                return columns.map(function (column) {\n                    var paramName = \"entity1_\" + entityIndex + \"_\" + column.propertyName;\n                    qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \") + \")\";\n        }\n        // add conditions for the given inverse entities\n        var condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                qb.setParameter(\"values2\", relatedEntities.map(function (entity) { return inverseColumns[0].referencedColumn.getEntityValue(entity); }));\n                condition2 = mainAlias + \".\" + inverseColumns[0].propertyPath + \" IN (:...values2)\"; // todo: use ANY for postgres\n            }\n            else {\n                condition2 = \"(\" + relatedEntities.map(function (entity, entityIndex) {\n                    return inverseColumns.map(function (column) {\n                        var paramName = \"entity2_\" + entityIndex + \"_\" + column.propertyName;\n                        qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                        return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                    }).join(\" AND \");\n                }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \") + \")\";\n            }\n        }\n        // execute query\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"))\n            .getRawMany();\n    };\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    RelationIdLoader.prototype.loadForManyToOneAndOneToOneOwner = function (relation, entities, relatedEntities) {\n        var mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        var qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            var columnName = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        var condition = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(function (entity) { return relation.entityMetadata.primaryColumns[0].getEntityValue(entity); }));\n            condition = mainAlias + \".\" + relation.entityMetadata.primaryColumns[0].propertyPath + \" IN (:...values)\";\n        }\n        else {\n            condition = entities.map(function (entity, entityIndex) {\n                return relation.entityMetadata.primaryColumns.map(function (column, columnIndex) {\n                    var paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n        }\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    };\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    RelationIdLoader.prototype.loadForOneToManyAndOneToOneNotOwner = function (relation, entities, relatedEntities) {\n        relation = relation.inverseRelation;\n        var mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        var qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            var columnName = primaryColumn.entityMetadata.name + \"_\" + relation.inverseRelation.propertyPath.replace(\".\", \"_\") + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        var condition = \"\";\n        if (relation.joinColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(function (entity) { return relation.joinColumns[0].referencedColumn.getEntityValue(entity); }));\n            condition = mainAlias + \".\" + relation.joinColumns[0].propertyPath + \" IN (:...values)\";\n        }\n        else {\n            condition = entities.map(function (entity, entityIndex) {\n                return relation.joinColumns.map(function (joinColumn, joinColumnIndex) {\n                    var paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn.getEntityValue(entity));\n                    return mainAlias + \".\" + joinColumn.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n        }\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    };\n    return RelationIdLoader;\n}());\nexports.RelationIdLoader = RelationIdLoader;\n\n//# sourceMappingURL=RelationIdLoader.js.map\n"},"lineCount":326}},"hash":"a7ef2d9840f71bdacf8586b6f40bb23c","cacheData":{"env":{}}}