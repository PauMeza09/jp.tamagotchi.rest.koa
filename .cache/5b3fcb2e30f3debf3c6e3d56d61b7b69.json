{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../Subject","loc":{"line":3,"column":24}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nvar CascadesSubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function CascadesSubjectBuilder(allSubjects) {\n        this.allSubjects = allSubjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    CascadesSubjectBuilder.prototype.build = function (subject) {\n        var _this = this;\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(function (_a) {\n            var relation = _a[0], relationEntity = _a[1], relationEntityMetadata = _a[2];\n            // we need only defined values and insert or update cascades of the relation should be set\n            if (relationEntity === undefined ||\n                relationEntity === null ||\n                (!relation.isCascadeInsert && !relation.isCascadeUpdate))\n                return;\n            // if relation entity is just a relation id set (for example post.tag = 1)\n            // then we don't really need to check cascades since there is no object to insert or update\n            if (!(relationEntity instanceof Object))\n                return;\n            // if we already has this entity in list of operated subjects then skip it to avoid recursion\n            var alreadyExistRelationEntitySubject = _this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n            if (alreadyExistRelationEntitySubject) {\n                if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet\n                    alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true;\n                if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet\n                    alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true;\n                return;\n            }\n            // mark subject with what we can do with it\n            // and add to the array of subjects to load only if there is no same entity there already\n            var relationEntitySubject = new Subject_1.Subject({\n                metadata: relationEntityMetadata,\n                parentSubject: subject,\n                entity: relationEntity,\n                canBeInserted: relation.isCascadeInsert === true,\n                canBeUpdated: relation.isCascadeUpdate === true\n            });\n            _this.allSubjects.push(relationEntitySubject);\n            // go recursively and find other entities we need to insert/update\n            _this.build(relationEntitySubject);\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    CascadesSubjectBuilder.prototype.findByPersistEntityLike = function (entityTarget, entity) {\n        return this.allSubjects.find(function (subject) {\n            if (!subject.entity)\n                return false;\n            if (subject.entity === entity)\n                return true;\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);\n        });\n    };\n    return CascadesSubjectBuilder;\n}());\nexports.CascadesSubjectBuilder = CascadesSubjectBuilder;\n\n//# sourceMappingURL=CascadesSubjectBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}}],"sources":{"../node_modules/typeorm/persistence/subject-builder/CascadesSubjectBuilder.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nvar CascadesSubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function CascadesSubjectBuilder(allSubjects) {\n        this.allSubjects = allSubjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    CascadesSubjectBuilder.prototype.build = function (subject) {\n        var _this = this;\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(function (_a) {\n            var relation = _a[0], relationEntity = _a[1], relationEntityMetadata = _a[2];\n            // we need only defined values and insert or update cascades of the relation should be set\n            if (relationEntity === undefined ||\n                relationEntity === null ||\n                (!relation.isCascadeInsert && !relation.isCascadeUpdate))\n                return;\n            // if relation entity is just a relation id set (for example post.tag = 1)\n            // then we don't really need to check cascades since there is no object to insert or update\n            if (!(relationEntity instanceof Object))\n                return;\n            // if we already has this entity in list of operated subjects then skip it to avoid recursion\n            var alreadyExistRelationEntitySubject = _this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n            if (alreadyExistRelationEntitySubject) {\n                if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet\n                    alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true;\n                if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet\n                    alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true;\n                return;\n            }\n            // mark subject with what we can do with it\n            // and add to the array of subjects to load only if there is no same entity there already\n            var relationEntitySubject = new Subject_1.Subject({\n                metadata: relationEntityMetadata,\n                parentSubject: subject,\n                entity: relationEntity,\n                canBeInserted: relation.isCascadeInsert === true,\n                canBeUpdated: relation.isCascadeUpdate === true\n            });\n            _this.allSubjects.push(relationEntitySubject);\n            // go recursively and find other entities we need to insert/update\n            _this.build(relationEntitySubject);\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    CascadesSubjectBuilder.prototype.findByPersistEntityLike = function (entityTarget, entity) {\n        return this.allSubjects.find(function (subject) {\n            if (!subject.entity)\n                return false;\n            if (subject.entity === entity)\n                return true;\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);\n        });\n    };\n    return CascadesSubjectBuilder;\n}());\nexports.CascadesSubjectBuilder = CascadesSubjectBuilder;\n\n//# sourceMappingURL=CascadesSubjectBuilder.js.map\n"},"lineCount":80}},"hash":"0b59c91fa2705067350bb0b1b8e7a153","cacheData":{"env":{}}}