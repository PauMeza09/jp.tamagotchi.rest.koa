{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../Subject","loc":{"line":3,"column":24}},{"name":"../../util/OrmUtils","loc":{"line":4,"column":25}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nvar OneToOneInverseSideSubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function OneToOneInverseSideSubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds all required operations.\n     */\n    OneToOneInverseSideSubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            subject.metadata.oneToOneRelations.forEach(function (relation) {\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    OneToOneInverseSideSubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        var relatedEntityDatabaseRelationId = undefined;\n        if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        var relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here\n        if (relatedEntity === undefined) // if relation is undefined then nothing to update\n            return;\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                var removedRelatedEntitySubject = new Subject_1.Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [{\n                            relation: relation.inverseRelation,\n                            value: null\n                        }]\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            }\n            return;\n        } // else means entity is bind in the database\n        // extract only relation id from the related entities, since we only need it for comparision\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        var relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        var relatedEntitySubject = this.subjects.find(function (operateSubject) {\n            return !!operateSubject.entity && operateSubject.entity === relatedEntity;\n        });\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier;\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new Error(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject)\n                return;\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject\n            });\n        }\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        var areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils_1.OrmUtils.deepCompare(relationIdMap, relatedEntityDatabaseRelationId);\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject_1.Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap\n                });\n                this.subjects.push(relatedEntitySubject);\n            }\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject\n            });\n        }\n    };\n    return OneToOneInverseSideSubjectBuilder;\n}());\nexports.OneToOneInverseSideSubjectBuilder = OneToOneInverseSideSubjectBuilder;\n\n//# sourceMappingURL=OneToOneInverseSideSubjectBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}}],"sources":{"../node_modules/typeorm/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nvar OneToOneInverseSideSubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function OneToOneInverseSideSubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds all required operations.\n     */\n    OneToOneInverseSideSubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            subject.metadata.oneToOneRelations.forEach(function (relation) {\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    OneToOneInverseSideSubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        var relatedEntityDatabaseRelationId = undefined;\n        if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        var relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here\n        if (relatedEntity === undefined) // if relation is undefined then nothing to update\n            return;\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                var removedRelatedEntitySubject = new Subject_1.Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [{\n                            relation: relation.inverseRelation,\n                            value: null\n                        }]\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            }\n            return;\n        } // else means entity is bind in the database\n        // extract only relation id from the related entities, since we only need it for comparision\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        var relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        var relatedEntitySubject = this.subjects.find(function (operateSubject) {\n            return !!operateSubject.entity && operateSubject.entity === relatedEntity;\n        });\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier;\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new Error(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject)\n                return;\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject\n            });\n        }\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        var areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils_1.OrmUtils.deepCompare(relationIdMap, relatedEntityDatabaseRelationId);\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject_1.Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap\n                });\n                this.subjects.push(relatedEntitySubject);\n            }\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject\n            });\n        }\n    };\n    return OneToOneInverseSideSubjectBuilder;\n}());\nexports.OneToOneInverseSideSubjectBuilder = OneToOneInverseSideSubjectBuilder;\n\n//# sourceMappingURL=OneToOneInverseSideSubjectBuilder.js.map\n"},"lineCount":151}},"hash":"a099b22ebb79dd87185122ac6d47db33","cacheData":{"env":{}}}