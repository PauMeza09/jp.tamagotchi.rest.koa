{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000}],"generated":{"js":"\"use strict\";\n/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A simple dependency graph\n */\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges, leavesOnly, result) {\n    var currentPath = [];\n    var visited = {};\n    return function DFS(currentNode) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node) {\n            if (!visited[node]) {\n                DFS(node);\n            }\n            else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(\"Dependency Cycle Found: \" + currentPath.join(\" -> \"));\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\nvar DepGraph = /** @class */ (function () {\n    function DepGraph() {\n        this.nodes = {};\n        this.outgoingEdges = {}; // Node -> [Dependency Node]\n        this.incomingEdges = {}; // Node -> [Dependant Node]\n    }\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    DepGraph.prototype.addNode = function (node, data) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            }\n            else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    };\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    DepGraph.prototype.removeNode = function (node) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key) {\n                    var idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    };\n    /**\n     * Check if a node exists in the graph\n     */\n    DepGraph.prototype.hasNode = function (node) {\n        return this.nodes.hasOwnProperty(node);\n    };\n    /**\n     * Get the data associated with a node name\n     */\n    DepGraph.prototype.getNodeData = function (node) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    DepGraph.prototype.setNodeData = function (node, data) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    DepGraph.prototype.addDependency = function (from, to) {\n        if (!this.hasNode(from)) {\n            throw new Error(\"Node does not exist: \" + from);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(\"Node does not exist: \" + to);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    };\n    /**\n     * Remove a dependency between two nodes.\n     */\n    DepGraph.prototype.removeDependency = function (from, to) {\n        var idx;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    };\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    DepGraph.prototype.dependenciesOf = function (node, leavesOnly) {\n        if (this.hasNode(node)) {\n            var result = [];\n            var DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            var idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    DepGraph.prototype.dependantsOf = function (node, leavesOnly) {\n        if (this.hasNode(node)) {\n            var result = [];\n            var DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            var idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    DepGraph.prototype.overallOrder = function (leavesOnly) {\n        var self = this;\n        var result = [];\n        var keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        }\n        else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            var CycleDFS_1 = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n) {\n                CycleDFS_1(n);\n            });\n            var DFS_1 = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS_1(n);\n            });\n            return result;\n        }\n    };\n    return DepGraph;\n}());\nexports.DepGraph = DepGraph;\n\n//# sourceMappingURL=DepGraph.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/util/DepGraph.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}}],"sources":{"../node_modules/typeorm/util/DepGraph.js":"\"use strict\";\n/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A simple dependency graph\n */\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges, leavesOnly, result) {\n    var currentPath = [];\n    var visited = {};\n    return function DFS(currentNode) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node) {\n            if (!visited[node]) {\n                DFS(node);\n            }\n            else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(\"Dependency Cycle Found: \" + currentPath.join(\" -> \"));\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\nvar DepGraph = /** @class */ (function () {\n    function DepGraph() {\n        this.nodes = {};\n        this.outgoingEdges = {}; // Node -> [Dependency Node]\n        this.incomingEdges = {}; // Node -> [Dependant Node]\n    }\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    DepGraph.prototype.addNode = function (node, data) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            }\n            else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    };\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    DepGraph.prototype.removeNode = function (node) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key) {\n                    var idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    };\n    /**\n     * Check if a node exists in the graph\n     */\n    DepGraph.prototype.hasNode = function (node) {\n        return this.nodes.hasOwnProperty(node);\n    };\n    /**\n     * Get the data associated with a node name\n     */\n    DepGraph.prototype.getNodeData = function (node) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    DepGraph.prototype.setNodeData = function (node, data) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    DepGraph.prototype.addDependency = function (from, to) {\n        if (!this.hasNode(from)) {\n            throw new Error(\"Node does not exist: \" + from);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(\"Node does not exist: \" + to);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    };\n    /**\n     * Remove a dependency between two nodes.\n     */\n    DepGraph.prototype.removeDependency = function (from, to) {\n        var idx;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    };\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    DepGraph.prototype.dependenciesOf = function (node, leavesOnly) {\n        if (this.hasNode(node)) {\n            var result = [];\n            var DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            var idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    DepGraph.prototype.dependantsOf = function (node, leavesOnly) {\n        if (this.hasNode(node)) {\n            var result = [];\n            var DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            var idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    DepGraph.prototype.overallOrder = function (leavesOnly) {\n        var self = this;\n        var result = [];\n        var keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        }\n        else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            var CycleDFS_1 = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n) {\n                CycleDFS_1(n);\n            });\n            var DFS_1 = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS_1(n);\n            });\n            return result;\n        }\n    };\n    return DepGraph;\n}());\nexports.DepGraph = DepGraph;\n\n//# sourceMappingURL=DepGraph.js.map\n"},"lineCount":229}},"hash":"327763359e80bdda3b6081ed9274f2d1","cacheData":{"env":{}}}