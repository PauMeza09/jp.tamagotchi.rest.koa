{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./QueryExpressionMap","loc":{"line":38,"column":35}},{"name":"./Brackets","loc":{"line":39,"column":25}},{"name":"../metadata/EntityMetadata","loc":{"line":40,"column":31}},{"name":"../driver/sqljs/SqljsDriver","loc":{"line":41,"column":28}},{"name":"../driver/sqlserver/SqlServerDriver","loc":{"line":42,"column":32}},{"name":"../driver/oracle/OracleDriver","loc":{"line":43,"column":29}},{"name":"../","loc":{"line":44,"column":17}},{"name":"../find-options/FindOperator","loc":{"line":45,"column":29}},{"name":"./SelectQueryBuilder","loc":{"line":106,"column":44}},{"name":"./InsertQueryBuilder","loc":{"line":117,"column":44}},{"name":"./UpdateQueryBuilder","loc":{"line":135,"column":44}},{"name":"./DeleteQueryBuilder","loc":{"line":146,"column":44}},{"name":"./RelationQueryBuilder","loc":{"line":164,"column":46}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar QueryExpressionMap_1 = require(\"./QueryExpressionMap\");\nvar Brackets_1 = require(\"./Brackets\");\nvar EntityMetadata_1 = require(\"../metadata/EntityMetadata\");\nvar SqljsDriver_1 = require(\"../driver/sqljs/SqljsDriver\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\nvar _1 = require(\"../\");\nvar FindOperator_1 = require(\"../find-options/FindOperator\");\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar QueryBuilder = /** @class */ (function () {\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    function QueryBuilder(connectionOrQueryBuilder, queryRunner) {\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n        }\n        else {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner;\n            this.expressionMap = new QueryExpressionMap_1.QueryExpressionMap(this.connection);\n        }\n    }\n    Object.defineProperty(QueryBuilder.prototype, \"alias\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the main alias string used in this query builder.\n         */\n        get: function () {\n            if (!this.expressionMap.mainAlias)\n                throw new Error(\"Main alias is not set\"); // todo: better exception\n            return this.expressionMap.mainAlias.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    QueryBuilder.prototype.select = function (selection, selectionAliasName) {\n        this.expressionMap.queryType = \"select\";\n        if (selection instanceof Array) {\n            this.expressionMap.selects = selection.map(function (selection) { return ({ selection: selection }); });\n        }\n        else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n        // loading it dynamically because of circular issue\n        var SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\n        if (this instanceof SelectQueryBuilderCls)\n            return this;\n        return new SelectQueryBuilderCls(this);\n    };\n    /**\n     * Creates INSERT query.\n     */\n    QueryBuilder.prototype.insert = function () {\n        this.expressionMap.queryType = \"insert\";\n        // loading it dynamically because of circular issue\n        var InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\n        if (this instanceof InsertQueryBuilderCls)\n            return this;\n        return new InsertQueryBuilderCls(this);\n    };\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    QueryBuilder.prototype.update = function (entityOrTableNameUpdateSet, maybeUpdateSet) {\n        var updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet;\n        entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof _1.EntitySchema ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\") {\n            var mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n        // loading it dynamically because of circular issue\n        var UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\n        if (this instanceof UpdateQueryBuilderCls)\n            return this;\n        return new UpdateQueryBuilderCls(this);\n    };\n    /**\n     * Creates DELETE query.\n     */\n    QueryBuilder.prototype.delete = function () {\n        this.expressionMap.queryType = \"delete\";\n        // loading it dynamically because of circular issue\n        var DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\n        if (this instanceof DeleteQueryBuilderCls)\n            return this;\n        return new DeleteQueryBuilderCls(this);\n    };\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    QueryBuilder.prototype.relation = function (entityTargetOrPropertyPath, maybePropertyPath) {\n        var entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\n        var propertyPath = arguments.length === 2 ? maybePropertyPath : entityTargetOrPropertyPath;\n        this.expressionMap.queryType = \"relation\";\n        this.expressionMap.relationPropertyPath = propertyPath;\n        if (entityTarget) {\n            var mainAlias = this.createFromAlias(entityTarget);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        // loading it dynamically because of circular issue\n        var RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\n        if (this instanceof RelationQueryBuilderCls)\n            return this;\n        return new RelationQueryBuilderCls(this);\n    };\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    QueryBuilder.prototype.hasRelation = function (target, relation) {\n        var entityMetadata = this.connection.getMetadata(target);\n        var relations = relation instanceof Array ? relation : [relation];\n        return relations.every(function (relation) {\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\n        });\n    };\n    /**\n     * Sets parameter name and its value.\n     */\n    QueryBuilder.prototype.setParameter = function (key, value) {\n        this.expressionMap.parameters[key] = value;\n        return this;\n    };\n    /**\n     * Adds all parameters from the given object.\n     */\n    QueryBuilder.prototype.setParameters = function (parameters) {\n        var _this = this;\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setParameters(parameters);\n        Object.keys(parameters).forEach(function (key) {\n            _this.expressionMap.parameters[key] = parameters[key];\n        });\n        return this;\n    };\n    /**\n     * Adds native parameters from the given object.\n     */\n    QueryBuilder.prototype.setNativeParameters = function (parameters) {\n        var _this = this;\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);\n        Object.keys(parameters).forEach(function (key) {\n            _this.expressionMap.nativeParameters[key] = parameters[key];\n        });\n        return this;\n    };\n    /**\n     * Gets all parameters.\n     */\n    QueryBuilder.prototype.getParameters = function () {\n        var parameters = Object.assign({}, this.expressionMap.parameters);\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                var values = metadata.childEntityMetadatas\n                    .filter(function (childMetadata) { return childMetadata.discriminatorColumn; })\n                    .map(function (childMetadata) { return childMetadata.discriminatorValue; });\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n        return parameters;\n    };\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    QueryBuilder.prototype.printSql = function () {\n        var _a = this.getQueryAndParameters(), query = _a[0], parameters = _a[1];\n        this.connection.logger.logQuery(query, parameters);\n        return this;\n    };\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    QueryBuilder.prototype.getSql = function () {\n        return this.getQueryAndParameters()[0];\n    };\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    QueryBuilder.prototype.getQueryAndParameters = function () {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        var query = this.getQuery();\n        var parameters = this.getParameters();\n        return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    QueryBuilder.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, sql, parameters, queryRunner;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.getQueryAndParameters(), sql = _a[0], parameters = _a[1];\n                        queryRunner = this.obtainQueryRunner();\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, , 3, 8]);\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 2: return [2 /*return*/, _b.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        if (!(this.connection.driver instanceof SqljsDriver_1.SqljsDriver)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 6:\n                        _b.sent();\n                        _b.label = 7;\n                    case 7: return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    QueryBuilder.prototype.createQueryBuilder = function () {\n        return new this.constructor(this.connection, this.queryRunner);\n    };\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    QueryBuilder.prototype.clone = function () {\n        return new this.constructor(this);\n    };\n    /**\n     * Disables escaping.\n     */\n    QueryBuilder.prototype.disableEscaping = function () {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    };\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    QueryBuilder.prototype.escape = function (name) {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    };\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    QueryBuilder.prototype.setQueryRunner = function (queryRunner) {\n        this.queryRunner = queryRunner;\n        return this;\n    };\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    QueryBuilder.prototype.callListeners = function (enabled) {\n        this.expressionMap.callListeners = enabled;\n        return this;\n    };\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    QueryBuilder.prototype.useTransaction = function (enabled) {\n        this.expressionMap.useTransaction = enabled;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    QueryBuilder.prototype.getTableName = function (tablePath) {\n        // let tablePath = tableName;\n        // const driver = this.connection.driver;\n        // const schema = (driver.options as SqlServerConnectionOptions|PostgresConnectionOptions).schema;\n        // const metadata = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName) : undefined;\n        var _this = this;\n        /*if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof MysqlDriver) {\n            if (metadata) {\n                if (metadata.schema) {\n                    tablePath = `${metadata.schema}.${tableName}`;\n                } else if (schema) {\n                    tablePath = `${schema}.${tableName}`;\n                }\n\n                if (metadata.database && !(driver instanceof PostgresDriver)) {\n                    if (!schema && !metadata.schema && driver instanceof SqlServerDriver) {\n                        tablePath = `${metadata.database}..${tablePath}`;\n                    } else {\n                        tablePath = `${metadata.database}.${tablePath}`;\n                    }\n                }\n\n            } else if (schema) {\n                tablePath = `${schema!}.${tableName}`;\n            }\n        }*/\n        return tablePath.split(\".\")\n            .map(function (i) {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return _this.escape(i);\n        }).join(\".\");\n    };\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    QueryBuilder.prototype.getMainTableName = function () {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Entity where values should be inserted is not specified. Call \\\"qb.into(entity)\\\" method to specify it.\");\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath;\n        return this.expressionMap.mainAlias.tablePath;\n    };\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    QueryBuilder.prototype.createFromAlias = function (entityTarget, aliasName) {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            var metadata = this.connection.getMetadata(entityTarget);\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath\n            });\n        }\n        else {\n            var subQuery = \"\";\n            if (entityTarget instanceof Function) {\n                var subQueryBuilder = entityTarget(this.subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n            }\n            else {\n                subQuery = entityTarget;\n            }\n            var isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityTarget : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    };\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    QueryBuilder.prototype.replacePropertyNames = function (statement) {\n        var _this = this;\n        this.expressionMap.aliases.forEach(function (alias) {\n            if (!alias.hasMetadata)\n                return;\n            var replaceAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? alias.name + \"\\\\.\" : \"\";\n            var replacementAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? _this.escape(alias.name) + \".\" : \"\";\n            alias.metadata.columns.forEach(function (column) {\n                var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(column.databaseName) + \"$2\");\n                var expression2 = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(column.databaseName) + \"$2\");\n            });\n            alias.metadata.relations.forEach(function (relation) {\n                relation.joinColumns.concat(relation.inverseJoinColumns).forEach(function (joinColumn) {\n                    var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                });\n                if (relation.joinColumns.length > 0) {\n                    var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                }\n            });\n        });\n        return statement;\n    };\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    QueryBuilder.prototype.createWhereExpression = function () {\n        var conditions = this.createWhereExpressionString();\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                var column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias.name + \".\" + metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName;\n                var condition = this.replacePropertyNames(column) + \" IN (:...discriminatorColumnValues)\";\n                return \" WHERE \" + (conditions.length ? \"(\" + conditions + \") AND\" : \"\") + \" \" + condition;\n            }\n        }\n        if (!conditions.length) // TODO copy in to discriminator condition\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\n        if (this.expressionMap.extraAppendedAndWhereCondition)\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n        return \" WHERE \" + conditions;\n    };\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    QueryBuilder.prototype.createReturningExpression = function () {\n        var _this = this;\n        var columns = this.getReturningColumns();\n        var driver = this.connection.driver;\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported()) {\n            columns.push.apply(columns, this.expressionMap.extraReturningColumns.filter(function (column) {\n                return columns.indexOf(column) === -1;\n            }));\n        }\n        if (columns.length) {\n            var columnsExpression = columns.map(function (column) {\n                var name = _this.escape(column.databaseName);\n                if (driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                    if (_this.expressionMap.queryType === \"insert\" || _this.expressionMap.queryType === \"update\") {\n                        return \"INSERTED.\" + name;\n                    }\n                    else {\n                        return _this.escape(_this.getMainTableName()) + \".\" + name;\n                    }\n                }\n                else {\n                    return name;\n                }\n            }).join(\", \");\n            if (driver instanceof OracleDriver_1.OracleDriver) {\n                columnsExpression += \" INTO \" + columns.map(function (column) {\n                    var parameterName = \"output_\" + column.databaseName;\n                    _this.expressionMap.nativeParameters[parameterName] = { type: driver.columnTypeToNativeParameter(column.type), dir: driver.oracle.BIND_OUT };\n                    return _this.connection.driver.createParameter(parameterName, Object.keys(_this.expressionMap.nativeParameters).length);\n                }).join(\", \");\n            }\n            return columnsExpression;\n        }\n        else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning;\n        }\n        return \"\";\n    };\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    QueryBuilder.prototype.getReturningColumns = function () {\n        var _this = this;\n        var columns = [];\n        if (this.expressionMap.returning instanceof Array) {\n            this.expressionMap.returning.forEach(function (columnName) {\n                if (_this.expressionMap.mainAlias.hasMetadata) {\n                    columns.push.apply(columns, _this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnName));\n                }\n            });\n        }\n        return columns;\n    };\n    /**\n     * Concatenates all added where expressions into one string.\n     */\n    QueryBuilder.prototype.createWhereExpressionString = function () {\n        var _this = this;\n        return this.expressionMap.wheres.map(function (where, index) {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + _this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + _this.replacePropertyNames(where.condition);\n                default:\n                    return _this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n    };\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    QueryBuilder.prototype.createWhereIdsExpression = function (ids) {\n        var _this = this;\n        ids = ids instanceof Array ? ids : [ids];\n        var metadata = this.expressionMap.mainAlias.metadata;\n        // create shortcuts for better readability\n        var alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias.name) + \".\" : \"\";\n        var parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n        var whereStrings = ids.map(function (id, index) {\n            id = metadata.ensureEntityIdMap(id);\n            var whereSubStrings = [];\n            metadata.primaryColumns.forEach(function (primaryColumn, secondIndex) {\n                var parameterName = \"id_\" + index + \"_\" + secondIndex;\n                // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\n                whereSubStrings.push(alias + _this.escape(primaryColumn.databaseName) + \" = \" + _this.connection.driver.createParameter(parameterName, parameterIndex));\n                _this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);\n                parameterIndex++;\n            });\n            return whereSubStrings.join(\" AND \");\n        });\n        return whereStrings.length > 1 ? whereStrings.map(function (whereString) { return \"(\" + whereString + \")\"; }).join(\" OR \") : whereStrings[0];\n    };\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    QueryBuilder.prototype.computeWhereParameter = function (where) {\n        var _this = this;\n        if (typeof where === \"string\")\n            return where;\n        if (where instanceof Brackets_1.Brackets) {\n            var whereQueryBuilder = this.createQueryBuilder();\n            where.whereFactory(whereQueryBuilder);\n            var whereString = whereQueryBuilder.createWhereExpressionString();\n            this.setParameters(whereQueryBuilder.getParameters());\n            return whereString ? \"(\" + whereString + \")\" : \"\";\n        }\n        else if (where instanceof Function) {\n            return where(this);\n        }\n        else if (where instanceof Object) {\n            var wheres = where instanceof Array ? where : [where];\n            var andConditions = void 0;\n            var parameterIndex_1 = Object.keys(this.expressionMap.nativeParameters).length;\n            if (this.expressionMap.mainAlias.hasMetadata) {\n                andConditions = wheres.map(function (where, whereIndex) {\n                    var propertyPaths = EntityMetadata_1.EntityMetadata.createPropertyPath(_this.expressionMap.mainAlias.metadata, where);\n                    return propertyPaths.map(function (propertyPath, propertyIndex) {\n                        var columns = _this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(propertyPath);\n                        return columns.map(function (column, columnIndex) {\n                            var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + \".\" + propertyPath : column.propertyPath;\n                            var parameterValue = column.getEntityValue(where, true);\n                            var parameterName = \"where_\" + whereIndex + \"_\" + propertyIndex + \"_\" + columnIndex;\n                            if (parameterValue === null) {\n                                return aliasPath + \" IS NULL\";\n                            }\n                            else if (parameterValue instanceof FindOperator_1.FindOperator) {\n                                var parameters_1 = [];\n                                if (parameterValue.useParameter) {\n                                    var realParameterValues = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];\n                                    realParameterValues.forEach(function (realParameterValue, realParameterValueIndex) {\n                                        _this.expressionMap.nativeParameters[parameterName + realParameterValueIndex] = realParameterValue;\n                                        parameterIndex_1++;\n                                        parameters_1.push(_this.connection.driver.createParameter(parameterName + realParameterValueIndex, parameterIndex_1 - 1));\n                                    });\n                                }\n                                return parameterValue.toSql(_this.connection, aliasPath, parameters_1);\n                            }\n                            else {\n                                _this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                                parameterIndex_1++;\n                                var parameter = _this.connection.driver.createParameter(parameterName, parameterIndex_1 - 1);\n                                return aliasPath + \" = \" + parameter;\n                            }\n                        }).filter(function (expression) { return !!expression; }).join(\" AND \");\n                    }).filter(function (expression) { return !!expression; }).join(\" AND \");\n                });\n            }\n            else {\n                andConditions = wheres.map(function (where, whereIndex) {\n                    return Object.keys(where).map(function (key, parameterIndex) {\n                        var parameterValue = where[key];\n                        var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + \".\" + key : key;\n                        if (parameterValue === null) {\n                            return aliasPath + \" IS NULL\";\n                        }\n                        else {\n                            var parameterName = \"where_\" + whereIndex + \"_\" + parameterIndex;\n                            _this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                            parameterIndex++;\n                            return aliasPath + \" = \" + _this.connection.driver.createParameter(parameterName, parameterIndex - 1);\n                        }\n                    }).join(\" AND \");\n                });\n            }\n            if (andConditions.length > 1)\n                return andConditions.map(function (where) { return \"(\" + where + \")\"; }).join(\" OR \");\n            return andConditions.join(\"\");\n        }\n        return \"\";\n    };\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    QueryBuilder.prototype.obtainQueryRunner = function () {\n        return this.queryRunner || this.connection.createQueryRunner(\"master\");\n    };\n    return QueryBuilder;\n}());\nexports.QueryBuilder = QueryBuilder;\n\n//# sourceMappingURL=QueryBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryBuilder.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/QueryBuilder.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar QueryExpressionMap_1 = require(\"./QueryExpressionMap\");\nvar Brackets_1 = require(\"./Brackets\");\nvar EntityMetadata_1 = require(\"../metadata/EntityMetadata\");\nvar SqljsDriver_1 = require(\"../driver/sqljs/SqljsDriver\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\nvar _1 = require(\"../\");\nvar FindOperator_1 = require(\"../find-options/FindOperator\");\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar QueryBuilder = /** @class */ (function () {\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    function QueryBuilder(connectionOrQueryBuilder, queryRunner) {\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n        }\n        else {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner;\n            this.expressionMap = new QueryExpressionMap_1.QueryExpressionMap(this.connection);\n        }\n    }\n    Object.defineProperty(QueryBuilder.prototype, \"alias\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the main alias string used in this query builder.\n         */\n        get: function () {\n            if (!this.expressionMap.mainAlias)\n                throw new Error(\"Main alias is not set\"); // todo: better exception\n            return this.expressionMap.mainAlias.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    QueryBuilder.prototype.select = function (selection, selectionAliasName) {\n        this.expressionMap.queryType = \"select\";\n        if (selection instanceof Array) {\n            this.expressionMap.selects = selection.map(function (selection) { return ({ selection: selection }); });\n        }\n        else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n        // loading it dynamically because of circular issue\n        var SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\n        if (this instanceof SelectQueryBuilderCls)\n            return this;\n        return new SelectQueryBuilderCls(this);\n    };\n    /**\n     * Creates INSERT query.\n     */\n    QueryBuilder.prototype.insert = function () {\n        this.expressionMap.queryType = \"insert\";\n        // loading it dynamically because of circular issue\n        var InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\n        if (this instanceof InsertQueryBuilderCls)\n            return this;\n        return new InsertQueryBuilderCls(this);\n    };\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    QueryBuilder.prototype.update = function (entityOrTableNameUpdateSet, maybeUpdateSet) {\n        var updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet;\n        entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof _1.EntitySchema ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\") {\n            var mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n        // loading it dynamically because of circular issue\n        var UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\n        if (this instanceof UpdateQueryBuilderCls)\n            return this;\n        return new UpdateQueryBuilderCls(this);\n    };\n    /**\n     * Creates DELETE query.\n     */\n    QueryBuilder.prototype.delete = function () {\n        this.expressionMap.queryType = \"delete\";\n        // loading it dynamically because of circular issue\n        var DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\n        if (this instanceof DeleteQueryBuilderCls)\n            return this;\n        return new DeleteQueryBuilderCls(this);\n    };\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    QueryBuilder.prototype.relation = function (entityTargetOrPropertyPath, maybePropertyPath) {\n        var entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\n        var propertyPath = arguments.length === 2 ? maybePropertyPath : entityTargetOrPropertyPath;\n        this.expressionMap.queryType = \"relation\";\n        this.expressionMap.relationPropertyPath = propertyPath;\n        if (entityTarget) {\n            var mainAlias = this.createFromAlias(entityTarget);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        // loading it dynamically because of circular issue\n        var RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\n        if (this instanceof RelationQueryBuilderCls)\n            return this;\n        return new RelationQueryBuilderCls(this);\n    };\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    QueryBuilder.prototype.hasRelation = function (target, relation) {\n        var entityMetadata = this.connection.getMetadata(target);\n        var relations = relation instanceof Array ? relation : [relation];\n        return relations.every(function (relation) {\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\n        });\n    };\n    /**\n     * Sets parameter name and its value.\n     */\n    QueryBuilder.prototype.setParameter = function (key, value) {\n        this.expressionMap.parameters[key] = value;\n        return this;\n    };\n    /**\n     * Adds all parameters from the given object.\n     */\n    QueryBuilder.prototype.setParameters = function (parameters) {\n        var _this = this;\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setParameters(parameters);\n        Object.keys(parameters).forEach(function (key) {\n            _this.expressionMap.parameters[key] = parameters[key];\n        });\n        return this;\n    };\n    /**\n     * Adds native parameters from the given object.\n     */\n    QueryBuilder.prototype.setNativeParameters = function (parameters) {\n        var _this = this;\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);\n        Object.keys(parameters).forEach(function (key) {\n            _this.expressionMap.nativeParameters[key] = parameters[key];\n        });\n        return this;\n    };\n    /**\n     * Gets all parameters.\n     */\n    QueryBuilder.prototype.getParameters = function () {\n        var parameters = Object.assign({}, this.expressionMap.parameters);\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                var values = metadata.childEntityMetadatas\n                    .filter(function (childMetadata) { return childMetadata.discriminatorColumn; })\n                    .map(function (childMetadata) { return childMetadata.discriminatorValue; });\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n        return parameters;\n    };\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    QueryBuilder.prototype.printSql = function () {\n        var _a = this.getQueryAndParameters(), query = _a[0], parameters = _a[1];\n        this.connection.logger.logQuery(query, parameters);\n        return this;\n    };\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    QueryBuilder.prototype.getSql = function () {\n        return this.getQueryAndParameters()[0];\n    };\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    QueryBuilder.prototype.getQueryAndParameters = function () {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        var query = this.getQuery();\n        var parameters = this.getParameters();\n        return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    QueryBuilder.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, sql, parameters, queryRunner;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.getQueryAndParameters(), sql = _a[0], parameters = _a[1];\n                        queryRunner = this.obtainQueryRunner();\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, , 3, 8]);\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 2: return [2 /*return*/, _b.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        if (!(this.connection.driver instanceof SqljsDriver_1.SqljsDriver)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 6:\n                        _b.sent();\n                        _b.label = 7;\n                    case 7: return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    QueryBuilder.prototype.createQueryBuilder = function () {\n        return new this.constructor(this.connection, this.queryRunner);\n    };\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    QueryBuilder.prototype.clone = function () {\n        return new this.constructor(this);\n    };\n    /**\n     * Disables escaping.\n     */\n    QueryBuilder.prototype.disableEscaping = function () {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    };\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    QueryBuilder.prototype.escape = function (name) {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    };\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    QueryBuilder.prototype.setQueryRunner = function (queryRunner) {\n        this.queryRunner = queryRunner;\n        return this;\n    };\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    QueryBuilder.prototype.callListeners = function (enabled) {\n        this.expressionMap.callListeners = enabled;\n        return this;\n    };\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    QueryBuilder.prototype.useTransaction = function (enabled) {\n        this.expressionMap.useTransaction = enabled;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    QueryBuilder.prototype.getTableName = function (tablePath) {\n        // let tablePath = tableName;\n        // const driver = this.connection.driver;\n        // const schema = (driver.options as SqlServerConnectionOptions|PostgresConnectionOptions).schema;\n        // const metadata = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName) : undefined;\n        var _this = this;\n        /*if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof MysqlDriver) {\n            if (metadata) {\n                if (metadata.schema) {\n                    tablePath = `${metadata.schema}.${tableName}`;\n                } else if (schema) {\n                    tablePath = `${schema}.${tableName}`;\n                }\n\n                if (metadata.database && !(driver instanceof PostgresDriver)) {\n                    if (!schema && !metadata.schema && driver instanceof SqlServerDriver) {\n                        tablePath = `${metadata.database}..${tablePath}`;\n                    } else {\n                        tablePath = `${metadata.database}.${tablePath}`;\n                    }\n                }\n\n            } else if (schema) {\n                tablePath = `${schema!}.${tableName}`;\n            }\n        }*/\n        return tablePath.split(\".\")\n            .map(function (i) {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return _this.escape(i);\n        }).join(\".\");\n    };\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    QueryBuilder.prototype.getMainTableName = function () {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Entity where values should be inserted is not specified. Call \\\"qb.into(entity)\\\" method to specify it.\");\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath;\n        return this.expressionMap.mainAlias.tablePath;\n    };\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    QueryBuilder.prototype.createFromAlias = function (entityTarget, aliasName) {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            var metadata = this.connection.getMetadata(entityTarget);\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath\n            });\n        }\n        else {\n            var subQuery = \"\";\n            if (entityTarget instanceof Function) {\n                var subQueryBuilder = entityTarget(this.subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n            }\n            else {\n                subQuery = entityTarget;\n            }\n            var isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityTarget : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    };\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    QueryBuilder.prototype.replacePropertyNames = function (statement) {\n        var _this = this;\n        this.expressionMap.aliases.forEach(function (alias) {\n            if (!alias.hasMetadata)\n                return;\n            var replaceAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? alias.name + \"\\\\.\" : \"\";\n            var replacementAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? _this.escape(alias.name) + \".\" : \"\";\n            alias.metadata.columns.forEach(function (column) {\n                var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(column.databaseName) + \"$2\");\n                var expression2 = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(column.databaseName) + \"$2\");\n            });\n            alias.metadata.relations.forEach(function (relation) {\n                relation.joinColumns.concat(relation.inverseJoinColumns).forEach(function (joinColumn) {\n                    var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                });\n                if (relation.joinColumns.length > 0) {\n                    var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                }\n            });\n        });\n        return statement;\n    };\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    QueryBuilder.prototype.createWhereExpression = function () {\n        var conditions = this.createWhereExpressionString();\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                var column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias.name + \".\" + metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName;\n                var condition = this.replacePropertyNames(column) + \" IN (:...discriminatorColumnValues)\";\n                return \" WHERE \" + (conditions.length ? \"(\" + conditions + \") AND\" : \"\") + \" \" + condition;\n            }\n        }\n        if (!conditions.length) // TODO copy in to discriminator condition\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\n        if (this.expressionMap.extraAppendedAndWhereCondition)\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n        return \" WHERE \" + conditions;\n    };\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    QueryBuilder.prototype.createReturningExpression = function () {\n        var _this = this;\n        var columns = this.getReturningColumns();\n        var driver = this.connection.driver;\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported()) {\n            columns.push.apply(columns, this.expressionMap.extraReturningColumns.filter(function (column) {\n                return columns.indexOf(column) === -1;\n            }));\n        }\n        if (columns.length) {\n            var columnsExpression = columns.map(function (column) {\n                var name = _this.escape(column.databaseName);\n                if (driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                    if (_this.expressionMap.queryType === \"insert\" || _this.expressionMap.queryType === \"update\") {\n                        return \"INSERTED.\" + name;\n                    }\n                    else {\n                        return _this.escape(_this.getMainTableName()) + \".\" + name;\n                    }\n                }\n                else {\n                    return name;\n                }\n            }).join(\", \");\n            if (driver instanceof OracleDriver_1.OracleDriver) {\n                columnsExpression += \" INTO \" + columns.map(function (column) {\n                    var parameterName = \"output_\" + column.databaseName;\n                    _this.expressionMap.nativeParameters[parameterName] = { type: driver.columnTypeToNativeParameter(column.type), dir: driver.oracle.BIND_OUT };\n                    return _this.connection.driver.createParameter(parameterName, Object.keys(_this.expressionMap.nativeParameters).length);\n                }).join(\", \");\n            }\n            return columnsExpression;\n        }\n        else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning;\n        }\n        return \"\";\n    };\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    QueryBuilder.prototype.getReturningColumns = function () {\n        var _this = this;\n        var columns = [];\n        if (this.expressionMap.returning instanceof Array) {\n            this.expressionMap.returning.forEach(function (columnName) {\n                if (_this.expressionMap.mainAlias.hasMetadata) {\n                    columns.push.apply(columns, _this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnName));\n                }\n            });\n        }\n        return columns;\n    };\n    /**\n     * Concatenates all added where expressions into one string.\n     */\n    QueryBuilder.prototype.createWhereExpressionString = function () {\n        var _this = this;\n        return this.expressionMap.wheres.map(function (where, index) {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + _this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + _this.replacePropertyNames(where.condition);\n                default:\n                    return _this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n    };\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    QueryBuilder.prototype.createWhereIdsExpression = function (ids) {\n        var _this = this;\n        ids = ids instanceof Array ? ids : [ids];\n        var metadata = this.expressionMap.mainAlias.metadata;\n        // create shortcuts for better readability\n        var alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias.name) + \".\" : \"\";\n        var parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n        var whereStrings = ids.map(function (id, index) {\n            id = metadata.ensureEntityIdMap(id);\n            var whereSubStrings = [];\n            metadata.primaryColumns.forEach(function (primaryColumn, secondIndex) {\n                var parameterName = \"id_\" + index + \"_\" + secondIndex;\n                // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\n                whereSubStrings.push(alias + _this.escape(primaryColumn.databaseName) + \" = \" + _this.connection.driver.createParameter(parameterName, parameterIndex));\n                _this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);\n                parameterIndex++;\n            });\n            return whereSubStrings.join(\" AND \");\n        });\n        return whereStrings.length > 1 ? whereStrings.map(function (whereString) { return \"(\" + whereString + \")\"; }).join(\" OR \") : whereStrings[0];\n    };\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    QueryBuilder.prototype.computeWhereParameter = function (where) {\n        var _this = this;\n        if (typeof where === \"string\")\n            return where;\n        if (where instanceof Brackets_1.Brackets) {\n            var whereQueryBuilder = this.createQueryBuilder();\n            where.whereFactory(whereQueryBuilder);\n            var whereString = whereQueryBuilder.createWhereExpressionString();\n            this.setParameters(whereQueryBuilder.getParameters());\n            return whereString ? \"(\" + whereString + \")\" : \"\";\n        }\n        else if (where instanceof Function) {\n            return where(this);\n        }\n        else if (where instanceof Object) {\n            var wheres = where instanceof Array ? where : [where];\n            var andConditions = void 0;\n            var parameterIndex_1 = Object.keys(this.expressionMap.nativeParameters).length;\n            if (this.expressionMap.mainAlias.hasMetadata) {\n                andConditions = wheres.map(function (where, whereIndex) {\n                    var propertyPaths = EntityMetadata_1.EntityMetadata.createPropertyPath(_this.expressionMap.mainAlias.metadata, where);\n                    return propertyPaths.map(function (propertyPath, propertyIndex) {\n                        var columns = _this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(propertyPath);\n                        return columns.map(function (column, columnIndex) {\n                            var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + \".\" + propertyPath : column.propertyPath;\n                            var parameterValue = column.getEntityValue(where, true);\n                            var parameterName = \"where_\" + whereIndex + \"_\" + propertyIndex + \"_\" + columnIndex;\n                            if (parameterValue === null) {\n                                return aliasPath + \" IS NULL\";\n                            }\n                            else if (parameterValue instanceof FindOperator_1.FindOperator) {\n                                var parameters_1 = [];\n                                if (parameterValue.useParameter) {\n                                    var realParameterValues = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];\n                                    realParameterValues.forEach(function (realParameterValue, realParameterValueIndex) {\n                                        _this.expressionMap.nativeParameters[parameterName + realParameterValueIndex] = realParameterValue;\n                                        parameterIndex_1++;\n                                        parameters_1.push(_this.connection.driver.createParameter(parameterName + realParameterValueIndex, parameterIndex_1 - 1));\n                                    });\n                                }\n                                return parameterValue.toSql(_this.connection, aliasPath, parameters_1);\n                            }\n                            else {\n                                _this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                                parameterIndex_1++;\n                                var parameter = _this.connection.driver.createParameter(parameterName, parameterIndex_1 - 1);\n                                return aliasPath + \" = \" + parameter;\n                            }\n                        }).filter(function (expression) { return !!expression; }).join(\" AND \");\n                    }).filter(function (expression) { return !!expression; }).join(\" AND \");\n                });\n            }\n            else {\n                andConditions = wheres.map(function (where, whereIndex) {\n                    return Object.keys(where).map(function (key, parameterIndex) {\n                        var parameterValue = where[key];\n                        var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + \".\" + key : key;\n                        if (parameterValue === null) {\n                            return aliasPath + \" IS NULL\";\n                        }\n                        else {\n                            var parameterName = \"where_\" + whereIndex + \"_\" + parameterIndex;\n                            _this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                            parameterIndex++;\n                            return aliasPath + \" = \" + _this.connection.driver.createParameter(parameterName, parameterIndex - 1);\n                        }\n                    }).join(\" AND \");\n                });\n            }\n            if (andConditions.length > 1)\n                return andConditions.map(function (where) { return \"(\" + where + \")\"; }).join(\" OR \");\n            return andConditions.join(\"\");\n        }\n        return \"\";\n    };\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    QueryBuilder.prototype.obtainQueryRunner = function () {\n        return this.queryRunner || this.connection.createQueryRunner(\"master\");\n    };\n    return QueryBuilder;\n}());\nexports.QueryBuilder = QueryBuilder;\n\n//# sourceMappingURL=QueryBuilder.js.map\n"},"lineCount":670}},"hash":"718ff0bcb9a386b3ed42cf74aa245587","cacheData":{"env":{}}}