{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./table/Table","loc":{"line":38,"column":22}},{"name":"./table/TableColumn","loc":{"line":39,"column":28}},{"name":"./table/TableForeignKey","loc":{"line":40,"column":32}},{"name":"./table/TableIndex","loc":{"line":41,"column":27}},{"name":"../util/PromiseUtils","loc":{"line":42,"column":29}},{"name":"./util/TableUtils","loc":{"line":43,"column":27}},{"name":"../driver/mysql/MysqlDriver","loc":{"line":44,"column":28}},{"name":"./table/TableUnique","loc":{"line":45,"column":28}},{"name":"./table/TableCheck","loc":{"line":46,"column":27}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Table_1 = require(\"./table/Table\");\nvar TableColumn_1 = require(\"./table/TableColumn\");\nvar TableForeignKey_1 = require(\"./table/TableForeignKey\");\nvar TableIndex_1 = require(\"./table/TableIndex\");\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar TableUtils_1 = require(\"./util/TableUtils\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar TableUnique_1 = require(\"./table/TableUnique\");\nvar TableCheck_1 = require(\"./table/TableCheck\");\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nvar RdbmsSchemaBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RdbmsSchemaBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    RdbmsSchemaBuilder.prototype.build = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tablePaths, error_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queryRunner = this.connection.createQueryRunner(\"master\");\n                        return [4 /*yield*/, this.queryRunner.startTransaction()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 8, 13, 15]);\n                        tablePaths = this.entityToSyncMetadatas.map(function (metadata) { return metadata.tablePath; });\n                        return [4 /*yield*/, this.queryRunner.getTables(tablePaths)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.executeSchemaSyncOperationsInProperOrder()];\n                    case 4:\n                        _a.sent();\n                        if (!this.connection.queryResultCache) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.connection.queryResultCache.synchronize(this.queryRunner)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [4 /*yield*/, this.queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 8:\n                        error_1 = _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        _a.trys.push([9, 11, , 12]);\n                        return [4 /*yield*/, this.queryRunner.rollbackTransaction()];\n                    case 10:\n                        _a.sent();\n                        return [3 /*break*/, 12];\n                    case 11:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 12];\n                    case 12: throw error_1;\n                    case 13: return [4 /*yield*/, this.queryRunner.release()];\n                    case 14:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    RdbmsSchemaBuilder.prototype.log = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tablePaths;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queryRunner = this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 6, 8]);\n                        tablePaths = this.entityToSyncMetadatas.map(function (metadata) { return metadata.tablePath; });\n                        return [4 /*yield*/, this.queryRunner.getTables(tablePaths)];\n                    case 2:\n                        _a.sent();\n                        this.queryRunner.enableSqlMemory();\n                        return [4 /*yield*/, this.executeSchemaSyncOperationsInProperOrder()];\n                    case 3:\n                        _a.sent();\n                        if (!this.connection.queryResultCache) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.connection.queryResultCache.synchronize(this.queryRunner)];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [2 /*return*/, this.queryRunner.getMemorySql()];\n                    case 6:\n                        // its important to disable this mode despite the fact we are release query builder\n                        // because there exist drivers which reuse same query runner. Also its important to disable\n                        // sql memory after call of getMemorySql() method because last one flushes sql memory.\n                        this.queryRunner.disableSqlMemory();\n                        return [4 /*yield*/, this.queryRunner.release()];\n                    case 7:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(RdbmsSchemaBuilder.prototype, \"entityToSyncMetadatas\", {\n        // -------------------------------------------------------------------------\n        // Protected Methods\n        // -------------------------------------------------------------------------\n        /**\n         * Returns only entities that should be synced in the database.\n         */\n        get: function () {\n            return this.connection.entityMetadatas.filter(function (metadata) { return metadata.synchronize && metadata.tableType !== \"entity-child\"; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    RdbmsSchemaBuilder.prototype.executeSchemaSyncOperationsInProperOrder = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.dropOldForeignKeys()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldIndices()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldChecks()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropCompositeUniqueConstraints()];\n                    case 4:\n                        _a.sent();\n                        // await this.renameTables();\n                        return [4 /*yield*/, this.renameColumns()];\n                    case 5:\n                        // await this.renameTables();\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewTables()];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropRemovedColumns()];\n                    case 7:\n                        _a.sent();\n                        return [4 /*yield*/, this.addNewColumns()];\n                    case 8:\n                        _a.sent();\n                        return [4 /*yield*/, this.updatePrimaryKeys()];\n                    case 9:\n                        _a.sent();\n                        return [4 /*yield*/, this.updateExistColumns()];\n                    case 10:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewIndices()];\n                    case 11:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewChecks()];\n                    case 12:\n                        _a.sent();\n                        return [4 /*yield*/, this.createCompositeUniqueConstraints()];\n                    case 13:\n                        _a.sent();\n                        return [4 /*yield*/, this.createForeignKeys()];\n                    case 14:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    RdbmsSchemaBuilder.prototype.dropOldForeignKeys = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, tableForeignKeysToDrop;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        tableForeignKeysToDrop = table.foreignKeys.filter(function (tableForeignKey) {\n                                            var metadataFK = metadata.foreignKeys.find(function (metadataForeignKey) { return metadataForeignKey.name === tableForeignKey.name; });\n                                            return !metadataFK\n                                                || metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete\n                                                || metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate;\n                                        });\n                                        if (tableForeignKeysToDrop.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping old foreign keys of \" + table.name + \": \" + tableForeignKeysToDrop.map(function (dbForeignKey) { return dbForeignKey.name; }).join(\", \"));\n                                        // drop foreign keys from the database\n                                        return [4 /*yield*/, this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop)];\n                                    case 1:\n                                        // drop foreign keys from the database\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Rename tables\n     */\n    RdbmsSchemaBuilder.prototype.renameTables = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                return [2 /*return*/];\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    RdbmsSchemaBuilder.prototype.renameColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, renamedMetadataColumns, renamedTableColumns, renamedColumn;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        if (metadata.columns.length !== table.columns.length)\n                                            return [2 /*return*/];\n                                        renamedMetadataColumns = metadata.columns.filter(function (column) {\n                                            return !table.columns.find(function (tableColumn) {\n                                                return tableColumn.name === column.databaseName\n                                                    && tableColumn.type === _this.connection.driver.normalizeType(column)\n                                                    && tableColumn.isNullable === column.isNullable\n                                                    && tableColumn.isUnique === _this.connection.driver.normalizeIsUnique(column);\n                                            });\n                                        });\n                                        if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                                            return [2 /*return*/];\n                                        renamedTableColumns = table.columns.filter(function (tableColumn) {\n                                            return !metadata.columns.find(function (column) {\n                                                return column.databaseName === tableColumn.name\n                                                    && _this.connection.driver.normalizeType(column) === tableColumn.type\n                                                    && column.isNullable === tableColumn.isNullable\n                                                    && _this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                                            });\n                                        });\n                                        if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                                            return [2 /*return*/];\n                                        renamedColumn = renamedTableColumns[0].clone();\n                                        renamedColumn.name = renamedMetadataColumns[0].databaseName;\n                                        this.connection.logger.logSchemaBuild(\"renaming column \\\"\" + renamedTableColumns[0].name + \"\\\" in to \\\"\" + renamedColumn.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldIndices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, dropQueries;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        dropQueries = table.indices\n                                            .filter(function (tableIndex) {\n                                            var indexMetadata = metadata.indices.find(function (index) { return index.name === tableIndex.name; });\n                                            if (indexMetadata) {\n                                                if (indexMetadata.synchronize === false)\n                                                    return false;\n                                                if (indexMetadata.isUnique !== tableIndex.isUnique)\n                                                    return true;\n                                                if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                                                    return true;\n                                                if (indexMetadata.isFulltext !== tableIndex.isFulltext)\n                                                    return true;\n                                                if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                                                    return true;\n                                                return !indexMetadata.columns.every(function (column) { return tableIndex.columnNames.indexOf(column.databaseName) !== -1; });\n                                            }\n                                            return true;\n                                        })\n                                            .map(function (tableIndex) { return __awaiter(_this, void 0, void 0, function () {\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        this.connection.logger.logSchemaBuild(\"dropping an index: \\\"\" + tableIndex.name + \"\\\" from table \" + table.name);\n                                                        return [4 /*yield*/, this.queryRunner.dropIndex(table, tableIndex)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); });\n                                        return [4 /*yield*/, Promise.all(dropQueries)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldChecks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Mysql does not support check constraints\n                        if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                                var table, oldChecks;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            oldChecks = table.checks.filter(function (tableCheck) {\n                                                return !metadata.checks.find(function (checkMetadata) { return checkMetadata.name === tableCheck.name; });\n                                            });\n                                            if (oldChecks.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"dropping old check constraint: \" + oldChecks.map(function (check) { return \"\\\"\" + check.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.dropCheckConstraints(table, oldChecks)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropCompositeUniqueConstraints = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, compositeUniques;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        compositeUniques = table.uniques.filter(function (tableUnique) {\n                                            return tableUnique.columnNames.length > 1 && !metadata.uniques.find(function (uniqueMetadata) { return uniqueMetadata.name === tableUnique.name; });\n                                        });\n                                        if (compositeUniques.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping old unique constraint: \" + compositeUniques.map(function (unique) { return \"\\\"\" + unique.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.dropUniqueConstraints(table, compositeUniques)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    RdbmsSchemaBuilder.prototype.createNewTables = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var existTable, table;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        existTable = this.queryRunner.loadedTables.find(function (table) {\n                                            var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                                            var schema = metadata.schema || _this.connection.driver.options.schema;\n                                            var fullTableName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                                            return table.name === fullTableName;\n                                        });\n                                        if (existTable)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"creating a new table: \" + metadata.tablePath);\n                                        table = Table_1.Table.create(metadata, this.connection.driver);\n                                        return [4 /*yield*/, this.queryRunner.createTable(table, false, false)];\n                                    case 1:\n                                        _a.sent();\n                                        this.queryRunner.loadedTables.push(table);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    RdbmsSchemaBuilder.prototype.dropRemovedColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, droppedTableColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        droppedTableColumns = table.columns.filter(function (tableColumn) {\n                                            return !metadata.columns.find(function (columnMetadata) { return columnMetadata.databaseName === tableColumn.name; });\n                                        });\n                                        if (droppedTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"columns dropped in \" + table.name + \": \" + droppedTableColumns.map(function (column) { return column.name; }).join(\", \"));\n                                        // drop columns from the database\n                                        return [4 /*yield*/, this.queryRunner.dropColumns(table, droppedTableColumns)];\n                                    case 1:\n                                        // drop columns from the database\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    RdbmsSchemaBuilder.prototype.addNewColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, newColumnMetadatas, newTableColumnOptions, newTableColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newColumnMetadatas = metadata.columns.filter(function (columnMetadata) {\n                                            return !table.columns.find(function (tableColumn) { return tableColumn.name === columnMetadata.databaseName; });\n                                        });\n                                        if (newColumnMetadatas.length === 0)\n                                            return [2 /*return*/];\n                                        newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n                                        newTableColumns = newTableColumnOptions.map(function (option) { return new TableColumn_1.TableColumn(option); });\n                                        if (newTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"new columns added: \" + newColumnMetadatas.map(function (column) { return column.databaseName; }).join(\", \"));\n                                        return [4 /*yield*/, this.queryRunner.addColumns(table, newTableColumns)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    RdbmsSchemaBuilder.prototype.updatePrimaryKeys = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, primaryMetadataColumns, primaryTableColumns, changedPrimaryColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        primaryMetadataColumns = metadata.columns.filter(function (column) { return column.isPrimary; });\n                                        primaryTableColumns = table.columns.filter(function (column) { return column.isPrimary; });\n                                        if (!(primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1)) return [3 /*break*/, 2];\n                                        changedPrimaryColumns = primaryMetadataColumns.map(function (primaryMetadataColumn) {\n                                            return new TableColumn_1.TableColumn(TableUtils_1.TableUtils.createTableColumnOptions(primaryMetadataColumn, _this.connection.driver));\n                                        });\n                                        return [4 /*yield*/, this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns)];\n                                    case 1:\n                                        _a.sent();\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    RdbmsSchemaBuilder.prototype.updateExistColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, changedColumns, newAndOldTableColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n                                        if (changedColumns.length === 0)\n                                            return [2 /*return*/];\n                                        // drop all foreign keys that point to this column\n                                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 1:\n                                        // drop all foreign keys that point to this column\n                                        _a.sent();\n                                        // drop all composite indices related to this column\n                                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 2:\n                                        // drop all composite indices related to this column\n                                        _a.sent();\n                                        if (!!(this.connection.driver instanceof MysqlDriver_1.MysqlDriver)) return [3 /*break*/, 4];\n                                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 3:\n                                        _a.sent();\n                                        _a.label = 4;\n                                    case 4:\n                                        newAndOldTableColumns = changedColumns.map(function (changedColumn) {\n                                            var oldTableColumn = table.columns.find(function (column) { return column.name === changedColumn.databaseName; });\n                                            var newTableColumnOptions = TableUtils_1.TableUtils.createTableColumnOptions(changedColumn, _this.connection.driver);\n                                            var newTableColumn = new TableColumn_1.TableColumn(newTableColumnOptions);\n                                            return {\n                                                oldColumn: oldTableColumn,\n                                                newColumn: newTableColumn\n                                            };\n                                        });\n                                        if (newAndOldTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"columns changed in \\\"\" + table.name + \"\\\". updating: \" + changedColumns.map(function (column) { return column.databaseName; }).join(\", \"));\n                                        return [4 /*yield*/, this.queryRunner.changeColumns(table, newAndOldTableColumns)];\n                                    case 5:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createNewIndices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, newIndices;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newIndices = metadata.indices\n                                            .filter(function (indexMetadata) { return !table.indices.find(function (tableIndex) { return tableIndex.name === indexMetadata.name; }) && indexMetadata.synchronize === true; })\n                                            .map(function (indexMetadata) { return TableIndex_1.TableIndex.create(indexMetadata); });\n                                        if (newIndices.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"adding new indices \" + newIndices.map(function (index) { return \"\\\"\" + index.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createIndices(table, newIndices)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.createNewChecks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Mysql does not support check constraints\n                        if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                                var table, newChecks;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            newChecks = metadata.checks\n                                                .filter(function (checkMetadata) { return !table.checks.find(function (tableCheck) { return tableCheck.name === checkMetadata.name; }); })\n                                                .map(function (checkMetadata) { return TableCheck_1.TableCheck.create(checkMetadata); });\n                                            if (newChecks.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"adding new check constraints: \" + newChecks.map(function (index) { return \"\\\"\" + index.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.createCheckConstraints(table, newChecks)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createCompositeUniqueConstraints = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, compositeUniques;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        compositeUniques = metadata.uniques\n                                            .filter(function (uniqueMetadata) { return uniqueMetadata.columns.length > 1 && !table.uniques.find(function (tableUnique) { return tableUnique.name === uniqueMetadata.name; }); })\n                                            .map(function (uniqueMetadata) { return TableUnique_1.TableUnique.create(uniqueMetadata); });\n                                        if (compositeUniques.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"adding new unique constraints: \" + compositeUniques.map(function (unique) { return \"\\\"\" + unique.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createUniqueConstraints(table, compositeUniques)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    RdbmsSchemaBuilder.prototype.createForeignKeys = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, newKeys, dbForeignKeys;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newKeys = metadata.foreignKeys.filter(function (foreignKey) {\n                                            return !table.foreignKeys.find(function (dbForeignKey) { return dbForeignKey.name === foreignKey.name; });\n                                        });\n                                        if (newKeys.length === 0)\n                                            return [2 /*return*/];\n                                        dbForeignKeys = newKeys.map(function (foreignKeyMetadata) { return TableForeignKey_1.TableForeignKey.create(foreignKeyMetadata); });\n                                        this.connection.logger.logSchemaBuild(\"creating a foreign keys: \" + newKeys.map(function (key) { return key.name; }).join(\", \") + \" on table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createForeignKeys(table, dbForeignKeys)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnReferencedForeignKeys = function (tablePath, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var table, tablesWithFK, columnForeignKey, clonedTable;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        tablesWithFK = [];\n                        columnForeignKey = table.foreignKeys.find(function (foreignKey) { return foreignKey.columnNames.indexOf(columnName) !== -1; });\n                        if (columnForeignKey) {\n                            clonedTable = table.clone();\n                            clonedTable.foreignKeys = [columnForeignKey];\n                            tablesWithFK.push(clonedTable);\n                            table.removeForeignKey(columnForeignKey);\n                        }\n                        this.queryRunner.loadedTables.forEach(function (loadedTable) {\n                            var dependForeignKeys = loadedTable.foreignKeys.filter(function (foreignKey) {\n                                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n                            });\n                            if (dependForeignKeys.length > 0) {\n                                var clonedTable = loadedTable.clone();\n                                clonedTable.foreignKeys = dependForeignKeys;\n                                tablesWithFK.push(clonedTable);\n                                dependForeignKeys.forEach(function (dependForeignKey) { return loadedTable.removeForeignKey(dependForeignKey); });\n                            }\n                        });\n                        if (!(tablesWithFK.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(tablesWithFK, function (tableWithFK) {\n                                _this.connection.logger.logSchemaBuild(\"dropping related foreign keys of \" + tableWithFK.name + \": \" + tableWithFK.foreignKeys.map(function (foreignKey) { return foreignKey.name; }).join(\", \"));\n                                return _this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n                            })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnCompositeIndices = function (tablePath, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, relatedIndices;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        relatedIndices = table.indices.filter(function (index) { return index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1; });\n                        if (relatedIndices.length === 0)\n                            return [2 /*return*/];\n                        this.connection.logger.logSchemaBuild(\"dropping related indices of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedIndices.map(function (index) { return index.name; }).join(\", \"));\n                        return [4 /*yield*/, this.queryRunner.dropIndices(table, relatedIndices)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnCompositeUniques = function (tablePath, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, relatedUniques;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        relatedUniques = table.uniques.filter(function (unique) { return unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1; });\n                        if (relatedUniques.length === 0)\n                            return [2 /*return*/];\n                        this.connection.logger.logSchemaBuild(\"dropping related unique constraints of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedUniques.map(function (unique) { return unique.name; }).join(\", \"));\n                        return [4 /*yield*/, this.queryRunner.dropUniqueConstraints(table, relatedUniques)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    RdbmsSchemaBuilder.prototype.metadataColumnsToTableColumnOptions = function (columns) {\n        var _this = this;\n        return columns.map(function (columnMetadata) { return TableUtils_1.TableUtils.createTableColumnOptions(columnMetadata, _this.connection.driver); });\n    };\n    return RdbmsSchemaBuilder;\n}());\nexports.RdbmsSchemaBuilder = RdbmsSchemaBuilder;\n\n//# sourceMappingURL=RdbmsSchemaBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}}],"sources":{"../node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Table_1 = require(\"./table/Table\");\nvar TableColumn_1 = require(\"./table/TableColumn\");\nvar TableForeignKey_1 = require(\"./table/TableForeignKey\");\nvar TableIndex_1 = require(\"./table/TableIndex\");\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar TableUtils_1 = require(\"./util/TableUtils\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar TableUnique_1 = require(\"./table/TableUnique\");\nvar TableCheck_1 = require(\"./table/TableCheck\");\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nvar RdbmsSchemaBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RdbmsSchemaBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    RdbmsSchemaBuilder.prototype.build = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tablePaths, error_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queryRunner = this.connection.createQueryRunner(\"master\");\n                        return [4 /*yield*/, this.queryRunner.startTransaction()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 8, 13, 15]);\n                        tablePaths = this.entityToSyncMetadatas.map(function (metadata) { return metadata.tablePath; });\n                        return [4 /*yield*/, this.queryRunner.getTables(tablePaths)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.executeSchemaSyncOperationsInProperOrder()];\n                    case 4:\n                        _a.sent();\n                        if (!this.connection.queryResultCache) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.connection.queryResultCache.synchronize(this.queryRunner)];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [4 /*yield*/, this.queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 8:\n                        error_1 = _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        _a.trys.push([9, 11, , 12]);\n                        return [4 /*yield*/, this.queryRunner.rollbackTransaction()];\n                    case 10:\n                        _a.sent();\n                        return [3 /*break*/, 12];\n                    case 11:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 12];\n                    case 12: throw error_1;\n                    case 13: return [4 /*yield*/, this.queryRunner.release()];\n                    case 14:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    RdbmsSchemaBuilder.prototype.log = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tablePaths;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queryRunner = this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 6, 8]);\n                        tablePaths = this.entityToSyncMetadatas.map(function (metadata) { return metadata.tablePath; });\n                        return [4 /*yield*/, this.queryRunner.getTables(tablePaths)];\n                    case 2:\n                        _a.sent();\n                        this.queryRunner.enableSqlMemory();\n                        return [4 /*yield*/, this.executeSchemaSyncOperationsInProperOrder()];\n                    case 3:\n                        _a.sent();\n                        if (!this.connection.queryResultCache) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.connection.queryResultCache.synchronize(this.queryRunner)];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [2 /*return*/, this.queryRunner.getMemorySql()];\n                    case 6:\n                        // its important to disable this mode despite the fact we are release query builder\n                        // because there exist drivers which reuse same query runner. Also its important to disable\n                        // sql memory after call of getMemorySql() method because last one flushes sql memory.\n                        this.queryRunner.disableSqlMemory();\n                        return [4 /*yield*/, this.queryRunner.release()];\n                    case 7:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(RdbmsSchemaBuilder.prototype, \"entityToSyncMetadatas\", {\n        // -------------------------------------------------------------------------\n        // Protected Methods\n        // -------------------------------------------------------------------------\n        /**\n         * Returns only entities that should be synced in the database.\n         */\n        get: function () {\n            return this.connection.entityMetadatas.filter(function (metadata) { return metadata.synchronize && metadata.tableType !== \"entity-child\"; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    RdbmsSchemaBuilder.prototype.executeSchemaSyncOperationsInProperOrder = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.dropOldForeignKeys()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldIndices()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldChecks()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropCompositeUniqueConstraints()];\n                    case 4:\n                        _a.sent();\n                        // await this.renameTables();\n                        return [4 /*yield*/, this.renameColumns()];\n                    case 5:\n                        // await this.renameTables();\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewTables()];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropRemovedColumns()];\n                    case 7:\n                        _a.sent();\n                        return [4 /*yield*/, this.addNewColumns()];\n                    case 8:\n                        _a.sent();\n                        return [4 /*yield*/, this.updatePrimaryKeys()];\n                    case 9:\n                        _a.sent();\n                        return [4 /*yield*/, this.updateExistColumns()];\n                    case 10:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewIndices()];\n                    case 11:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewChecks()];\n                    case 12:\n                        _a.sent();\n                        return [4 /*yield*/, this.createCompositeUniqueConstraints()];\n                    case 13:\n                        _a.sent();\n                        return [4 /*yield*/, this.createForeignKeys()];\n                    case 14:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    RdbmsSchemaBuilder.prototype.dropOldForeignKeys = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, tableForeignKeysToDrop;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        tableForeignKeysToDrop = table.foreignKeys.filter(function (tableForeignKey) {\n                                            var metadataFK = metadata.foreignKeys.find(function (metadataForeignKey) { return metadataForeignKey.name === tableForeignKey.name; });\n                                            return !metadataFK\n                                                || metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete\n                                                || metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate;\n                                        });\n                                        if (tableForeignKeysToDrop.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping old foreign keys of \" + table.name + \": \" + tableForeignKeysToDrop.map(function (dbForeignKey) { return dbForeignKey.name; }).join(\", \"));\n                                        // drop foreign keys from the database\n                                        return [4 /*yield*/, this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop)];\n                                    case 1:\n                                        // drop foreign keys from the database\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Rename tables\n     */\n    RdbmsSchemaBuilder.prototype.renameTables = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                return [2 /*return*/];\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    RdbmsSchemaBuilder.prototype.renameColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, renamedMetadataColumns, renamedTableColumns, renamedColumn;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        if (metadata.columns.length !== table.columns.length)\n                                            return [2 /*return*/];\n                                        renamedMetadataColumns = metadata.columns.filter(function (column) {\n                                            return !table.columns.find(function (tableColumn) {\n                                                return tableColumn.name === column.databaseName\n                                                    && tableColumn.type === _this.connection.driver.normalizeType(column)\n                                                    && tableColumn.isNullable === column.isNullable\n                                                    && tableColumn.isUnique === _this.connection.driver.normalizeIsUnique(column);\n                                            });\n                                        });\n                                        if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                                            return [2 /*return*/];\n                                        renamedTableColumns = table.columns.filter(function (tableColumn) {\n                                            return !metadata.columns.find(function (column) {\n                                                return column.databaseName === tableColumn.name\n                                                    && _this.connection.driver.normalizeType(column) === tableColumn.type\n                                                    && column.isNullable === tableColumn.isNullable\n                                                    && _this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                                            });\n                                        });\n                                        if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                                            return [2 /*return*/];\n                                        renamedColumn = renamedTableColumns[0].clone();\n                                        renamedColumn.name = renamedMetadataColumns[0].databaseName;\n                                        this.connection.logger.logSchemaBuild(\"renaming column \\\"\" + renamedTableColumns[0].name + \"\\\" in to \\\"\" + renamedColumn.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldIndices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, dropQueries;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        dropQueries = table.indices\n                                            .filter(function (tableIndex) {\n                                            var indexMetadata = metadata.indices.find(function (index) { return index.name === tableIndex.name; });\n                                            if (indexMetadata) {\n                                                if (indexMetadata.synchronize === false)\n                                                    return false;\n                                                if (indexMetadata.isUnique !== tableIndex.isUnique)\n                                                    return true;\n                                                if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                                                    return true;\n                                                if (indexMetadata.isFulltext !== tableIndex.isFulltext)\n                                                    return true;\n                                                if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                                                    return true;\n                                                return !indexMetadata.columns.every(function (column) { return tableIndex.columnNames.indexOf(column.databaseName) !== -1; });\n                                            }\n                                            return true;\n                                        })\n                                            .map(function (tableIndex) { return __awaiter(_this, void 0, void 0, function () {\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        this.connection.logger.logSchemaBuild(\"dropping an index: \\\"\" + tableIndex.name + \"\\\" from table \" + table.name);\n                                                        return [4 /*yield*/, this.queryRunner.dropIndex(table, tableIndex)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); });\n                                        return [4 /*yield*/, Promise.all(dropQueries)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldChecks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Mysql does not support check constraints\n                        if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                                var table, oldChecks;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            oldChecks = table.checks.filter(function (tableCheck) {\n                                                return !metadata.checks.find(function (checkMetadata) { return checkMetadata.name === tableCheck.name; });\n                                            });\n                                            if (oldChecks.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"dropping old check constraint: \" + oldChecks.map(function (check) { return \"\\\"\" + check.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.dropCheckConstraints(table, oldChecks)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropCompositeUniqueConstraints = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, compositeUniques;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        compositeUniques = table.uniques.filter(function (tableUnique) {\n                                            return tableUnique.columnNames.length > 1 && !metadata.uniques.find(function (uniqueMetadata) { return uniqueMetadata.name === tableUnique.name; });\n                                        });\n                                        if (compositeUniques.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping old unique constraint: \" + compositeUniques.map(function (unique) { return \"\\\"\" + unique.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.dropUniqueConstraints(table, compositeUniques)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    RdbmsSchemaBuilder.prototype.createNewTables = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var existTable, table;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        existTable = this.queryRunner.loadedTables.find(function (table) {\n                                            var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                                            var schema = metadata.schema || _this.connection.driver.options.schema;\n                                            var fullTableName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                                            return table.name === fullTableName;\n                                        });\n                                        if (existTable)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"creating a new table: \" + metadata.tablePath);\n                                        table = Table_1.Table.create(metadata, this.connection.driver);\n                                        return [4 /*yield*/, this.queryRunner.createTable(table, false, false)];\n                                    case 1:\n                                        _a.sent();\n                                        this.queryRunner.loadedTables.push(table);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    RdbmsSchemaBuilder.prototype.dropRemovedColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, droppedTableColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        droppedTableColumns = table.columns.filter(function (tableColumn) {\n                                            return !metadata.columns.find(function (columnMetadata) { return columnMetadata.databaseName === tableColumn.name; });\n                                        });\n                                        if (droppedTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"columns dropped in \" + table.name + \": \" + droppedTableColumns.map(function (column) { return column.name; }).join(\", \"));\n                                        // drop columns from the database\n                                        return [4 /*yield*/, this.queryRunner.dropColumns(table, droppedTableColumns)];\n                                    case 1:\n                                        // drop columns from the database\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    RdbmsSchemaBuilder.prototype.addNewColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, newColumnMetadatas, newTableColumnOptions, newTableColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newColumnMetadatas = metadata.columns.filter(function (columnMetadata) {\n                                            return !table.columns.find(function (tableColumn) { return tableColumn.name === columnMetadata.databaseName; });\n                                        });\n                                        if (newColumnMetadatas.length === 0)\n                                            return [2 /*return*/];\n                                        newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n                                        newTableColumns = newTableColumnOptions.map(function (option) { return new TableColumn_1.TableColumn(option); });\n                                        if (newTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"new columns added: \" + newColumnMetadatas.map(function (column) { return column.databaseName; }).join(\", \"));\n                                        return [4 /*yield*/, this.queryRunner.addColumns(table, newTableColumns)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    RdbmsSchemaBuilder.prototype.updatePrimaryKeys = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, primaryMetadataColumns, primaryTableColumns, changedPrimaryColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        primaryMetadataColumns = metadata.columns.filter(function (column) { return column.isPrimary; });\n                                        primaryTableColumns = table.columns.filter(function (column) { return column.isPrimary; });\n                                        if (!(primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1)) return [3 /*break*/, 2];\n                                        changedPrimaryColumns = primaryMetadataColumns.map(function (primaryMetadataColumn) {\n                                            return new TableColumn_1.TableColumn(TableUtils_1.TableUtils.createTableColumnOptions(primaryMetadataColumn, _this.connection.driver));\n                                        });\n                                        return [4 /*yield*/, this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns)];\n                                    case 1:\n                                        _a.sent();\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    RdbmsSchemaBuilder.prototype.updateExistColumns = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var table, changedColumns, newAndOldTableColumns;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n                                        if (changedColumns.length === 0)\n                                            return [2 /*return*/];\n                                        // drop all foreign keys that point to this column\n                                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 1:\n                                        // drop all foreign keys that point to this column\n                                        _a.sent();\n                                        // drop all composite indices related to this column\n                                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 2:\n                                        // drop all composite indices related to this column\n                                        _a.sent();\n                                        if (!!(this.connection.driver instanceof MysqlDriver_1.MysqlDriver)) return [3 /*break*/, 4];\n                                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 3:\n                                        _a.sent();\n                                        _a.label = 4;\n                                    case 4:\n                                        newAndOldTableColumns = changedColumns.map(function (changedColumn) {\n                                            var oldTableColumn = table.columns.find(function (column) { return column.name === changedColumn.databaseName; });\n                                            var newTableColumnOptions = TableUtils_1.TableUtils.createTableColumnOptions(changedColumn, _this.connection.driver);\n                                            var newTableColumn = new TableColumn_1.TableColumn(newTableColumnOptions);\n                                            return {\n                                                oldColumn: oldTableColumn,\n                                                newColumn: newTableColumn\n                                            };\n                                        });\n                                        if (newAndOldTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"columns changed in \\\"\" + table.name + \"\\\". updating: \" + changedColumns.map(function (column) { return column.databaseName; }).join(\", \"));\n                                        return [4 /*yield*/, this.queryRunner.changeColumns(table, newAndOldTableColumns)];\n                                    case 5:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createNewIndices = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, newIndices;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newIndices = metadata.indices\n                                            .filter(function (indexMetadata) { return !table.indices.find(function (tableIndex) { return tableIndex.name === indexMetadata.name; }) && indexMetadata.synchronize === true; })\n                                            .map(function (indexMetadata) { return TableIndex_1.TableIndex.create(indexMetadata); });\n                                        if (newIndices.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"adding new indices \" + newIndices.map(function (index) { return \"\\\"\" + index.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createIndices(table, newIndices)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.createNewChecks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Mysql does not support check constraints\n                        if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                                var table, newChecks;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            newChecks = metadata.checks\n                                                .filter(function (checkMetadata) { return !table.checks.find(function (tableCheck) { return tableCheck.name === checkMetadata.name; }); })\n                                                .map(function (checkMetadata) { return TableCheck_1.TableCheck.create(checkMetadata); });\n                                            if (newChecks.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"adding new check constraints: \" + newChecks.map(function (index) { return \"\\\"\" + index.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.createCheckConstraints(table, newChecks)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createCompositeUniqueConstraints = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, compositeUniques;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        compositeUniques = metadata.uniques\n                                            .filter(function (uniqueMetadata) { return uniqueMetadata.columns.length > 1 && !table.uniques.find(function (tableUnique) { return tableUnique.name === uniqueMetadata.name; }); })\n                                            .map(function (uniqueMetadata) { return TableUnique_1.TableUnique.create(uniqueMetadata); });\n                                        if (compositeUniques.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"adding new unique constraints: \" + compositeUniques.map(function (unique) { return \"\\\"\" + unique.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createUniqueConstraints(table, compositeUniques)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    RdbmsSchemaBuilder.prototype.createForeignKeys = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return __awaiter(_this, void 0, void 0, function () {\n                            var table, newKeys, dbForeignKeys;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newKeys = metadata.foreignKeys.filter(function (foreignKey) {\n                                            return !table.foreignKeys.find(function (dbForeignKey) { return dbForeignKey.name === foreignKey.name; });\n                                        });\n                                        if (newKeys.length === 0)\n                                            return [2 /*return*/];\n                                        dbForeignKeys = newKeys.map(function (foreignKeyMetadata) { return TableForeignKey_1.TableForeignKey.create(foreignKeyMetadata); });\n                                        this.connection.logger.logSchemaBuild(\"creating a foreign keys: \" + newKeys.map(function (key) { return key.name; }).join(\", \") + \" on table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createForeignKeys(table, dbForeignKeys)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnReferencedForeignKeys = function (tablePath, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var table, tablesWithFK, columnForeignKey, clonedTable;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        tablesWithFK = [];\n                        columnForeignKey = table.foreignKeys.find(function (foreignKey) { return foreignKey.columnNames.indexOf(columnName) !== -1; });\n                        if (columnForeignKey) {\n                            clonedTable = table.clone();\n                            clonedTable.foreignKeys = [columnForeignKey];\n                            tablesWithFK.push(clonedTable);\n                            table.removeForeignKey(columnForeignKey);\n                        }\n                        this.queryRunner.loadedTables.forEach(function (loadedTable) {\n                            var dependForeignKeys = loadedTable.foreignKeys.filter(function (foreignKey) {\n                                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n                            });\n                            if (dependForeignKeys.length > 0) {\n                                var clonedTable = loadedTable.clone();\n                                clonedTable.foreignKeys = dependForeignKeys;\n                                tablesWithFK.push(clonedTable);\n                                dependForeignKeys.forEach(function (dependForeignKey) { return loadedTable.removeForeignKey(dependForeignKey); });\n                            }\n                        });\n                        if (!(tablesWithFK.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(tablesWithFK, function (tableWithFK) {\n                                _this.connection.logger.logSchemaBuild(\"dropping related foreign keys of \" + tableWithFK.name + \": \" + tableWithFK.foreignKeys.map(function (foreignKey) { return foreignKey.name; }).join(\", \"));\n                                return _this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n                            })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnCompositeIndices = function (tablePath, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, relatedIndices;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        relatedIndices = table.indices.filter(function (index) { return index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1; });\n                        if (relatedIndices.length === 0)\n                            return [2 /*return*/];\n                        this.connection.logger.logSchemaBuild(\"dropping related indices of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedIndices.map(function (index) { return index.name; }).join(\", \"));\n                        return [4 /*yield*/, this.queryRunner.dropIndices(table, relatedIndices)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnCompositeUniques = function (tablePath, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, relatedUniques;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        relatedUniques = table.uniques.filter(function (unique) { return unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1; });\n                        if (relatedUniques.length === 0)\n                            return [2 /*return*/];\n                        this.connection.logger.logSchemaBuild(\"dropping related unique constraints of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedUniques.map(function (unique) { return unique.name; }).join(\", \"));\n                        return [4 /*yield*/, this.queryRunner.dropUniqueConstraints(table, relatedUniques)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    RdbmsSchemaBuilder.prototype.metadataColumnsToTableColumnOptions = function (columns) {\n        var _this = this;\n        return columns.map(function (columnMetadata) { return TableUtils_1.TableUtils.createTableColumnOptions(columnMetadata, _this.connection.driver); });\n    };\n    return RdbmsSchemaBuilder;\n}());\nexports.RdbmsSchemaBuilder = RdbmsSchemaBuilder;\n\n//# sourceMappingURL=RdbmsSchemaBuilder.js.map\n"},"lineCount":956}},"hash":"a7afb3ecf5d6de8d5a3ddda4186b7f73","cacheData":{"env":{}}}