{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../schema-builder/table/Table","loc":{"line":38,"column":22}},{"name":"./Migration","loc":{"line":39,"column":26}},{"name":"../util/PromiseUtils","loc":{"line":40,"column":29}},{"name":"../driver/sqlserver/SqlServerDriver","loc":{"line":41,"column":32}},{"name":"../driver/sqlserver/MssqlParameter","loc":{"line":42,"column":31}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Table_1 = require(\"../schema-builder/table/Table\");\nvar Migration_1 = require(\"./Migration\");\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar MssqlParameter_1 = require(\"../driver/sqlserver/MssqlParameter\");\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nvar MigrationExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function MigrationExecutor(connection, queryRunner) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if migrations must be executed in a transaction.\n         */\n        this.transaction = true;\n        var options = this.connection.driver.options;\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    MigrationExecutor.prototype.executePendingMigrations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _a.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n                        allMigrations = this.getMigrations();\n                        pendingMigrations = allMigrations.filter(function (migration) {\n                            // check if we already have executed migration\n                            var executedMigration = executedMigrations.find(function (executedMigration) { return executedMigration.name === migration.name; });\n                            if (executedMigration)\n                                return false;\n                            // migration is new and not executed. now check if its timestamp is correct\n                            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n                            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n                            // every check is passed means that migration was not run yet and we need to run it\n                            return true;\n                        });\n                        if (!!pendingMigrations.length) return [3 /*break*/, 5];\n                        this.connection.logger.logSchemaBuild(\"No migrations are pending\");\n                        if (!!this.queryRunner) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                    case 5:\n                        // log information about migration execution\n                        this.connection.logger.logSchemaBuild(executedMigrations.length + \" migrations are already loaded in the database.\");\n                        this.connection.logger.logSchemaBuild(allMigrations.length + \" migrations were found in the source code.\");\n                        if (lastTimeExecutedMigration)\n                            this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + \" is the last executed migration. It was executed on \" + new Date(lastTimeExecutedMigration.timestamp).toString() + \".\");\n                        this.connection.logger.logSchemaBuild(pendingMigrations.length + \" migrations are new migrations that needs to be executed.\");\n                        transactionStartedByUs = false;\n                        if (!(this.transaction && !queryRunner.isTransactionActive)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 6:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 7;\n                    case 7:\n                        _a.trys.push([7, 11, 16, 19]);\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(pendingMigrations, function (migration) {\n                                return migration.instance.up(queryRunner)\n                                    .then(function () {\n                                    return _this.insertExecutedMigration(queryRunner, migration);\n                                })\n                                    .then(function () {\n                                    _this.connection.logger.logSchemaBuild(\"Migration \" + migration.name + \" has been executed successfully.\");\n                                });\n                            })];\n                    case 8:\n                        _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 10];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 9:\n                        _a.sent();\n                        _a.label = 10;\n                    case 10: return [3 /*break*/, 19];\n                    case 11:\n                        err_1 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 15];\n                        _a.label = 12;\n                    case 12:\n                        _a.trys.push([12, 14, , 15]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 13:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 14:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 15];\n                    case 15: throw err_1;\n                    case 16:\n                        if (!!this.queryRunner) return [3 /*break*/, 18];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 17:\n                        _a.sent();\n                        _a.label = 18;\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Reverts last migration that were run.\n     */\n    MigrationExecutor.prototype.undoLastMigration = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _a.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n                        // if no migrations found in the database then nothing to revert\n                        if (!lastTimeExecutedMigration) {\n                            this.connection.logger.logSchemaBuild(\"No migrations was found in the database. Nothing to revert!\");\n                            return [2 /*return*/];\n                        }\n                        allMigrations = this.getMigrations();\n                        migrationToRevert = allMigrations.find(function (migration) { return migration.name === lastTimeExecutedMigration.name; });\n                        // if no migrations found in the database then nothing to revert\n                        if (!migrationToRevert)\n                            throw new Error(\"No migration \" + lastTimeExecutedMigration.name + \" was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.\");\n                        // log information about migration execution\n                        this.connection.logger.logSchemaBuild(executedMigrations.length + \" migrations are already loaded in the database.\");\n                        this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + \" is the last executed migration. It was executed on \" + new Date(lastTimeExecutedMigration.timestamp).toString() + \".\");\n                        this.connection.logger.logSchemaBuild(\"Now reverting it...\");\n                        transactionStartedByUs = false;\n                        if (!(this.transaction && !queryRunner.isTransactionActive)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 3:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 9, 14, 17]);\n                        return [4 /*yield*/, migrationToRevert.instance.down(queryRunner)];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteExecutedMigration(queryRunner, migrationToRevert)];\n                    case 6:\n                        _a.sent();\n                        this.connection.logger.logSchemaBuild(\"Migration \" + migrationToRevert.name + \" has been reverted successfully.\");\n                        if (!transactionStartedByUs) return [3 /*break*/, 8];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 17];\n                    case 9:\n                        err_2 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 13];\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_2 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw err_2;\n                    case 14:\n                        if (!!this.queryRunner) return [3 /*break*/, 16];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 15:\n                        _a.sent();\n                        _a.label = 16;\n                    case 16: return [7 /*endfinally*/];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    MigrationExecutor.prototype.createMigrationsTableIfNotExist = function (queryRunner) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tableExist;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, queryRunner.hasTable(this.migrationsTable)];\n                    case 1:\n                        tableExist = _a.sent();\n                        if (!!tableExist) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.createTable(new Table_1.Table({\n                                name: this.migrationsTable,\n                                columns: [\n                                    {\n                                        name: \"id\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationId }),\n                                        isGenerated: true,\n                                        generationStrategy: \"increment\",\n                                        isPrimary: true,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"timestamp\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }),\n                                        isPrimary: false,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"name\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }),\n                                        isNullable: false\n                                    },\n                                ]\n                            }))];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    MigrationExecutor.prototype.loadExecutedMigrations = function (queryRunner) {\n        return __awaiter(this, void 0, void 0, function () {\n            var migrationsRaw;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connection.manager\n                            .createQueryBuilder(queryRunner)\n                            .select()\n                            .from(this.migrationsTable, this.migrationsTableName)\n                            .getRawMany()];\n                    case 1:\n                        migrationsRaw = _a.sent();\n                        return [2 /*return*/, migrationsRaw.map(function (migrationRaw) {\n                                return new Migration_1.Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    MigrationExecutor.prototype.getMigrations = function () {\n        var migrations = this.connection.migrations.map(function (migration) {\n            var migrationClassName = migration.constructor.name;\n            var migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(migrationClassName + \" migration name is wrong. Migration class name should have a UNIX timestamp appended. \");\n            return new Migration_1.Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n        // sort them by timestamp\n        return migrations.sort(function (a, b) { return a.timestamp - b.timestamp; });\n    };\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    MigrationExecutor.prototype.getLatestTimestampMigration = function (migrations) {\n        var sortedMigrations = migrations.map(function (migration) { return migration; }).sort(function (a, b) { return (a.timestamp - b.timestamp) * -1; });\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    };\n    /**\n     * Finds the latest migration (sorts by id) in the given array of migrations.\n     */\n    MigrationExecutor.prototype.getLatestExecutedMigration = function (migrations) {\n        var sortedMigrations = migrations.map(function (migration) { return migration; }).sort(function (a, b) { return ((a.id || 0) - (b.id || 0)) * -1; });\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    };\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    MigrationExecutor.prototype.insertExecutedMigration = function (queryRunner, migration) {\n        return __awaiter(this, void 0, void 0, function () {\n            var values, qb;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        values = {};\n                        if (this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                            values[\"timestamp\"] = new MssqlParameter_1.MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));\n                            values[\"name\"] = new MssqlParameter_1.MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));\n                        }\n                        else {\n                            values[\"timestamp\"] = migration.timestamp;\n                            values[\"name\"] = migration.name;\n                        }\n                        qb = queryRunner.manager.createQueryBuilder();\n                        return [4 /*yield*/, qb.insert()\n                                .into(this.migrationsTable)\n                                .values(values)\n                                .execute()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    MigrationExecutor.prototype.deleteExecutedMigration = function (queryRunner, migration) {\n        return __awaiter(this, void 0, void 0, function () {\n            var conditions, qb;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        conditions = {};\n                        if (this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                            conditions[\"timestamp\"] = new MssqlParameter_1.MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));\n                            conditions[\"name\"] = new MssqlParameter_1.MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));\n                        }\n                        else {\n                            conditions[\"timestamp\"] = migration.timestamp;\n                            conditions[\"name\"] = migration.name;\n                        }\n                        qb = queryRunner.manager.createQueryBuilder();\n                        return [4 /*yield*/, qb.delete()\n                                .from(this.migrationsTable)\n                                .where(qb.escape(\"timestamp\") + \" = :timestamp\")\n                                .andWhere(qb.escape(\"name\") + \" = :name\")\n                                .setParameters(conditions)\n                                .execute()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return MigrationExecutor;\n}());\nexports.MigrationExecutor = MigrationExecutor;\n\n//# sourceMappingURL=MigrationExecutor.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/migration/MigrationExecutor.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}}],"sources":{"../node_modules/typeorm/migration/MigrationExecutor.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Table_1 = require(\"../schema-builder/table/Table\");\nvar Migration_1 = require(\"./Migration\");\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar MssqlParameter_1 = require(\"../driver/sqlserver/MssqlParameter\");\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nvar MigrationExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function MigrationExecutor(connection, queryRunner) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if migrations must be executed in a transaction.\n         */\n        this.transaction = true;\n        var options = this.connection.driver.options;\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    MigrationExecutor.prototype.executePendingMigrations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _a.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n                        allMigrations = this.getMigrations();\n                        pendingMigrations = allMigrations.filter(function (migration) {\n                            // check if we already have executed migration\n                            var executedMigration = executedMigrations.find(function (executedMigration) { return executedMigration.name === migration.name; });\n                            if (executedMigration)\n                                return false;\n                            // migration is new and not executed. now check if its timestamp is correct\n                            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n                            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n                            // every check is passed means that migration was not run yet and we need to run it\n                            return true;\n                        });\n                        if (!!pendingMigrations.length) return [3 /*break*/, 5];\n                        this.connection.logger.logSchemaBuild(\"No migrations are pending\");\n                        if (!!this.queryRunner) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                    case 5:\n                        // log information about migration execution\n                        this.connection.logger.logSchemaBuild(executedMigrations.length + \" migrations are already loaded in the database.\");\n                        this.connection.logger.logSchemaBuild(allMigrations.length + \" migrations were found in the source code.\");\n                        if (lastTimeExecutedMigration)\n                            this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + \" is the last executed migration. It was executed on \" + new Date(lastTimeExecutedMigration.timestamp).toString() + \".\");\n                        this.connection.logger.logSchemaBuild(pendingMigrations.length + \" migrations are new migrations that needs to be executed.\");\n                        transactionStartedByUs = false;\n                        if (!(this.transaction && !queryRunner.isTransactionActive)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 6:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 7;\n                    case 7:\n                        _a.trys.push([7, 11, 16, 19]);\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(pendingMigrations, function (migration) {\n                                return migration.instance.up(queryRunner)\n                                    .then(function () {\n                                    return _this.insertExecutedMigration(queryRunner, migration);\n                                })\n                                    .then(function () {\n                                    _this.connection.logger.logSchemaBuild(\"Migration \" + migration.name + \" has been executed successfully.\");\n                                });\n                            })];\n                    case 8:\n                        _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 10];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 9:\n                        _a.sent();\n                        _a.label = 10;\n                    case 10: return [3 /*break*/, 19];\n                    case 11:\n                        err_1 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 15];\n                        _a.label = 12;\n                    case 12:\n                        _a.trys.push([12, 14, , 15]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 13:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 14:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 15];\n                    case 15: throw err_1;\n                    case 16:\n                        if (!!this.queryRunner) return [3 /*break*/, 18];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 17:\n                        _a.sent();\n                        _a.label = 18;\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Reverts last migration that were run.\n     */\n    MigrationExecutor.prototype.undoLastMigration = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _a.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n                        // if no migrations found in the database then nothing to revert\n                        if (!lastTimeExecutedMigration) {\n                            this.connection.logger.logSchemaBuild(\"No migrations was found in the database. Nothing to revert!\");\n                            return [2 /*return*/];\n                        }\n                        allMigrations = this.getMigrations();\n                        migrationToRevert = allMigrations.find(function (migration) { return migration.name === lastTimeExecutedMigration.name; });\n                        // if no migrations found in the database then nothing to revert\n                        if (!migrationToRevert)\n                            throw new Error(\"No migration \" + lastTimeExecutedMigration.name + \" was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.\");\n                        // log information about migration execution\n                        this.connection.logger.logSchemaBuild(executedMigrations.length + \" migrations are already loaded in the database.\");\n                        this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + \" is the last executed migration. It was executed on \" + new Date(lastTimeExecutedMigration.timestamp).toString() + \".\");\n                        this.connection.logger.logSchemaBuild(\"Now reverting it...\");\n                        transactionStartedByUs = false;\n                        if (!(this.transaction && !queryRunner.isTransactionActive)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 3:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 9, 14, 17]);\n                        return [4 /*yield*/, migrationToRevert.instance.down(queryRunner)];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteExecutedMigration(queryRunner, migrationToRevert)];\n                    case 6:\n                        _a.sent();\n                        this.connection.logger.logSchemaBuild(\"Migration \" + migrationToRevert.name + \" has been reverted successfully.\");\n                        if (!transactionStartedByUs) return [3 /*break*/, 8];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 17];\n                    case 9:\n                        err_2 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 13];\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_2 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw err_2;\n                    case 14:\n                        if (!!this.queryRunner) return [3 /*break*/, 16];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 15:\n                        _a.sent();\n                        _a.label = 16;\n                    case 16: return [7 /*endfinally*/];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    MigrationExecutor.prototype.createMigrationsTableIfNotExist = function (queryRunner) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tableExist;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, queryRunner.hasTable(this.migrationsTable)];\n                    case 1:\n                        tableExist = _a.sent();\n                        if (!!tableExist) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.createTable(new Table_1.Table({\n                                name: this.migrationsTable,\n                                columns: [\n                                    {\n                                        name: \"id\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationId }),\n                                        isGenerated: true,\n                                        generationStrategy: \"increment\",\n                                        isPrimary: true,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"timestamp\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }),\n                                        isPrimary: false,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"name\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }),\n                                        isNullable: false\n                                    },\n                                ]\n                            }))];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    MigrationExecutor.prototype.loadExecutedMigrations = function (queryRunner) {\n        return __awaiter(this, void 0, void 0, function () {\n            var migrationsRaw;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connection.manager\n                            .createQueryBuilder(queryRunner)\n                            .select()\n                            .from(this.migrationsTable, this.migrationsTableName)\n                            .getRawMany()];\n                    case 1:\n                        migrationsRaw = _a.sent();\n                        return [2 /*return*/, migrationsRaw.map(function (migrationRaw) {\n                                return new Migration_1.Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    MigrationExecutor.prototype.getMigrations = function () {\n        var migrations = this.connection.migrations.map(function (migration) {\n            var migrationClassName = migration.constructor.name;\n            var migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(migrationClassName + \" migration name is wrong. Migration class name should have a UNIX timestamp appended. \");\n            return new Migration_1.Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n        // sort them by timestamp\n        return migrations.sort(function (a, b) { return a.timestamp - b.timestamp; });\n    };\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    MigrationExecutor.prototype.getLatestTimestampMigration = function (migrations) {\n        var sortedMigrations = migrations.map(function (migration) { return migration; }).sort(function (a, b) { return (a.timestamp - b.timestamp) * -1; });\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    };\n    /**\n     * Finds the latest migration (sorts by id) in the given array of migrations.\n     */\n    MigrationExecutor.prototype.getLatestExecutedMigration = function (migrations) {\n        var sortedMigrations = migrations.map(function (migration) { return migration; }).sort(function (a, b) { return ((a.id || 0) - (b.id || 0)) * -1; });\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    };\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    MigrationExecutor.prototype.insertExecutedMigration = function (queryRunner, migration) {\n        return __awaiter(this, void 0, void 0, function () {\n            var values, qb;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        values = {};\n                        if (this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                            values[\"timestamp\"] = new MssqlParameter_1.MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));\n                            values[\"name\"] = new MssqlParameter_1.MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));\n                        }\n                        else {\n                            values[\"timestamp\"] = migration.timestamp;\n                            values[\"name\"] = migration.name;\n                        }\n                        qb = queryRunner.manager.createQueryBuilder();\n                        return [4 /*yield*/, qb.insert()\n                                .into(this.migrationsTable)\n                                .values(values)\n                                .execute()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    MigrationExecutor.prototype.deleteExecutedMigration = function (queryRunner, migration) {\n        return __awaiter(this, void 0, void 0, function () {\n            var conditions, qb;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        conditions = {};\n                        if (this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                            conditions[\"timestamp\"] = new MssqlParameter_1.MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));\n                            conditions[\"name\"] = new MssqlParameter_1.MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));\n                        }\n                        else {\n                            conditions[\"timestamp\"] = migration.timestamp;\n                            conditions[\"name\"] = migration.name;\n                        }\n                        qb = queryRunner.manager.createQueryBuilder();\n                        return [4 /*yield*/, qb.delete()\n                                .from(this.migrationsTable)\n                                .where(qb.escape(\"timestamp\") + \" = :timestamp\")\n                                .andWhere(qb.escape(\"name\") + \" = :name\")\n                                .setParameters(conditions)\n                                .execute()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return MigrationExecutor;\n}());\nexports.MigrationExecutor = MigrationExecutor;\n\n//# sourceMappingURL=MigrationExecutor.js.map\n"},"lineCount":412}},"hash":"fea3f2b4e863f21e1f3246507f917bec","cacheData":{"env":{}}}