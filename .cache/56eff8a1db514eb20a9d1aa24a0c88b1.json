{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Transforms raw document into entity object.\n * Entity is constructed based on its entity metadata.\n */\nvar DocumentToEntityTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function DocumentToEntityTransformer(// private selectionMap: AliasMap,\n    // private joinMappings: JoinMapping[],\n    // private relationCountMetas: RelationCountAttribute[],\n    enableRelationIdValues) {\n        if (enableRelationIdValues === void 0) { enableRelationIdValues = false; }\n        this.enableRelationIdValues = enableRelationIdValues;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    DocumentToEntityTransformer.prototype.transformAll = function (documents, metadata) {\n        var _this = this;\n        return documents.map(function (document) { return _this.transform(document, metadata); });\n    };\n    DocumentToEntityTransformer.prototype.transform = function (document, metadata) {\n        var entity = metadata.create();\n        var hasData = false;\n        // handle _id property the special way\n        if (metadata.objectIdColumn && document[metadata.objectIdColumn.databaseNameWithoutPrefixes]) {\n            // todo: we can't use driver in this class\n            // do we really need prepare hydrated value here? If no then no problem. If yes then think maybe prepareHydratedValue process should be extracted out of driver class?\n            // entity[metadata.objectIdColumn.propertyName] = this.driver.prepareHydratedValue(document[metadata.objectIdColumn.name\"], metadata.objectIdColumn);\n            entity[metadata.objectIdColumn.propertyName] = document[metadata.objectIdColumn.databaseNameWithoutPrefixes];\n            hasData = true;\n        }\n        // add special columns that contains relation ids\n        if (this.enableRelationIdValues) {\n            metadata.columns.filter(function (column) { return !!column.relationMetadata; }).forEach(function (column) {\n                var valueInObject = document[column.databaseNameWithoutPrefixes];\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\n                    // todo: we can't use driver in this class\n                    // const value = this.driver.prepareHydratedValue(valueInObject, column);\n                    entity[column.propertyName] = valueInObject;\n                    hasData = true;\n                }\n            });\n        }\n        /*this.joinMappings\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.relationOwnerSelection && joinMapping.alias.target)\n            .map(joinMapping => {\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, joinMapping.alias);\n                const isResultArray = joinMapping.isMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result && (!isResultArray || result.length > 0)) {\n                    entity[joinMapping.propertyName] = result;\n                    hasData = true;\n                }\n            });*/\n        // get value from columns selections and put them into object\n        metadata.ownColumns.forEach(function (column) {\n            var valueInObject = document[column.databaseNameWithoutPrefixes];\n            if (valueInObject !== undefined &&\n                valueInObject !== null &&\n                column.propertyName &&\n                !column.isVirtual) {\n                // const value = this.driver.prepareHydratedValue(valueInObject, column);\n                entity[column.propertyName] = valueInObject;\n                hasData = true;\n            }\n        });\n        var addEmbeddedValuesRecursively = function (entity, document, embeddeds) {\n            embeddeds.forEach(function (embedded) {\n                if (!document[embedded.prefix])\n                    return;\n                if (embedded.isArray) {\n                    entity[embedded.propertyName] = document[embedded.prefix].map(function (subValue) {\n                        var newItem = embedded.create();\n                        embedded.columns.forEach(function (column) {\n                            newItem[column.propertyName] = subValue[column.databaseNameWithoutPrefixes];\n                        });\n                        return newItem;\n                    });\n                }\n                else {\n                    embedded.columns.forEach(function (column) {\n                        var value = document[embedded.prefix][column.databaseNameWithoutPrefixes];\n                        if (!value)\n                            return;\n                        if (!entity[embedded.propertyName])\n                            entity[embedded.propertyName] = embedded.create();\n                        entity[embedded.propertyName][column.propertyName] = value;\n                    });\n                }\n                addEmbeddedValuesRecursively(entity[embedded.propertyName], document[embedded.prefix], embedded.embeddeds);\n            });\n        };\n        addEmbeddedValuesRecursively(entity, document, metadata.embeddeds);\n        // if relation is loaded then go into it recursively and transform its values too\n        /*metadata.relations.forEach(relation => {\n            const relationAlias = this.selectionMap.findSelectionByParent(alias.name, relation.propertyName);\n            if (relationAlias) {\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, relationAlias);\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result) {\n                    let propertyName = relation.propertyName;\n                    if (joinMapping) {\n                        propertyName = joinMapping.propertyName;\n                    }\n\n                    if (relation.isLazy) {\n                        entity[\"__\" + propertyName + \"__\"] = result;\n                    } else {\n                        entity[propertyName] = result;\n                    }\n\n                    if (!isResultArray || result.length > 0)\n                        hasData = true;\n                }\n            }\n\n            // if relation has id field then relation id/ids to that field.\n            if (relation.isManyToMany) {\n                if (relationAlias) {\n                    const ids: any[] = [];\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\n\n                    if (relation.idField || joinMapping) {\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\n                        const junctionMetadata = relation.junctionEntityMetadata;\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;\n\n                        rawSqlResults.forEach(results => {\n                            if (relationAlias) {\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\n                                if (value !== undefined && value !== null)\n                                    ids.push(value);\n                            }\n                        });\n\n                        if (ids && ids.length)\n                            entity[propertyName] = ids;\n                    }\n                }\n            } else if (relation.idField) {\n                const relationName = relation.name;\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\n            }\n\n            // if relation counter\n            this.relationCountMetas.forEach(joinMeta => {\n                if (joinMeta.alias === relationAlias) {\n                    // console.log(\"relation count was found for relation: \", relation);\n                    // joinMeta.entity = entity;\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\n                    // console.log(joinMeta);\n                    // console.log(\"---------------------\");\n                }\n            });\n        });*/\n        return hasData ? entity : null;\n    };\n    return DocumentToEntityTransformer;\n}());\nexports.DocumentToEntityTransformer = DocumentToEntityTransformer;\n\n//# sourceMappingURL=DocumentToEntityTransformer.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/transformer/DocumentToEntityTransformer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Transforms raw document into entity object.\n * Entity is constructed based on its entity metadata.\n */\nvar DocumentToEntityTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function DocumentToEntityTransformer(// private selectionMap: AliasMap,\n    // private joinMappings: JoinMapping[],\n    // private relationCountMetas: RelationCountAttribute[],\n    enableRelationIdValues) {\n        if (enableRelationIdValues === void 0) { enableRelationIdValues = false; }\n        this.enableRelationIdValues = enableRelationIdValues;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    DocumentToEntityTransformer.prototype.transformAll = function (documents, metadata) {\n        var _this = this;\n        return documents.map(function (document) { return _this.transform(document, metadata); });\n    };\n    DocumentToEntityTransformer.prototype.transform = function (document, metadata) {\n        var entity = metadata.create();\n        var hasData = false;\n        // handle _id property the special way\n        if (metadata.objectIdColumn && document[metadata.objectIdColumn.databaseNameWithoutPrefixes]) {\n            // todo: we can't use driver in this class\n            // do we really need prepare hydrated value here? If no then no problem. If yes then think maybe prepareHydratedValue process should be extracted out of driver class?\n            // entity[metadata.objectIdColumn.propertyName] = this.driver.prepareHydratedValue(document[metadata.objectIdColumn.name\"], metadata.objectIdColumn);\n            entity[metadata.objectIdColumn.propertyName] = document[metadata.objectIdColumn.databaseNameWithoutPrefixes];\n            hasData = true;\n        }\n        // add special columns that contains relation ids\n        if (this.enableRelationIdValues) {\n            metadata.columns.filter(function (column) { return !!column.relationMetadata; }).forEach(function (column) {\n                var valueInObject = document[column.databaseNameWithoutPrefixes];\n                if (valueInObject !== undefined && valueInObject !== null && column.propertyName) {\n                    // todo: we can't use driver in this class\n                    // const value = this.driver.prepareHydratedValue(valueInObject, column);\n                    entity[column.propertyName] = valueInObject;\n                    hasData = true;\n                }\n            });\n        }\n        /*this.joinMappings\n            .filter(joinMapping => joinMapping.parentName === alias.name && !joinMapping.alias.relationOwnerSelection && joinMapping.alias.target)\n            .map(joinMapping => {\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, joinMapping.alias);\n                const isResultArray = joinMapping.isMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result && (!isResultArray || result.length > 0)) {\n                    entity[joinMapping.propertyName] = result;\n                    hasData = true;\n                }\n            });*/\n        // get value from columns selections and put them into object\n        metadata.ownColumns.forEach(function (column) {\n            var valueInObject = document[column.databaseNameWithoutPrefixes];\n            if (valueInObject !== undefined &&\n                valueInObject !== null &&\n                column.propertyName &&\n                !column.isVirtual) {\n                // const value = this.driver.prepareHydratedValue(valueInObject, column);\n                entity[column.propertyName] = valueInObject;\n                hasData = true;\n            }\n        });\n        var addEmbeddedValuesRecursively = function (entity, document, embeddeds) {\n            embeddeds.forEach(function (embedded) {\n                if (!document[embedded.prefix])\n                    return;\n                if (embedded.isArray) {\n                    entity[embedded.propertyName] = document[embedded.prefix].map(function (subValue) {\n                        var newItem = embedded.create();\n                        embedded.columns.forEach(function (column) {\n                            newItem[column.propertyName] = subValue[column.databaseNameWithoutPrefixes];\n                        });\n                        return newItem;\n                    });\n                }\n                else {\n                    embedded.columns.forEach(function (column) {\n                        var value = document[embedded.prefix][column.databaseNameWithoutPrefixes];\n                        if (!value)\n                            return;\n                        if (!entity[embedded.propertyName])\n                            entity[embedded.propertyName] = embedded.create();\n                        entity[embedded.propertyName][column.propertyName] = value;\n                    });\n                }\n                addEmbeddedValuesRecursively(entity[embedded.propertyName], document[embedded.prefix], embedded.embeddeds);\n            });\n        };\n        addEmbeddedValuesRecursively(entity, document, metadata.embeddeds);\n        // if relation is loaded then go into it recursively and transform its values too\n        /*metadata.relations.forEach(relation => {\n            const relationAlias = this.selectionMap.findSelectionByParent(alias.name, relation.propertyName);\n            if (relationAlias) {\n                const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"join\" && joinMapping.alias === relationAlias);\n                const relatedEntities = this.transformRawResultsGroup(rawSqlResults, relationAlias);\n                const isResultArray = relation.isManyToMany || relation.isOneToMany;\n                const result = !isResultArray ? relatedEntities[0] : relatedEntities;\n\n                if (result) {\n                    let propertyName = relation.propertyName;\n                    if (joinMapping) {\n                        propertyName = joinMapping.propertyName;\n                    }\n\n                    if (relation.isLazy) {\n                        entity[\"__\" + propertyName + \"__\"] = result;\n                    } else {\n                        entity[propertyName] = result;\n                    }\n\n                    if (!isResultArray || result.length > 0)\n                        hasData = true;\n                }\n            }\n\n            // if relation has id field then relation id/ids to that field.\n            if (relation.isManyToMany) {\n                if (relationAlias) {\n                    const ids: any[] = [];\n                    const joinMapping = this.joinMappings.find(joinMapping => joinMapping.type === \"relationId\" && joinMapping.alias === relationAlias);\n\n                    if (relation.idField || joinMapping) {\n                        const propertyName = joinMapping ? joinMapping.propertyName : relation.idField as string;\n                        const junctionMetadata = relation.junctionEntityMetadata;\n                        const columnName = relation.isOwning ? junctionMetadata.columns[1].name : junctionMetadata.columns[0].name;\n\n                        rawSqlResults.forEach(results => {\n                            if (relationAlias) {\n                                const resultsKey = relationAlias.name + \"_\" + columnName;\n                                const value = this.driver.prepareHydratedValue(results[resultsKey], relation.referencedColumn);\n                                if (value !== undefined && value !== null)\n                                    ids.push(value);\n                            }\n                        });\n\n                        if (ids && ids.length)\n                            entity[propertyName] = ids;\n                    }\n                }\n            } else if (relation.idField) {\n                const relationName = relation.name;\n                entity[relation.idField] = this.driver.prepareHydratedValue(rawSqlResults[0][alias.name + \"_\" + relationName], relation.referencedColumn);\n            }\n\n            // if relation counter\n            this.relationCountMetas.forEach(joinMeta => {\n                if (joinMeta.alias === relationAlias) {\n                    // console.log(\"relation count was found for relation: \", relation);\n                    // joinMeta.entity = entity;\n                    joinMeta.entities.push({ entity: entity, metadata: metadata });\n                    // console.log(joinMeta);\n                    // console.log(\"---------------------\");\n                }\n            });\n        });*/\n        return hasData ? entity : null;\n    };\n    return DocumentToEntityTransformer;\n}());\nexports.DocumentToEntityTransformer = DocumentToEntityTransformer;\n\n//# sourceMappingURL=DocumentToEntityTransformer.js.map\n"},"lineCount":172}},"hash":"4a6feda2b985f07ec8be6ded80b98c2c","cacheData":{"env":{}}}