{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../../error/TransactionAlreadyStartedError","loc":{"line":48,"column":47}},{"name":"../../error/TransactionNotStartedError","loc":{"line":49,"column":43}},{"name":"../../schema-builder/table/TableColumn","loc":{"line":50,"column":28}},{"name":"../../schema-builder/table/Table","loc":{"line":51,"column":22}},{"name":"../../schema-builder/table/TableForeignKey","loc":{"line":52,"column":32}},{"name":"../../schema-builder/table/TableIndex","loc":{"line":53,"column":27}},{"name":"../../error/QueryRunnerAlreadyReleasedError","loc":{"line":54,"column":48}},{"name":"./MssqlParameter","loc":{"line":55,"column":31}},{"name":"../../util/OrmUtils","loc":{"line":56,"column":25}},{"name":"../../error/QueryFailedError","loc":{"line":57,"column":33}},{"name":"../../schema-builder/table/TableUnique","loc":{"line":58,"column":28}},{"name":"../../schema-builder/table/TableCheck","loc":{"line":59,"column":27}},{"name":"../../query-runner/BaseQueryRunner","loc":{"line":60,"column":32}},{"name":"../../subscriber/Broadcaster","loc":{"line":61,"column":28}},{"name":"../../index","loc":{"line":62,"column":22}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TransactionAlreadyStartedError_1 = require(\"../../error/TransactionAlreadyStartedError\");\nvar TransactionNotStartedError_1 = require(\"../../error/TransactionNotStartedError\");\nvar TableColumn_1 = require(\"../../schema-builder/table/TableColumn\");\nvar Table_1 = require(\"../../schema-builder/table/Table\");\nvar TableForeignKey_1 = require(\"../../schema-builder/table/TableForeignKey\");\nvar TableIndex_1 = require(\"../../schema-builder/table/TableIndex\");\nvar QueryRunnerAlreadyReleasedError_1 = require(\"../../error/QueryRunnerAlreadyReleasedError\");\nvar MssqlParameter_1 = require(\"./MssqlParameter\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\nvar QueryFailedError_1 = require(\"../../error/QueryFailedError\");\nvar TableUnique_1 = require(\"../../schema-builder/table/TableUnique\");\nvar TableCheck_1 = require(\"../../schema-builder/table/TableCheck\");\nvar BaseQueryRunner_1 = require(\"../../query-runner/BaseQueryRunner\");\nvar Broadcaster_1 = require(\"../../subscriber/Broadcaster\");\nvar index_1 = require(\"../../index\");\n/**\n * Runs queries on a single SQL Server database connection.\n */\nvar SqlServerQueryRunner = /** @class */ (function (_super) {\n    __extends(SqlServerQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqlServerQueryRunner(driver, mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        var _this = _super.call(this) || this;\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Last executed query in a transaction.\n         * This is needed because in transaction mode mssql cannot execute parallel queries,\n         * that's why we store last executed query promise to wait it when we execute next query.\n         *\n         * @see https://github.com/patriksimek/node-mssql/issues/491\n         */\n        _this.queryResponsibilityChain = [];\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster_1.Broadcaster(_this);\n        _this.mode = mode;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    SqlServerQueryRunner.prototype.connect = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    SqlServerQueryRunner.prototype.release = function () {\n        this.isReleased = true;\n        return Promise.resolve();\n    };\n    /**\n     * Starts transaction.\n     */\n    SqlServerQueryRunner.prototype.startTransaction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isReleased)\n                    throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                if (this.isTransactionActive)\n                    throw new TransactionAlreadyStartedError_1.TransactionAlreadyStartedError();\n                return [2 /*return*/, new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {\n                        var _this = this;\n                        var pool;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    this.isTransactionActive = true;\n                                    return [4 /*yield*/, (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection())];\n                                case 1:\n                                    pool = _a.sent();\n                                    this.databaseConnection = pool.transaction();\n                                    this.databaseConnection.begin(function (err) {\n                                        if (err) {\n                                            _this.isTransactionActive = false;\n                                            return fail(err);\n                                        }\n                                        ok();\n                                        _this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n                                    });\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    SqlServerQueryRunner.prototype.commitTransaction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isReleased)\n                    throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                if (!this.isTransactionActive)\n                    throw new TransactionNotStartedError_1.TransactionNotStartedError();\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.databaseConnection.commit(function (err) {\n                            if (err)\n                                return fail(err);\n                            _this.isTransactionActive = false;\n                            _this.databaseConnection = null;\n                            ok();\n                            _this.connection.logger.logQuery(\"COMMIT\");\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    SqlServerQueryRunner.prototype.rollbackTransaction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isReleased)\n                    throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                if (!this.isTransactionActive)\n                    throw new TransactionNotStartedError_1.TransactionNotStartedError();\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.databaseConnection.rollback(function (err) {\n                            if (err)\n                                return fail(err);\n                            _this.isTransactionActive = false;\n                            _this.databaseConnection = null;\n                            ok();\n                            _this.connection.logger.logQuery(\"ROLLBACK\");\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Executes a given SQL query.\n     */\n    SqlServerQueryRunner.prototype.query = function (query, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isReleased)\n                            throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                        waitingPromise = new Promise(function (ok) { return waitingOkay = ok; });\n                        if (!this.queryResponsibilityChain.length) return [3 /*break*/, 2];\n                        otherWaitingPromises = this.queryResponsibilityChain.slice();\n                        this.queryResponsibilityChain.push(waitingPromise);\n                        return [4 /*yield*/, Promise.all(otherWaitingPromises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        promise = new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var pool, request_1, queryStartTime_1, err_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        _a.trys.push([0, 2, , 3]);\n                                        this.driver.connection.logger.logQuery(query, parameters, this);\n                                        return [4 /*yield*/, (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection())];\n                                    case 1:\n                                        pool = _a.sent();\n                                        request_1 = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                                        if (parameters && parameters.length) {\n                                            parameters.forEach(function (parameter, index) {\n                                                if (parameter instanceof MssqlParameter_1.MssqlParameter) {\n                                                    var mssqlParameter = _this.mssqlParameterToNativeParameter(parameter);\n                                                    if (mssqlParameter) {\n                                                        request_1.input(index, mssqlParameter, parameter.value);\n                                                    }\n                                                    else {\n                                                        request_1.input(index, parameter.value);\n                                                    }\n                                                }\n                                                else {\n                                                    request_1.input(index, parameter);\n                                                }\n                                            });\n                                        }\n                                        queryStartTime_1 = +new Date();\n                                        request_1.query(query, function (err, result) {\n                                            // log slow queries if maxQueryExecution time is set\n                                            var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                                            var queryEndTime = +new Date();\n                                            var queryExecutionTime = queryEndTime - queryStartTime_1;\n                                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                                                _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n                                            var resolveChain = function () {\n                                                if (promiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                                                if (waitingPromiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                                                waitingOkay();\n                                            };\n                                            var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n                                            var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n                                            if (err) {\n                                                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                                                resolveChain();\n                                                return fail(new QueryFailedError_1.QueryFailedError(query, parameters, err));\n                                            }\n                                            ok(result.recordset);\n                                            resolveChain();\n                                        });\n                                        return [3 /*break*/, 3];\n                                    case 2:\n                                        err_1 = _a.sent();\n                                        fail(err_1);\n                                        return [3 /*break*/, 3];\n                                    case 3: return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        // with this condition, Promise.all causes unexpected behavior.\n                        // if (this.isTransactionActive)\n                        this.queryResponsibilityChain.push(promise);\n                        return [2 /*return*/, promise];\n                }\n            });\n        });\n    };\n    /**\n     * Returns raw data stream.\n     */\n    SqlServerQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isReleased)\n                            throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                        waitingPromise = new Promise(function (ok) { return waitingOkay = ok; });\n                        if (!this.queryResponsibilityChain.length) return [3 /*break*/, 2];\n                        otherWaitingPromises = this.queryResponsibilityChain.slice();\n                        this.queryResponsibilityChain.push(waitingPromise);\n                        return [4 /*yield*/, Promise.all(otherWaitingPromises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        promise = new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var pool, request;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        this.driver.connection.logger.logQuery(query, parameters, this);\n                                        return [4 /*yield*/, (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection())];\n                                    case 1:\n                                        pool = _a.sent();\n                                        request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                                        request.stream = true;\n                                        if (parameters && parameters.length) {\n                                            parameters.forEach(function (parameter, index) {\n                                                if (parameter instanceof MssqlParameter_1.MssqlParameter) {\n                                                    request.input(index, _this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                                                }\n                                                else {\n                                                    request.input(index, parameter);\n                                                }\n                                            });\n                                        }\n                                        request.query(query, function (err, result) {\n                                            var resolveChain = function () {\n                                                if (promiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                                                if (waitingPromiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                                                waitingOkay();\n                                            };\n                                            var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n                                            var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n                                            if (err) {\n                                                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                                                resolveChain();\n                                                return fail(err);\n                                            }\n                                            ok(result.recordset);\n                                            resolveChain();\n                                        });\n                                        if (onEnd)\n                                            request.on(\"done\", onEnd);\n                                        if (onError)\n                                            request.on(\"error\", onError);\n                                        ok(request);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        if (this.isTransactionActive)\n                            this.queryResponsibilityChain.push(promise);\n                        return [2 /*return*/, promise];\n                }\n            });\n        });\n    };\n    /**\n     * Returns all available database names including system databases.\n     */\n    SqlServerQueryRunner.prototype.getDatabases = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"EXEC sp_databases\")];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.map(function (result) { return result[\"DATABASE_NAME\"]; })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    SqlServerQueryRunner.prototype.getSchemas = function (database) {\n        return __awaiter(this, void 0, void 0, function () {\n            var query, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        query = database ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"sys\\\".\\\"schema\\\"\" : \"SELECT * FROM \\\"sys\\\".\\\"schemas\\\"\";\n                        return [4 /*yield*/, this.query(query)];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.map(function (result) { return result[\"name\"]; })];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if database with the given name exist.\n     */\n    SqlServerQueryRunner.prototype.hasDatabase = function (database) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, dbId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT DB_ID('\" + database + \"') as \\\"db_id\\\"\")];\n                    case 1:\n                        result = _a.sent();\n                        dbId = result[0][\"db_id\"];\n                        return [2 /*return*/, !!dbId];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if schema with the given name exist.\n     */\n    SqlServerQueryRunner.prototype.hasSchema = function (schema) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, schemaId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT SCHEMA_ID('\" + schema + \"') as \\\"schema_id\\\"\")];\n                    case 1:\n                        result = _a.sent();\n                        schemaId = result[0][\"schema_id\"];\n                        return [2 /*return*/, !!schemaId];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    SqlServerQueryRunner.prototype.hasTable = function (tableOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var parsedTableName, schema, sql, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.tableName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if column exist in the table.\n     */\n    SqlServerQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var parsedTableName, schema, sql, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.tableName + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new database.\n     */\n    SqlServerQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifNotExist ? \"IF DB_ID('\" + database + \"') IS NULL CREATE DATABASE \\\"\" + database + \"\\\"\" : \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n                        down = \"DROP DATABASE \\\"\" + database + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops database.\n     */\n    SqlServerQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifExist ? \"IF DB_ID('\" + database + \"') IS NOT NULL DROP DATABASE \\\"\" + database + \"\\\"\" : \"DROP DATABASE \\\"\" + database + \"\\\"\";\n                        down = \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    SqlServerQueryRunner.prototype.createSchema = function (schemaPath, ifNotExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, upQuery, dbName, schema, currentDB, upQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(schemaPath.indexOf(\".\") === -1)) return [3 /*break*/, 1];\n                        upQuery = ifNotExist ? \"IF SCHEMA_ID('\" + schemaPath + \"') IS NULL BEGIN EXEC ('CREATE SCHEMA \\\"\" + schemaPath + \"\\\"') END\" : \"CREATE SCHEMA \\\"\" + schemaPath + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"DROP SCHEMA \\\"\" + schemaPath + \"\\\"\");\n                        return [3 /*break*/, 3];\n                    case 1:\n                        dbName = schemaPath.split(\".\")[0];\n                        schema = schemaPath.split(\".\")[1];\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDB = _a.sent();\n                        upQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        upQuery = ifNotExist ? \"IF SCHEMA_ID('\" + schema + \"') IS NULL BEGIN EXEC ('CREATE SCHEMA \\\"\" + schema + \"\\\"') END\" : \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"DROP SCHEMA \\\"\" + schema + \"\\\"\");\n                        upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    SqlServerQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, upQuery, dbName, schema, currentDB, upQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(schemaPath.indexOf(\".\") === -1)) return [3 /*break*/, 1];\n                        upQuery = ifExist ? \"IF SCHEMA_ID('\" + schemaPath + \"') IS NULL BEGIN EXEC ('DROP SCHEMA \\\"\" + schemaPath + \"\\\"') END\" : \"DROP SCHEMA \\\"\" + schemaPath + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"CREATE SCHEMA \\\"\" + schemaPath + \"\\\"\");\n                        return [3 /*break*/, 3];\n                    case 1:\n                        dbName = schemaPath.split(\".\")[0];\n                        schema = schemaPath.split(\".\")[1];\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDB = _a.sent();\n                        upQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        upQuery = ifExist ? \"IF SCHEMA_ID('\" + schema + \"') IS NULL BEGIN EXEC ('DROP SCHEMA \\\"\" + schema + \"\\\"') END\" : \"DROP SCHEMA \\\"\" + schema + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"CREATE SCHEMA \\\"\" + schema + \"\\\"\");\n                        upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new table.\n     */\n    SqlServerQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n        if (ifNotExist === void 0) { ifNotExist = false; }\n        if (createForeignKeys === void 0) { createForeignKeys = true; }\n        if (createIndices === void 0) { createIndices = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var isTableExist, upQueries, downQueries;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ifNotExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(table)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.createTableSql(table, createForeignKeys));\n                        downQueries.push(this.dropTableSql(table));\n                        // if createForeignKeys is true, we must drop created foreign keys in down query.\n                        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n                        if (createForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return downQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        if (createIndices) {\n                            table.indices.forEach(function (index) {\n                                // new index may be passed without name. In this case we generate index name manually.\n                                if (!index.name)\n                                    index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                                upQueries.push(_this.createIndexSql(table, index));\n                                downQueries.push(_this.dropIndexSql(table, index));\n                            });\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the table.\n     */\n    SqlServerQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {\n        if (dropForeignKeys === void 0) { dropForeignKeys = true; }\n        if (dropIndices === void 0) { dropIndices = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(tableOrName)];\n                    case 1:\n                        isTableExist = _b.sent();\n                        if (!isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _b.label = 2;\n                    case 2:\n                        createForeignKeys = dropForeignKeys;\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 3];\n                        _a = tableOrName;\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 4:\n                        _a = _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        table = _a;\n                        upQueries = [];\n                        downQueries = [];\n                        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n                        // to perform drop queries for foreign keys and indices.\n                        if (dropIndices) {\n                            table.indices.forEach(function (index) {\n                                upQueries.push(_this.dropIndexSql(table, index));\n                                downQueries.push(_this.createIndexSql(table, index));\n                            });\n                        }\n                        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n                        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n                        if (dropForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return upQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        upQueries.push(this.dropTableSql(table));\n                        downQueries.push(this.createTableSql(table, createForeignKeys));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 6:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames a table.\n     */\n    SqlServerQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var upQueries, downQueries, oldTable, _a, newTable, dbName, schemaName, oldTableName, splittedName, currentDB, columnNames, oldPkName, newPkName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(oldTableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = oldTableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(oldTableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        oldTable = _a;\n                        newTable = oldTable.clone();\n                        dbName = undefined;\n                        schemaName = undefined;\n                        oldTableName = oldTable.name;\n                        splittedName = oldTable.name.split(\".\");\n                        if (splittedName.length === 3) {\n                            dbName = splittedName[0];\n                            oldTableName = splittedName[2];\n                            if (splittedName[1] !== \"\")\n                                schemaName = splittedName[1];\n                        }\n                        else if (splittedName.length === 2) {\n                            schemaName = splittedName[0];\n                            oldTableName = splittedName[1];\n                        }\n                        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 4:\n                        currentDB = _b.sent();\n                        if (dbName && dbName !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        }\n                        // rename table\n                        upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(oldTable, true) + \"\\\", \\\"\" + newTableName + \"\\\"\");\n                        downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(newTable, true) + \"\\\", \\\"\" + oldTableName + \"\\\"\");\n                        // rename primary key constraint\n                        if (newTable.primaryColumns.length > 0) {\n                            columnNames = newTable.primaryColumns.map(function (column) { return column.name; });\n                            oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n                            newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n                            // rename primary constraint\n                            upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(newTable, true) + \".\" + oldPkName + \"\\\", \\\"\" + newPkName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(newTable, true) + \".\" + newPkName + \"\\\", \\\"\" + oldPkName + \"\\\"\");\n                        }\n                        // rename unique constraints\n                        newTable.uniques.forEach(function (unique) {\n                            // build new constraint name\n                            var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + unique.name + \"\\\", \\\"\" + newUniqueName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + newUniqueName + \"\\\", \\\"\" + unique.name + \"\\\"\");\n                            // replace constraint name\n                            unique.name = newUniqueName;\n                        });\n                        // rename index constraints\n                        newTable.indices.forEach(function (index) {\n                            // build new constraint name\n                            var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + index.name + \"\\\", \\\"\" + newIndexName + \"\\\", \\\"INDEX\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + newIndexName + \"\\\", \\\"\" + index.name + \"\\\", \\\"INDEX\\\"\");\n                            // replace constraint name\n                            index.name = newIndexName;\n                        });\n                        // rename foreign key constraints\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            // build new constraint name\n                            var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(foreignKey.name, schemaName, dbName) + \"\\\", \\\"\" + newForeignKeyName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(newForeignKeyName, schemaName, dbName) + \"\\\", \\\"\" + foreignKey.name + \"\\\"\");\n                            // replace constraint name\n                            foreignKey.name = newForeignKeyName;\n                        });\n                        // change currently used database back to default db.\n                        if (dbName && dbName !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 5:\n                        _b.sent();\n                        // rename old table and replace it in cached tabled;\n                        oldTable.name = newTable.name;\n                        this.replaceCachedTable(oldTable, newTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new column from the column in the table.\n     */\n    SqlServerQueryRunner.prototype.addColumn = function (tableOrName, column) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, upQueries, downQueries, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, uniqueConstraint, defaultName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD \" + this.buildCreateColumnSql(table, column, false, false));\n                        downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\");\n                        // create or update primary key constraint\n                        if (column.isPrimary) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if table already have primary key, me must drop it and recreate again\n                            if (primaryColumns.length > 0) {\n                                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames_1 = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\");\n                            }\n                            primaryColumns.push(column);\n                            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                            columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            upQueries.push(this.createIndexSql(table, columnIndex));\n                            downQueries.push(this.dropIndexSql(table, columnIndex));\n                        }\n                        // create unique constraint\n                        if (column.isUnique) {\n                            uniqueConstraint = new TableUnique_1.TableUnique({\n                                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                                columnNames: [column.name]\n                            });\n                            clonedTable.uniques.push(uniqueConstraint);\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + column.name + \"\\\")\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\");\n                        }\n                        // create default constraint\n                        if (column.default !== null && column.default !== undefined) {\n                            defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default + \" FOR \\\"\" + column.name + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.addColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    SqlServerQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, index_1.PromiseUtils.runInSequence(columns, function (column) { return _this.addColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames column in the given table.\n     */\n    SqlServerQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, oldColumn, newColumn;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        oldColumn = oldTableColumnOrName instanceof TableColumn_1.TableColumn ? oldTableColumnOrName : table.columns.find(function (c) { return c.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        newColumn = undefined;\n                        if (newTableColumnOrName instanceof TableColumn_1.TableColumn) {\n                            newColumn = newTableColumnOrName;\n                        }\n                        else {\n                            newColumn = oldColumn.clone();\n                            newColumn.name = newTableColumnOrName;\n                        }\n                        return [4 /*yield*/, this.changeColumn(table, oldColumn, newColumn)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    SqlServerQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var table, _a, clonedTable, upQueries, downQueries, oldColumn, dbName_1, schemaName_1, splittedName, currentDB, primaryColumns, columnNames, oldPkName, newPkName, oldTableColumn, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint, defaultName, defaultName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        oldColumn = oldTableColumnOrName instanceof TableColumn_1.TableColumn\n                            ? oldTableColumnOrName\n                            : table.columns.find(function (column) { return column.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        if (!((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length)) return [3 /*break*/, 6];\n                        // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n                        // Also, we recreate column if column type changed\n                        return [4 /*yield*/, this.dropColumn(table, oldColumn)];\n                    case 4:\n                        // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n                        // Also, we recreate column if column type changed\n                        _b.sent();\n                        return [4 /*yield*/, this.addColumn(table, newColumn)];\n                    case 5:\n                        _b.sent();\n                        // update cloned table\n                        clonedTable = table.clone();\n                        return [3 /*break*/, 10];\n                    case 6:\n                        if (!(newColumn.name !== oldColumn.name)) return [3 /*break*/, 8];\n                        dbName_1 = undefined;\n                        schemaName_1 = undefined;\n                        splittedName = table.name.split(\".\");\n                        if (splittedName.length === 3) {\n                            dbName_1 = splittedName[0];\n                            if (splittedName[1] !== \"\")\n                                schemaName_1 = splittedName[1];\n                        }\n                        else if (splittedName.length === 2) {\n                            schemaName_1 = splittedName[0];\n                        }\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 7:\n                        currentDB = _b.sent();\n                        if (dbName_1 && dbName_1 !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + dbName_1 + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        }\n                        // rename the column\n                        upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(table, true) + \".\" + oldColumn.name + \"\\\", \\\"\" + newColumn.name + \"\\\"\");\n                        downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(table, true) + \".\" + newColumn.name + \"\\\", \\\"\" + oldColumn.name + \"\\\"\");\n                        if (oldColumn.isPrimary === true) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            columnNames = primaryColumns.map(function (column) { return column.name; });\n                            oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                            // replace old column name with new column name\n                            columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                            columnNames.push(newColumn.name);\n                            newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                            // rename primary constraint\n                            upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(clonedTable, true) + \".\" + oldPkName + \"\\\", \\\"\" + newPkName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(clonedTable, true) + \".\" + newPkName + \"\\\", \\\"\" + oldPkName + \"\\\"\");\n                        }\n                        // rename index constraints\n                        clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n                            // build new constraint name\n                            index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                            index.columnNames.push(newColumn.name);\n                            var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + index.name + \"\\\", \\\"\" + newIndexName + \"\\\", \\\"INDEX\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + newIndexName + \"\\\", \\\"\" + index.name + \"\\\", \\\"INDEX\\\"\");\n                            // replace constraint name\n                            index.name = newIndexName;\n                        });\n                        // rename foreign key constraints\n                        clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n                            // build new constraint name\n                            foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                            foreignKey.columnNames.push(newColumn.name);\n                            var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(foreignKey.name, schemaName_1, dbName_1) + \"\\\", \\\"\" + newForeignKeyName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(newForeignKeyName, schemaName_1, dbName_1) + \"\\\", \\\"\" + foreignKey.name + \"\\\"\");\n                            // replace constraint name\n                            foreignKey.name = newForeignKeyName;\n                        });\n                        // rename check constraints\n                        clonedTable.findColumnChecks(oldColumn).forEach(function (check) {\n                            // build new constraint name\n                            check.columnNames.splice(check.columnNames.indexOf(oldColumn.name), 1);\n                            check.columnNames.push(newColumn.name);\n                            var newCheckName = _this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + check.name + \"\\\", \\\"\" + newCheckName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + newCheckName + \"\\\", \\\"\" + check.name + \"\\\"\");\n                            // replace constraint name\n                            check.name = newCheckName;\n                        });\n                        // rename unique constraints\n                        clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {\n                            // build new constraint name\n                            unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                            unique.columnNames.push(newColumn.name);\n                            var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + unique.name + \"\\\", \\\"\" + newUniqueName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + newUniqueName + \"\\\", \\\"\" + unique.name + \"\\\"\");\n                            // replace constraint name\n                            unique.name = newUniqueName;\n                        });\n                        // change currently used database back to default db.\n                        if (dbName_1 && dbName_1 !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + dbName_1 + \"\\\"\");\n                        }\n                        oldTableColumn = clonedTable.columns.find(function (column) { return column.name === oldColumn.name; });\n                        clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                        oldColumn.name = newColumn.name;\n                        _b.label = 8;\n                    case 8:\n                        if (this.isColumnChanged(oldColumn, newColumn)) {\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ALTER COLUMN \" + this.buildCreateColumnSql(table, newColumn, true, false));\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ALTER COLUMN \" + this.buildCreateColumnSql(table, oldColumn, true, false));\n                        }\n                        if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if primary column state changed, we must always drop existed constraint.\n                            if (primaryColumns.length > 0) {\n                                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                            }\n                            if (newColumn.isPrimary === true) {\n                                primaryColumns.push(newColumn);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = true;\n                                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                            }\n                            else {\n                                primaryColumn = primaryColumns.find(function (c) { return c.name === newColumn.name; });\n                                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = false;\n                                // if we have another primary keys, we must recreate constraint.\n                                if (primaryColumns.length > 0) {\n                                    pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                    columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                    upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                                    downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                                }\n                            }\n                        }\n                        if (newColumn.isUnique !== oldColumn.isUnique) {\n                            if (newColumn.isUnique === true) {\n                                uniqueConstraint = new TableUnique_1.TableUnique({\n                                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                                    columnNames: [newColumn.name]\n                                });\n                                clonedTable.uniques.push(uniqueConstraint);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\");\n                            }\n                            else {\n                                uniqueConstraint = clonedTable.uniques.find(function (unique) {\n                                    return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) { return columnName === newColumn.name; });\n                                });\n                                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\");\n                            }\n                        }\n                        if (newColumn.default !== oldColumn.default) {\n                            if (newColumn.default !== null && newColumn.default !== undefined) {\n                                defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + newColumn.default + \" FOR \\\"\" + newColumn.name + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                            }\n                            else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                                defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + oldColumn.default + \" FOR \\\"\" + oldColumn.name + \"\\\"\");\n                            }\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 9:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        _b.label = 10;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    SqlServerQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, index_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops column in the table.\n     */\n    SqlServerQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique, defaultName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        column = columnOrName instanceof TableColumn_1.TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        // drop primary key constraint\n                        if (column.isPrimary) {\n                            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) { return column.name; }));\n                            columnNames = clonedTable.primaryColumns.map(function (primaryColumn) { return \"\\\"\" + primaryColumn.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                            tableColumn = clonedTable.findColumnByName(column.name);\n                            tableColumn.isPrimary = false;\n                            // if primary key have multiple columns, we must recreate it without dropped column\n                            if (clonedTable.primaryColumns.length > 0) {\n                                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) { return column.name; }));\n                                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) { return \"\\\"\" + primaryColumn.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\");\n                            }\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n                            upQueries.push(this.dropIndexSql(table, columnIndex));\n                            downQueries.push(this.createIndexSql(table, columnIndex));\n                        }\n                        columnCheck = clonedTable.checks.find(function (check) { return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name; });\n                        if (columnCheck) {\n                            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n                            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n                            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n                        }\n                        columnUnique = clonedTable.uniques.find(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n                        if (columnUnique) {\n                            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n                            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n                            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n                        }\n                        // drop default constraint\n                        if (column.default !== null && column.default !== undefined) {\n                            defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default + \" FOR \\\"\" + column.name + \"\\\"\");\n                        }\n                        upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\");\n                        downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD \" + this.buildCreateColumnSql(table, column, false, false));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.removeColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the columns in the table.\n     */\n    SqlServerQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, index_1.PromiseUtils.runInSequence(columns, function (column) { return _this.dropColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new primary key.\n     */\n    SqlServerQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        up = this.createPrimaryKeySql(table, columnNames);\n                        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n                        clonedTable.columns.forEach(function (column) {\n                            if (columnNames.find(function (columnName) { return columnName === column.name; }))\n                                column.isPrimary = true;\n                        });\n                        down = this.dropPrimaryKeySql(clonedTable);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    SqlServerQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, columnNames, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        columnNames = columns.map(function (column) { return column.name; });\n                        upQueries = [];\n                        downQueries = [];\n                        primaryColumns = clonedTable.primaryColumns;\n                        if (primaryColumns.length > 0) {\n                            pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                            columnNamesString_1 = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\");\n                        }\n                        // update columns in table.\n                        clonedTable.columns\n                            .filter(function (column) { return columnNames.indexOf(column.name) !== -1; })\n                            .forEach(function (column) { return column.isPrimary = true; });\n                        pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n                        columnNamesString = columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                        upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n                        downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a primary key.\n     */\n    SqlServerQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        up = this.dropPrimaryKeySql(table);\n                        down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) { return column.name; }));\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.primaryColumns.forEach(function (column) {\n                            column.isPrimary = false;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraint.\n     */\n    SqlServerQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new unique constraint may be passed without name. In this case we generate unique name manually.\n                        if (!uniqueConstraint.name)\n                            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n                        up = this.createUniqueConstraintSql(table, uniqueConstraint);\n                        down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addUniqueConstraint(uniqueConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraints.\n     */\n    SqlServerQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = uniqueConstraints.map(function (uniqueConstraint) { return _this.createUniqueConstraint(tableOrName, uniqueConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops unique constraint.\n     */\n    SqlServerQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, uniqueConstraint, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        uniqueConstraint = uniqueOrName instanceof TableUnique_1.TableUnique ? uniqueOrName : table.uniques.find(function (u) { return u.name === uniqueOrName; });\n                        if (!uniqueConstraint)\n                            throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n                        up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n                        down = this.createUniqueConstraintSql(table, uniqueConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeUniqueConstraint(uniqueConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an unique constraints.\n     */\n    SqlServerQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = uniqueConstraints.map(function (uniqueConstraint) { return _this.dropUniqueConstraint(tableOrName, uniqueConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new check constraint.\n     */\n    SqlServerQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new unique constraint may be passed without name. In this case we generate unique name manually.\n                        if (!checkConstraint.name)\n                            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n                        up = this.createCheckConstraintSql(table, checkConstraint);\n                        down = this.dropCheckConstraintSql(table, checkConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addCheckConstraint(checkConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new check constraints.\n     */\n    SqlServerQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = checkConstraints.map(function (checkConstraint) { return _this.createCheckConstraint(tableOrName, checkConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraint.\n     */\n    SqlServerQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, checkConstraint, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        checkConstraint = checkOrName instanceof TableCheck_1.TableCheck ? checkOrName : table.checks.find(function (c) { return c.name === checkOrName; });\n                        if (!checkConstraint)\n                            throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n                        up = this.dropCheckConstraintSql(table, checkConstraint);\n                        down = this.createCheckConstraintSql(table, checkConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeCheckConstraint(checkConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraints.\n     */\n    SqlServerQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = checkConstraints.map(function (checkConstraint) { return _this.dropCheckConstraint(tableOrName, checkConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign key.\n     */\n    SqlServerQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new FK may be passed without name. In this case we generate FK name manually.\n                        if (!foreignKey.name)\n                            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\n                        up = this.createForeignKeySql(table, foreignKey);\n                        down = this.dropForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign keys.\n     */\n    SqlServerQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = foreignKeys.map(function (foreignKey) { return _this.createForeignKey(tableOrName, foreignKey); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign key from the table.\n     */\n    SqlServerQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, foreignKey, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        foreignKey = foreignKeyOrName instanceof TableForeignKey_1.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) { return fk.name === foreignKeyOrName; });\n                        if (!foreignKey)\n                            throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n                        up = this.dropForeignKeySql(table, foreignKey);\n                        down = this.createForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign keys from the table.\n     */\n    SqlServerQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = foreignKeys.map(function (foreignKey) { return _this.dropForeignKey(tableOrName, foreignKey); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new index.\n     */\n    SqlServerQueryRunner.prototype.createIndex = function (tableOrName, index) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new index may be passed without name. In this case we generate index name manually.\n                        if (!index.name)\n                            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                        up = this.createIndexSql(table, index);\n                        down = this.dropIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new indices\n     */\n    SqlServerQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.createIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an index.\n     */\n    SqlServerQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, index, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        index = indexOrName instanceof TableIndex_1.TableIndex ? indexOrName : table.indices.find(function (i) { return i.name === indexOrName; });\n                        if (!index)\n                            throw new Error(\"Supplied index was not found in table \" + table.name);\n                        up = this.dropIndexSql(table, index);\n                        down = this.createIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an indices from the table.\n     */\n    SqlServerQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.dropIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    SqlServerQueryRunner.prototype.clearTable = function (tablePath) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapeTableName(tablePath))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    SqlServerQueryRunner.prototype.clearDatabase = function (database) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var isDatabaseExist, allTablesSql, allTablesResults, error_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!database) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasDatabase(database)];\n                    case 1:\n                        isDatabaseExist = _a.sent();\n                        if (!isDatabaseExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, this.startTransaction()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 9, , 14]);\n                        allTablesSql = database\n                            ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_TYPE\\\" = 'BASE TABLE'\"\n                            : \"SELECT * FROM \\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_TYPE\\\" = 'BASE TABLE'\";\n                        return [4 /*yield*/, this.query(allTablesSql)];\n                    case 5:\n                        allTablesResults = _a.sent();\n                        return [4 /*yield*/, Promise.all(allTablesResults.map(function (tablesResult) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var dropForeignKeySql, dropFkQueries;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            dropForeignKeySql = \"SELECT 'ALTER TABLE \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"' + OBJECT_SCHEMA_NAME(\\\"fk\\\".\\\"parent_object_id\\\", DB_ID('\" + tablesResult[\"TABLE_CATALOG\"] + \"')) + '\\\".\\\"' + OBJECT_NAME(\\\"fk\\\".\\\"parent_object_id\\\", DB_ID('\" + tablesResult[\"TABLE_CATALOG\"] + \"')) + '\\\" \" +\n                                                (\"DROP CONSTRAINT \\\"' + \\\"fk\\\".\\\"name\\\" + '\\\"' as \\\"query\\\" FROM \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" AS \\\"fk\\\" \") +\n                                                (\"WHERE \\\"fk\\\".\\\"referenced_object_id\\\" = OBJECT_ID('\\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_NAME\"] + \"\\\"')\");\n                                            return [4 /*yield*/, this.query(dropForeignKeySql)];\n                                        case 1:\n                                            dropFkQueries = _a.sent();\n                                            return [2 /*return*/, Promise.all(dropFkQueries.map(function (result) { return result[\"query\"]; }).map(function (dropQuery) { return _this.query(dropQuery); }))];\n                                    }\n                                });\n                            }); }))];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, Promise.all(allTablesResults.map(function (tablesResult) {\n                                var dropTableSql = \"DROP TABLE \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_NAME\"] + \"\\\"\";\n                                return _this.query(dropTableSql);\n                            }))];\n                    case 7:\n                        _a.sent();\n                        return [4 /*yield*/, this.commitTransaction()];\n                    case 8:\n                        _a.sent();\n                        return [3 /*break*/, 14];\n                    case 9:\n                        error_1 = _a.sent();\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, this.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw error_1;\n                    case 14: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Return current database.\n     */\n    SqlServerQueryRunner.prototype.getCurrentDatabase = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentDBQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT DB_NAME() AS \\\"db_name\\\"\")];\n                    case 1:\n                        currentDBQuery = _a.sent();\n                        return [2 /*return*/, currentDBQuery[0][\"db_name\"]];\n                }\n            });\n        });\n    };\n    /**\n     * Return current schema.\n     */\n    SqlServerQueryRunner.prototype.getCurrentSchema = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentSchemaQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT SCHEMA_NAME() AS \\\"schema_name\\\"\")];\n                    case 1:\n                        currentSchemaQuery = _a.sent();\n                        return [2 /*return*/, currentSchemaQuery[0][\"schema_name\"]];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    SqlServerQueryRunner.prototype.loadTables = function (tableNames) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var schemaNames, currentSchema, currentDatabase, extractTableSchemaAndName, dbNames, schemaNamesString, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, foreignKeysSql, identityColumnsSql, dbCollationsSql, indicesSql, _a, dbTables, dbColumns, dbConstraints, dbForeignKeys, dbIdentityColumns, dbCollations, dbIndices;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        // if no tables given then no need to proceed\n                        if (!tableNames || !tableNames.length)\n                            return [2 /*return*/, []];\n                        schemaNames = [];\n                        return [4 /*yield*/, this.getCurrentSchema()];\n                    case 1:\n                        currentSchema = _b.sent();\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDatabase = _b.sent();\n                        extractTableSchemaAndName = function (tableName) {\n                            var _a = tableName.split(\".\"), database = _a[0], schema = _a[1], name = _a[2];\n                            // if name is empty, it means that tableName have only schema name and table name or only table name\n                            if (!name) {\n                                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                                if (!schema) {\n                                    name = database;\n                                    schema = _this.driver.options.schema || currentSchema;\n                                }\n                                else {\n                                    name = schema;\n                                    schema = database;\n                                }\n                            }\n                            else if (schema === \"\") {\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return [schema, name];\n                        };\n                        tableNames.filter(function (tablePath) { return tablePath.indexOf(\".\") !== -1; })\n                            .forEach(function (tablePath) {\n                            if (tablePath.split(\".\").length === 3) {\n                                if (tablePath.split(\".\")[1] !== \"\")\n                                    schemaNames.push(tablePath.split(\".\")[1]);\n                            }\n                            else {\n                                schemaNames.push(tablePath.split(\".\")[0]);\n                            }\n                        });\n                        schemaNames.push(this.driver.options.schema || currentSchema);\n                        dbNames = tableNames\n                            .filter(function (tablePath) { return tablePath.split(\".\").length === 3; })\n                            .map(function (tablePath) { return tablePath.split(\".\")[0]; });\n                        if (this.driver.database && !dbNames.find(function (dbName) { return dbName === _this.driver.database; }))\n                            dbNames.push(this.driver.database);\n                        schemaNamesString = schemaNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = extractTableSchemaAndName(tableName), schema = _a[0], name = _a[1];\n                            return \"(\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = extractTableSchemaAndName(tableName), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"SYS\\\".\\\"DATABASES\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];\n                    case 3:\n                        _a = _b.sent(), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbForeignKeys = _a[3], dbIdentityColumns = _a[4], dbCollations = _a[5], dbIndices = _a[6];\n                        // if tables were not found in the db, no need to proceed\n                        if (!dbTables.length)\n                            return [2 /*return*/, []];\n                        return [4 /*yield*/, Promise.all(dbTables.map(function (dbTable) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var table, db, schema, tableFullName, defaultCollation, tableUniqueConstraints, tableCheckConstraints, tableForeignKeyConstraints, tableIndexConstraints;\n                                return __generator(this, function (_a) {\n                                    table = new Table_1.Table();\n                                    db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n                                    schema = dbTable[\"TABLE_SCHEMA\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"TABLE_SCHEMA\"];\n                                    table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n                                    tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n                                    defaultCollation = dbCollations.find(function (dbCollation) { return dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"]; });\n                                    // create columns from the loaded columns\n                                    table.columns = dbColumns\n                                        .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName; })\n                                        .map(function (dbColumn) {\n                                        var columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                            return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                                                && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                                        });\n                                        var uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"; });\n                                        var isConstraintComposite = uniqueConstraint\n                                            ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\n                                                && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                                                && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]; })\n                                            : false;\n                                        var isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\"; });\n                                        var isGenerated = !!dbIdentityColumns.find(function (column) {\n                                            return _this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName\n                                                && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                                        });\n                                        var tableColumn = new TableColumn_1.TableColumn();\n                                        tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                                        tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                                        // check only columns that have length property\n                                        if (_this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                                            var length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                                            if (length === \"-1\") {\n                                                tableColumn.length = \"MAX\";\n                                            }\n                                            else {\n                                                tableColumn.length = !_this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                                            }\n                                        }\n                                        if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                                            if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                                                tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                                            if (dbColumn[\"NUMERIC_SCALE\"] !== null && !_this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                                                tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                                        }\n                                        tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                            ? _this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\n                                            : undefined;\n                                        tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                                        tableColumn.isPrimary = isPrimary;\n                                        tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                        tableColumn.isGenerated = isGenerated;\n                                        if (isGenerated)\n                                            tableColumn.generationStrategy = \"increment\";\n                                        if (tableColumn.default === \"newsequentialid()\") {\n                                            tableColumn.isGenerated = true;\n                                            tableColumn.generationStrategy = \"uuid\";\n                                            tableColumn.default = undefined;\n                                        }\n                                        // todo: unable to get default charset\n                                        // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n                                        if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                                            tableColumn.precision = !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                                        }\n                                        return tableColumn;\n                                    });\n                                    tableUniqueConstraints = OrmUtils_1.OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                        return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                                            && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                                    }), function (dbConstraint) { return dbConstraint[\"CONSTRAINT_NAME\"]; });\n                                    table.uniques = tableUniqueConstraints.map(function (constraint) {\n                                        var uniques = dbConstraints.filter(function (dbC) { return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]; });\n                                        return new TableUnique_1.TableUnique({\n                                            name: constraint[\"CONSTRAINT_NAME\"],\n                                            columnNames: uniques.map(function (u) { return u[\"COLUMN_NAME\"]; })\n                                        });\n                                    });\n                                    tableCheckConstraints = OrmUtils_1.OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                        return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                                            && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n                                    }), function (dbConstraint) { return dbConstraint[\"CONSTRAINT_NAME\"]; });\n                                    table.checks = tableCheckConstraints.map(function (constraint) {\n                                        var checks = dbConstraints.filter(function (dbC) { return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]; });\n                                        return new TableCheck_1.TableCheck({\n                                            name: constraint[\"CONSTRAINT_NAME\"],\n                                            columnNames: checks.map(function (c) { return c[\"COLUMN_NAME\"]; }),\n                                            expression: constraint[\"definition\"]\n                                        });\n                                    });\n                                    tableForeignKeyConstraints = OrmUtils_1.OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                                        return _this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n                                    }), function (dbForeignKey) { return dbForeignKey[\"FK_NAME\"]; });\n                                    table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                                        var foreignKeys = dbForeignKeys.filter(function (dbFk) { return dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]; });\n                                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                                        var db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                                        var schema = dbForeignKey[\"REF_SCHEMA\"] === currentSchema ? undefined : dbForeignKey[\"REF_SCHEMA\"];\n                                        var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n                                        return new TableForeignKey_1.TableForeignKey({\n                                            name: dbForeignKey[\"FK_NAME\"],\n                                            columnNames: foreignKeys.map(function (dbFk) { return dbFk[\"COLUMN_NAME\"]; }),\n                                            referencedTableName: referencedTableName,\n                                            referencedColumnNames: foreignKeys.map(function (dbFk) { return dbFk[\"REF_COLUMN\"]; }),\n                                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"),\n                                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n                                        });\n                                    });\n                                    tableIndexConstraints = OrmUtils_1.OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                                        return _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n                                    }), function (dbIndex) { return dbIndex[\"INDEX_NAME\"]; });\n                                    table.indices = tableIndexConstraints.map(function (constraint) {\n                                        var indices = dbIndices.filter(function (index) { return index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]; });\n                                        return new TableIndex_1.TableIndex({\n                                            table: table,\n                                            name: constraint[\"INDEX_NAME\"],\n                                            columnNames: indices.map(function (i) { return i[\"COLUMN_NAME\"]; }),\n                                            isUnique: constraint[\"IS_UNIQUE\"],\n                                            where: constraint[\"CONDITION\"]\n                                        });\n                                    });\n                                    return [2 /*return*/, table];\n                                });\n                            }); }))];\n                    case 4: \n                    // create table schemas for loaded tables\n                    return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Builds and returns SQL for create table.\n     */\n    SqlServerQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n        var _this = this;\n        var columnDefinitions = table.columns.map(function (column) { return _this.buildCreateColumnSql(table, column, false, true); }).join(\", \");\n        var sql = \"CREATE TABLE \" + this.escapeTableName(table) + \" (\" + columnDefinitions;\n        table.columns\n            .filter(function (column) { return column.isUnique; })\n            .forEach(function (column) {\n            var isUniqueExist = table.uniques.some(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n            if (!isUniqueExist)\n                table.uniques.push(new TableUnique_1.TableUnique({\n                    name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                    columnNames: [column.name]\n                }));\n        });\n        if (table.uniques.length > 0) {\n            var uniquesSql = table.uniques.map(function (unique) {\n                var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                var columnNames = unique.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n            }).join(\", \");\n            sql += \", \" + uniquesSql;\n        }\n        if (table.checks.length > 0) {\n            var checksSql = table.checks.map(function (check) {\n                var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n                return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n            }).join(\", \");\n            sql += \", \" + checksSql;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            var foreignKeysSql = table.foreignKeys.map(function (fk) {\n                var columnNames = fk.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                if (!fk.name)\n                    fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapeTableName(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\";\n                if (fk.onDelete)\n                    constraint += \" ON DELETE \" + fk.onDelete;\n                if (fk.onUpdate)\n                    constraint += \" ON UPDATE \" + fk.onUpdate;\n                return constraint;\n            }).join(\", \");\n            sql += \", \" + foreignKeysSql;\n        }\n        var primaryColumns = table.columns.filter(function (column) { return column.isPrimary; });\n        if (primaryColumns.length > 0) {\n            var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) { return column.name; }));\n            var columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n            sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n        }\n        sql += \")\";\n        return sql;\n    };\n    /**\n     * Builds drop table sql.\n     */\n    SqlServerQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {\n        return ifExist ? \"DROP TABLE IF EXISTS \" + this.escapeTableName(tableOrName) : \"DROP TABLE \" + this.escapeTableName(tableOrName);\n    };\n    /**\n     * Builds create index sql.\n     */\n    SqlServerQueryRunner.prototype.createIndexSql = function (table, index) {\n        var columns = index.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return \"CREATE \" + (index.isUnique ? \"UNIQUE \" : \"\") + \"INDEX \\\"\" + index.name + \"\\\" ON \" + this.escapeTableName(table) + \"(\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\");\n    };\n    /**\n     * Builds drop index sql.\n     */\n    SqlServerQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n        var indexName = indexOrName instanceof TableIndex_1.TableIndex ? indexOrName.name : indexOrName;\n        return \"DROP INDEX \\\"\" + indexName + \"\\\" ON \" + this.escapeTableName(table);\n    };\n    /**\n     * Builds create primary key sql.\n     */\n    SqlServerQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n        var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        var columnNamesString = columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\";\n    };\n    /**\n     * Builds drop primary key sql.\n     */\n    SqlServerQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n        var columnNames = table.primaryColumns.map(function (column) { return column.name; });\n        var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\";\n    };\n    /**\n     * Builds create unique constraint sql.\n     */\n    SqlServerQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {\n        var columnNames = uniqueConstraint.columnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\", \");\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\" + columnNames + \")\";\n    };\n    /**\n     * Builds drop unique constraint sql.\n     */\n    SqlServerQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {\n        var uniqueName = uniqueOrName instanceof TableUnique_1.TableUnique ? uniqueOrName.name : uniqueOrName;\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueName + \"\\\"\";\n    };\n    /**\n     * Builds create check constraint sql.\n     */\n    SqlServerQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\";\n    };\n    /**\n     * Builds drop check constraint sql.\n     */\n    SqlServerQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n        var checkName = checkOrName instanceof TableCheck_1.TableCheck ? checkOrName.name : checkOrName;\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\";\n    };\n    /**\n     * Builds create foreign key sql.\n     */\n    SqlServerQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n        var columnNames = foreignKey.columnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\", \");\n        var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\",\");\n        var sql = \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" +\n            (\"REFERENCES \" + this.escapeTableName(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n        if (foreignKey.onDelete)\n            sql += \" ON DELETE \" + foreignKey.onDelete;\n        if (foreignKey.onUpdate)\n            sql += \" ON UPDATE \" + foreignKey.onUpdate;\n        return sql;\n    };\n    /**\n     * Builds drop foreign key sql.\n     */\n    SqlServerQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n        var foreignKeyName = foreignKeyOrName instanceof TableForeignKey_1.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\";\n    };\n    /**\n     * Escapes given table name.\n     */\n    SqlServerQueryRunner.prototype.escapeTableName = function (tableOrName, disableEscape) {\n        var name = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;\n        if (this.driver.options.schema) {\n            if (name.indexOf(\".\") === -1) {\n                name = this.driver.options.schema + \".\" + name;\n            }\n            else if (name.split(\".\").length === 3) {\n                var splittedName = name.split(\".\");\n                var dbName = splittedName[0];\n                var tableName = splittedName[2];\n                name = dbName + \".\" + this.driver.options.schema + \".\" + tableName;\n            }\n        }\n        return name.split(\".\").map(function (i) {\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n        }).join(\".\");\n    };\n    SqlServerQueryRunner.prototype.parseTableName = function (target) {\n        var tableName = target instanceof Table_1.Table ? target.name : target;\n        if (tableName.split(\".\").length === 3) {\n            return {\n                database: tableName.split(\".\")[0],\n                schema: tableName.split(\".\")[1] === \"\" ? \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n                tableName: tableName.split(\".\")[2]\n            };\n        }\n        else if (tableName.split(\".\").length === 2) {\n            return {\n                database: this.driver.database,\n                schema: tableName.split(\".\")[0],\n                tableName: tableName.split(\".\")[1]\n            };\n        }\n        else {\n            return {\n                database: this.driver.database,\n                schema: this.driver.options.schema ? this.driver.options.schema : \"SCHEMA_NAME()\",\n                tableName: tableName\n            };\n        }\n    };\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    SqlServerQueryRunner.prototype.buildForeignKeyName = function (fkName, schemaName, dbName) {\n        var joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n        return joinedFkName;\n    };\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    SqlServerQueryRunner.prototype.removeParenthesisFromDefault = function (defaultValue) {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        var normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    };\n    /**\n     * Builds a query for create column.\n     */\n    SqlServerQueryRunner.prototype.buildCreateColumnSql = function (table, column, skipIdentity, createDefault) {\n        var c = \"\\\"\" + column.name + \"\\\" \" + this.connection.driver.createFullType(column);\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n        if (column.default !== undefined && column.default !== null && createDefault) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            var defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += \" CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default;\n        }\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            var defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += \" CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT NEWSEQUENTIALID()\";\n        }\n        return c;\n    };\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    SqlServerQueryRunner.prototype.mssqlParameterToNativeParameter = function (parameter) {\n        switch (this.driver.normalizeType({ type: parameter.type })) {\n            case \"bit\":\n                return this.driver.mssql.Bit;\n            case \"bigint\":\n                return this.driver.mssql.BigInt;\n            case \"decimal\":\n                return (_a = this.driver.mssql).Decimal.apply(_a, parameter.params);\n            case \"float\":\n                return this.driver.mssql.Float;\n            case \"int\":\n                return this.driver.mssql.Int;\n            case \"money\":\n                return this.driver.mssql.Money;\n            case \"numeric\":\n                return (_b = this.driver.mssql).Numeric.apply(_b, parameter.params);\n            case \"smallint\":\n                return this.driver.mssql.SmallInt;\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney;\n            case \"real\":\n                return this.driver.mssql.Real;\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt;\n            case \"char\":\n                return (_c = this.driver.mssql).Char.apply(_c, parameter.params);\n            case \"nchar\":\n                return (_d = this.driver.mssql).NChar.apply(_d, parameter.params);\n            case \"text\":\n                return this.driver.mssql.Text;\n            case \"ntext\":\n                return this.driver.mssql.Ntext;\n            case \"varchar\":\n                return (_e = this.driver.mssql).VarChar.apply(_e, parameter.params);\n            case \"nvarchar\":\n                return (_f = this.driver.mssql).NVarChar.apply(_f, parameter.params);\n            case \"xml\":\n                return this.driver.mssql.Xml;\n            case \"time\":\n                return (_g = this.driver.mssql).Time.apply(_g, parameter.params);\n            case \"date\":\n                return this.driver.mssql.Date;\n            case \"datetime\":\n                return this.driver.mssql.DateTime;\n            case \"datetime2\":\n                return (_h = this.driver.mssql).DateTime2.apply(_h, parameter.params);\n            case \"datetimeoffset\":\n                return (_j = this.driver.mssql).DateTimeOffset.apply(_j, parameter.params);\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime;\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier;\n            case \"variant\":\n                return this.driver.mssql.Variant;\n            case \"binary\":\n                return this.driver.mssql.Binary;\n            case \"varbinary\":\n                return (_k = this.driver.mssql).VarBinary.apply(_k, parameter.params);\n            case \"image\":\n                return this.driver.mssql.Image;\n            case \"udt\":\n                return this.driver.mssql.UDT;\n        }\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    };\n    return SqlServerQueryRunner;\n}(BaseQueryRunner_1.BaseQueryRunner));\nexports.SqlServerQueryRunner = SqlServerQueryRunner;\n\n//# sourceMappingURL=SqlServerQueryRunner.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":989,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":990,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":991,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":992,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":993,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":994,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":995,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":996,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":997,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":998,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":999,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1000,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1001,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1002,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1003,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1004,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1005,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1006,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1007,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1008,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1009,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1010,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1011,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1012,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1013,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1014,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1015,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1016,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1017,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1018,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1019,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1020,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1021,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1022,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1023,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1024,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1025,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1026,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1027,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1028,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1029,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1030,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1031,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1032,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1033,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1034,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1035,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1036,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1037,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1038,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1039,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1040,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1041,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1042,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1043,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1044,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1045,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1046,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1047,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1048,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1049,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1050,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1051,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1052,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1053,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1054,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1055,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1056,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1057,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1058,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1059,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1060,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1061,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1062,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1063,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1064,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1065,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1066,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1067,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1068,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1069,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1070,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1071,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1072,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1073,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1074,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1075,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1076,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1077,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1078,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1079,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1080,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1081,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1082,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1083,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1084,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1085,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1086,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1087,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1088,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1089,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1090,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1091,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1092,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1093,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1094,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1095,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1096,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1097,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1098,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1099,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1100,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1101,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1102,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1103,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1104,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1105,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1106,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1107,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1108,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1109,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1110,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1111,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1112,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1113,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1114,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1115,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1116,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1117,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1118,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1119,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1120,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1121,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1122,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1123,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1124,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1125,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1126,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1127,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1128,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1129,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1130,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1131,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1132,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1133,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1134,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1135,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1136,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1137,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1138,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1139,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1140,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1141,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1142,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1143,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1144,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1145,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1146,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1147,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1148,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1149,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1150,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1151,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1152,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1153,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1154,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1155,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1156,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1157,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1158,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1159,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1160,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1161,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1162,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1163,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1164,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1165,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1166,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1167,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1168,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1169,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1170,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1171,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1172,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1173,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1174,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1175,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1176,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1177,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1178,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1179,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1180,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1181,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1182,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1183,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1184,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1185,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1186,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1187,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1188,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1189,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1190,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1191,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1192,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1193,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1194,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1195,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1196,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1197,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1198,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1199,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1200,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1201,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1202,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1203,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1204,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1205,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1206,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1207,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1208,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1209,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1210,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1211,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1212,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1213,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1214,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1215,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1216,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1217,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1218,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1219,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1220,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1221,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1222,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1223,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1224,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1225,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1226,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1227,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1228,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1229,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1230,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1231,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1232,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1233,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1234,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1235,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1236,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1237,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1238,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1239,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1240,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1241,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1242,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1243,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1244,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1245,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1246,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1247,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1248,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1249,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1250,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1251,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1252,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1253,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1254,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1255,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1256,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1257,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1258,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1259,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1260,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1261,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1262,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1263,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1264,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1265,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1266,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1267,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1268,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1269,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1270,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1271,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1272,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1273,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1274,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1275,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1276,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1277,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1278,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1279,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1280,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1281,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1282,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1283,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1284,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1285,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1286,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1287,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1288,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1289,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1290,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1291,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1292,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1293,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1294,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1295,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1296,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1297,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1298,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1299,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1300,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1301,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1302,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1303,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1304,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1305,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1306,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1307,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1308,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1309,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1310,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1311,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1312,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1313,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1314,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1315,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1316,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1317,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1318,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1319,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1320,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1321,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1322,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1323,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1324,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1325,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1326,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1327,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1328,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1329,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1330,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1331,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1332,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1333,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1334,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1335,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1336,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1337,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1338,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1339,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1340,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1341,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1342,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1343,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1344,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1345,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1346,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1347,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1348,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1349,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1350,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1351,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1352,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1353,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1354,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1355,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1356,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1357,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1358,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1359,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1360,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1361,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1362,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1363,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1364,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1365,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1366,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1367,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1368,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1369,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1370,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1371,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1372,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1373,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1374,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1375,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1376,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1377,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1378,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1379,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1380,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1381,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1382,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1383,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1384,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1385,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1386,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1387,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1388,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1389,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1390,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1391,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1392,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1393,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1394,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1395,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1396,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1397,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1398,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1399,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1400,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1401,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1402,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1403,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1404,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1405,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1406,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1407,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1408,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1409,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1410,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1411,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1412,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1413,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1414,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1415,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1416,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1417,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1418,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1419,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1420,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1421,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1422,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1423,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1424,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1425,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1426,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1427,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1428,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1429,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1430,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1431,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1432,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1433,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1434,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1435,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1436,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1437,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1438,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1439,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1440,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1441,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1442,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1443,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1444,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1445,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1446,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1447,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1448,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1449,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1450,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1451,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1452,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1453,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1454,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1455,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1456,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1457,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1458,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1459,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1460,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1461,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1462,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1463,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1464,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1465,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1466,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1467,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1468,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1469,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1470,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1471,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1472,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1473,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1474,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1475,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1476,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1477,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1478,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1479,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1480,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1481,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1482,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1483,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1484,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1485,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1486,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1487,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1488,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1489,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1490,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1491,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1492,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1493,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1494,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1495,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1496,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1497,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1498,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1499,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1500,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1501,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1502,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1503,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1504,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1505,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1506,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1507,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1508,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1509,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1510,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1511,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1512,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1513,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1514,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1515,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1516,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1517,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1518,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1519,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1520,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1521,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1522,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1523,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1524,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1525,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1526,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1527,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1528,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1529,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1530,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1531,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1532,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1533,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1534,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1535,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1536,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1537,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1538,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1539,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1540,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1541,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1542,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1543,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1544,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1545,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1546,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1547,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1548,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1549,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1550,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1551,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1552,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1553,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1554,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1555,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1556,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1557,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1558,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1559,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1560,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1561,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1562,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1563,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1564,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1565,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1566,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1567,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1568,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1569,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1570,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1571,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1572,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1573,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1574,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1575,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1576,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1577,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1578,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1579,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1580,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1581,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1582,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1583,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1584,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1585,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1586,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1587,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1588,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1589,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1590,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1591,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1592,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1593,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1594,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1595,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1596,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1597,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1598,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1599,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1600,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1601,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1602,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1603,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1604,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1605,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1606,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1607,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1608,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1609,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1610,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1611,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1612,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1613,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1614,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1615,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1616,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1617,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1618,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1619,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1620,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1621,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1622,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1623,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1624,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1625,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1626,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1627,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1628,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1629,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1630,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1631,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1632,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1633,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1634,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1635,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1636,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1637,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1638,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1639,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1640,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1641,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1642,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1643,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1644,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1645,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1646,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1647,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1648,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1649,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1650,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1651,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1652,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1653,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1654,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1655,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1656,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1657,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1658,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1659,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1660,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1661,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1662,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1663,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1664,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1665,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1666,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1667,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1668,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1669,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1670,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1671,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1672,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1673,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1674,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1675,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1676,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1677,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1678,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1679,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1680,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1681,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1682,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1683,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1684,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1685,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1686,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1687,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1688,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1689,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1690,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1691,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1692,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1693,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1694,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1695,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1696,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1697,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1698,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1699,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1700,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1701,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1702,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1703,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1704,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1705,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1706,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1707,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1708,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1709,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1710,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1711,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1712,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1713,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1714,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1715,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1716,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1717,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1718,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1719,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1720,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1721,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1722,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1723,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1724,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1725,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1726,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1727,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1728,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1729,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1730,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1731,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1732,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1733,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1734,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1735,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1736,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1737,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1738,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1739,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1740,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1741,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1742,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1743,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1744,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1745,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1746,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1747,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1748,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1749,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1750,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1751,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1752,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1753,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1754,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1755,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1756,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1757,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1758,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1759,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1760,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1761,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1762,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1763,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1764,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1765,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1766,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1767,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1768,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1769,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1770,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1771,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1772,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1773,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1774,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1775,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1776,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1777,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1778,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1779,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1780,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1781,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1782,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1783,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1784,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1785,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1786,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1787,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1788,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1789,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1790,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1791,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1792,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1793,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1794,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1795,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1796,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1797,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1798,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1799,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1800,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1801,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1802,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1803,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1804,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1805,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1806,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1807,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1808,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1809,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1810,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1811,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1812,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1813,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1814,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1815,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1816,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1817,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1818,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1819,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1820,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1821,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1822,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1823,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1824,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1825,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1826,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1827,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1828,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1829,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1830,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1831,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1832,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1833,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1834,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1835,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1836,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1837,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1838,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1839,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1840,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1841,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1842,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1843,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1844,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1845,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1846,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1847,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1848,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1849,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1850,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1851,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1852,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1853,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1854,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1855,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1856,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1857,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1858,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1859,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1860,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1861,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1862,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1863,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1864,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1865,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1866,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1867,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1868,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1869,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1870,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1871,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1872,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1873,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1874,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1875,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1876,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1877,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1878,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1879,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1880,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1881,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1882,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1883,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1884,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1885,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1886,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1887,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1888,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1889,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1890,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1891,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1892,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1893,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1894,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1895,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1896,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1897,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1898,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1899,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1900,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1901,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1902,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1903,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1904,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1905,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1906,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1907,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1908,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1909,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1910,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1911,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1912,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1913,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1914,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1915,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1916,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1917,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1918,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1919,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1920,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1921,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1922,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1923,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1924,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1925,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1926,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1927,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1928,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1929,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1930,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1931,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1932,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1933,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1934,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1935,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1936,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1937,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1938,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1939,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1940,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1941,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1942,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1943,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1944,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1945,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1946,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1947,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1948,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1949,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1950,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1951,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1952,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1953,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1954,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1955,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1956,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1957,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1958,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1959,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1960,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1961,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1962,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1963,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1964,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1965,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1966,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1967,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1968,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1969,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1970,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1971,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1972,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1973,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1974,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1975,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1976,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1977,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1978,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1979,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1980,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1981,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1982,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1983,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1984,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1985,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1986,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1987,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1988,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1989,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1990,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1991,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1992,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1993,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1994,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1995,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1996,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1997,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1998,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":1999,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2000,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2001,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2002,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2003,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2004,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2005,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2006,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2007,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2008,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2009,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2010,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2011,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2012,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2013,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2014,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2015,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2016,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2017,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2018,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2019,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2020,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2021,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2022,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2023,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2024,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2025,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2026,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2027,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2028,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2029,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2030,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2031,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2032,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2033,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2034,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2035,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2036,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2037,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2038,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2039,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2040,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2041,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2042,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2043,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2044,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2045,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2046,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2047,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2048,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2049,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2050,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2051,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2052,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2053,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2054,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2055,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2056,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2057,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2058,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2059,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2060,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2061,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2062,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2063,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2064,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2065,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2066,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2067,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2068,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2069,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2070,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2071,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2072,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2073,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2074,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2075,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2076,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2077,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2078,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2079,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2080,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2081,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2082,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2083,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2084,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2085,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2086,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2087,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2088,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2089,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2090,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2091,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2092,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2093,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2094,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2095,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2096,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2097,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2098,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2099,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2100,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2101,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2102,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2103,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2104,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2105,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2106,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2107,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2108,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2109,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2110,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2111,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2112,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2113,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2114,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2115,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2116,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2117,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2118,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2119,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2120,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2121,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2122,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2123,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2124,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2125,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2126,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2127,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2128,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2129,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2130,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2131,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2132,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2133,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2134,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2135,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2136,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2137,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2138,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2139,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2140,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2141,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2142,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2143,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2144,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2145,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2146,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2147,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2148,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2149,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2150,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2151,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2152,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2153,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2154,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2155,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2156,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2157,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2158,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2159,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2160,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2161,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2162,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2163,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2164,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2165,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2166,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2167,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2168,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2169,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2170,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2171,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2172,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2173,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2174,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2175,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2176,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2177,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2178,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2179,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2180,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2181,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2182,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2183,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2184,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2185,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2186,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2187,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2188,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2189,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2190,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2191,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2192,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2193,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2194,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2195,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2196,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2197,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2198,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2199,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2200,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2201,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2202,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2203,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2204,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2205,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2206,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2207,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2208,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2209,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2210,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2211,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2212,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2213,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2214,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2215,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2216,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2217,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2218,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2219,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2220,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2221,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2222,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2223,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2224,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2225,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2226,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2227,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2228,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2229,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2230,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2231,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2232,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2233,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2234,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2235,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2236,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2237,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2238,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2239,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2240,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2241,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2242,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2243,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2244,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2245,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2246,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2247,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2248,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2249,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2250,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2251,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2252,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2253,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2254,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2255,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2256,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2257,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2258,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2259,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2260,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2261,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2262,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2263,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2264,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2265,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2266,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2267,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2268,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2269,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2270,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2271,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2272,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2273,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2274,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2275,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2276,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2277,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2278,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2279,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2280,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2281,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2282,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2283,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2284,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2285,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2286,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2287,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2288,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2289,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2290,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2291,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2292,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2293,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2294,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2295,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2296,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2297,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2298,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2299,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2300,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2301,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2302,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2303,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2304,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2305,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2306,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2307,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2308,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2309,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2310,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2311,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2312,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2313,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2314,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2315,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2316,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2317,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2318,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2319,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2320,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2321,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2322,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2323,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2324,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2325,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2326,"column":0},"generated":{"line":2326,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2327,"column":0},"generated":{"line":2327,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2328,"column":0},"generated":{"line":2328,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2329,"column":0},"generated":{"line":2329,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2330,"column":0},"generated":{"line":2330,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2331,"column":0},"generated":{"line":2331,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2332,"column":0},"generated":{"line":2332,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2333,"column":0},"generated":{"line":2333,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2334,"column":0},"generated":{"line":2334,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2335,"column":0},"generated":{"line":2335,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2336,"column":0},"generated":{"line":2336,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2337,"column":0},"generated":{"line":2337,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2338,"column":0},"generated":{"line":2338,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2339,"column":0},"generated":{"line":2339,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2340,"column":0},"generated":{"line":2340,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2341,"column":0},"generated":{"line":2341,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2342,"column":0},"generated":{"line":2342,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2343,"column":0},"generated":{"line":2343,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2344,"column":0},"generated":{"line":2344,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2345,"column":0},"generated":{"line":2345,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2346,"column":0},"generated":{"line":2346,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2347,"column":0},"generated":{"line":2347,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2348,"column":0},"generated":{"line":2348,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2349,"column":0},"generated":{"line":2349,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2350,"column":0},"generated":{"line":2350,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2351,"column":0},"generated":{"line":2351,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2352,"column":0},"generated":{"line":2352,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2353,"column":0},"generated":{"line":2353,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2354,"column":0},"generated":{"line":2354,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2355,"column":0},"generated":{"line":2355,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2356,"column":0},"generated":{"line":2356,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2357,"column":0},"generated":{"line":2357,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2358,"column":0},"generated":{"line":2358,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2359,"column":0},"generated":{"line":2359,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2360,"column":0},"generated":{"line":2360,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2361,"column":0},"generated":{"line":2361,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2362,"column":0},"generated":{"line":2362,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2363,"column":0},"generated":{"line":2363,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2364,"column":0},"generated":{"line":2364,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2365,"column":0},"generated":{"line":2365,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2366,"column":0},"generated":{"line":2366,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2367,"column":0},"generated":{"line":2367,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2368,"column":0},"generated":{"line":2368,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2369,"column":0},"generated":{"line":2369,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2370,"column":0},"generated":{"line":2370,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2371,"column":0},"generated":{"line":2371,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2372,"column":0},"generated":{"line":2372,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2373,"column":0},"generated":{"line":2373,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2374,"column":0},"generated":{"line":2374,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2375,"column":0},"generated":{"line":2375,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2376,"column":0},"generated":{"line":2376,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2377,"column":0},"generated":{"line":2377,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2378,"column":0},"generated":{"line":2378,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2379,"column":0},"generated":{"line":2379,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2380,"column":0},"generated":{"line":2380,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2381,"column":0},"generated":{"line":2381,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2382,"column":0},"generated":{"line":2382,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2383,"column":0},"generated":{"line":2383,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2384,"column":0},"generated":{"line":2384,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2385,"column":0},"generated":{"line":2385,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2386,"column":0},"generated":{"line":2386,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2387,"column":0},"generated":{"line":2387,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2388,"column":0},"generated":{"line":2388,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2389,"column":0},"generated":{"line":2389,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2390,"column":0},"generated":{"line":2390,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2391,"column":0},"generated":{"line":2391,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2392,"column":0},"generated":{"line":2392,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2393,"column":0},"generated":{"line":2393,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2394,"column":0},"generated":{"line":2394,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2395,"column":0},"generated":{"line":2395,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2396,"column":0},"generated":{"line":2396,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2397,"column":0},"generated":{"line":2397,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2398,"column":0},"generated":{"line":2398,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2399,"column":0},"generated":{"line":2399,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2400,"column":0},"generated":{"line":2400,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2401,"column":0},"generated":{"line":2401,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2402,"column":0},"generated":{"line":2402,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2403,"column":0},"generated":{"line":2403,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2404,"column":0},"generated":{"line":2404,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2405,"column":0},"generated":{"line":2405,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2406,"column":0},"generated":{"line":2406,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2407,"column":0},"generated":{"line":2407,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2408,"column":0},"generated":{"line":2408,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2409,"column":0},"generated":{"line":2409,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2410,"column":0},"generated":{"line":2410,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2411,"column":0},"generated":{"line":2411,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2412,"column":0},"generated":{"line":2412,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2413,"column":0},"generated":{"line":2413,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2414,"column":0},"generated":{"line":2414,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2415,"column":0},"generated":{"line":2415,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2416,"column":0},"generated":{"line":2416,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2417,"column":0},"generated":{"line":2417,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2418,"column":0},"generated":{"line":2418,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2419,"column":0},"generated":{"line":2419,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2420,"column":0},"generated":{"line":2420,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2421,"column":0},"generated":{"line":2421,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2422,"column":0},"generated":{"line":2422,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2423,"column":0},"generated":{"line":2423,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2424,"column":0},"generated":{"line":2424,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2425,"column":0},"generated":{"line":2425,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2426,"column":0},"generated":{"line":2426,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2427,"column":0},"generated":{"line":2427,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2428,"column":0},"generated":{"line":2428,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2429,"column":0},"generated":{"line":2429,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2430,"column":0},"generated":{"line":2430,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2431,"column":0},"generated":{"line":2431,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2432,"column":0},"generated":{"line":2432,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2433,"column":0},"generated":{"line":2433,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2434,"column":0},"generated":{"line":2434,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2435,"column":0},"generated":{"line":2435,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2436,"column":0},"generated":{"line":2436,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2437,"column":0},"generated":{"line":2437,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2438,"column":0},"generated":{"line":2438,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2439,"column":0},"generated":{"line":2439,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2440,"column":0},"generated":{"line":2440,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2441,"column":0},"generated":{"line":2441,"column":0}},{"source":"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js","original":{"line":2442,"column":0},"generated":{"line":2442,"column":0}}],"sources":{"../node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TransactionAlreadyStartedError_1 = require(\"../../error/TransactionAlreadyStartedError\");\nvar TransactionNotStartedError_1 = require(\"../../error/TransactionNotStartedError\");\nvar TableColumn_1 = require(\"../../schema-builder/table/TableColumn\");\nvar Table_1 = require(\"../../schema-builder/table/Table\");\nvar TableForeignKey_1 = require(\"../../schema-builder/table/TableForeignKey\");\nvar TableIndex_1 = require(\"../../schema-builder/table/TableIndex\");\nvar QueryRunnerAlreadyReleasedError_1 = require(\"../../error/QueryRunnerAlreadyReleasedError\");\nvar MssqlParameter_1 = require(\"./MssqlParameter\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\nvar QueryFailedError_1 = require(\"../../error/QueryFailedError\");\nvar TableUnique_1 = require(\"../../schema-builder/table/TableUnique\");\nvar TableCheck_1 = require(\"../../schema-builder/table/TableCheck\");\nvar BaseQueryRunner_1 = require(\"../../query-runner/BaseQueryRunner\");\nvar Broadcaster_1 = require(\"../../subscriber/Broadcaster\");\nvar index_1 = require(\"../../index\");\n/**\n * Runs queries on a single SQL Server database connection.\n */\nvar SqlServerQueryRunner = /** @class */ (function (_super) {\n    __extends(SqlServerQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqlServerQueryRunner(driver, mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        var _this = _super.call(this) || this;\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Last executed query in a transaction.\n         * This is needed because in transaction mode mssql cannot execute parallel queries,\n         * that's why we store last executed query promise to wait it when we execute next query.\n         *\n         * @see https://github.com/patriksimek/node-mssql/issues/491\n         */\n        _this.queryResponsibilityChain = [];\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster_1.Broadcaster(_this);\n        _this.mode = mode;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    SqlServerQueryRunner.prototype.connect = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    SqlServerQueryRunner.prototype.release = function () {\n        this.isReleased = true;\n        return Promise.resolve();\n    };\n    /**\n     * Starts transaction.\n     */\n    SqlServerQueryRunner.prototype.startTransaction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isReleased)\n                    throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                if (this.isTransactionActive)\n                    throw new TransactionAlreadyStartedError_1.TransactionAlreadyStartedError();\n                return [2 /*return*/, new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {\n                        var _this = this;\n                        var pool;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    this.isTransactionActive = true;\n                                    return [4 /*yield*/, (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection())];\n                                case 1:\n                                    pool = _a.sent();\n                                    this.databaseConnection = pool.transaction();\n                                    this.databaseConnection.begin(function (err) {\n                                        if (err) {\n                                            _this.isTransactionActive = false;\n                                            return fail(err);\n                                        }\n                                        ok();\n                                        _this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n                                    });\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    SqlServerQueryRunner.prototype.commitTransaction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isReleased)\n                    throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                if (!this.isTransactionActive)\n                    throw new TransactionNotStartedError_1.TransactionNotStartedError();\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.databaseConnection.commit(function (err) {\n                            if (err)\n                                return fail(err);\n                            _this.isTransactionActive = false;\n                            _this.databaseConnection = null;\n                            ok();\n                            _this.connection.logger.logQuery(\"COMMIT\");\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    SqlServerQueryRunner.prototype.rollbackTransaction = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.isReleased)\n                    throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                if (!this.isTransactionActive)\n                    throw new TransactionNotStartedError_1.TransactionNotStartedError();\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.databaseConnection.rollback(function (err) {\n                            if (err)\n                                return fail(err);\n                            _this.isTransactionActive = false;\n                            _this.databaseConnection = null;\n                            ok();\n                            _this.connection.logger.logQuery(\"ROLLBACK\");\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Executes a given SQL query.\n     */\n    SqlServerQueryRunner.prototype.query = function (query, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isReleased)\n                            throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                        waitingPromise = new Promise(function (ok) { return waitingOkay = ok; });\n                        if (!this.queryResponsibilityChain.length) return [3 /*break*/, 2];\n                        otherWaitingPromises = this.queryResponsibilityChain.slice();\n                        this.queryResponsibilityChain.push(waitingPromise);\n                        return [4 /*yield*/, Promise.all(otherWaitingPromises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        promise = new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var pool, request_1, queryStartTime_1, err_1;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        _a.trys.push([0, 2, , 3]);\n                                        this.driver.connection.logger.logQuery(query, parameters, this);\n                                        return [4 /*yield*/, (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection())];\n                                    case 1:\n                                        pool = _a.sent();\n                                        request_1 = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                                        if (parameters && parameters.length) {\n                                            parameters.forEach(function (parameter, index) {\n                                                if (parameter instanceof MssqlParameter_1.MssqlParameter) {\n                                                    var mssqlParameter = _this.mssqlParameterToNativeParameter(parameter);\n                                                    if (mssqlParameter) {\n                                                        request_1.input(index, mssqlParameter, parameter.value);\n                                                    }\n                                                    else {\n                                                        request_1.input(index, parameter.value);\n                                                    }\n                                                }\n                                                else {\n                                                    request_1.input(index, parameter);\n                                                }\n                                            });\n                                        }\n                                        queryStartTime_1 = +new Date();\n                                        request_1.query(query, function (err, result) {\n                                            // log slow queries if maxQueryExecution time is set\n                                            var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                                            var queryEndTime = +new Date();\n                                            var queryExecutionTime = queryEndTime - queryStartTime_1;\n                                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                                                _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n                                            var resolveChain = function () {\n                                                if (promiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                                                if (waitingPromiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                                                waitingOkay();\n                                            };\n                                            var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n                                            var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n                                            if (err) {\n                                                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                                                resolveChain();\n                                                return fail(new QueryFailedError_1.QueryFailedError(query, parameters, err));\n                                            }\n                                            ok(result.recordset);\n                                            resolveChain();\n                                        });\n                                        return [3 /*break*/, 3];\n                                    case 2:\n                                        err_1 = _a.sent();\n                                        fail(err_1);\n                                        return [3 /*break*/, 3];\n                                    case 3: return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        // with this condition, Promise.all causes unexpected behavior.\n                        // if (this.isTransactionActive)\n                        this.queryResponsibilityChain.push(promise);\n                        return [2 /*return*/, promise];\n                }\n            });\n        });\n    };\n    /**\n     * Returns raw data stream.\n     */\n    SqlServerQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isReleased)\n                            throw new QueryRunnerAlreadyReleasedError_1.QueryRunnerAlreadyReleasedError();\n                        waitingPromise = new Promise(function (ok) { return waitingOkay = ok; });\n                        if (!this.queryResponsibilityChain.length) return [3 /*break*/, 2];\n                        otherWaitingPromises = this.queryResponsibilityChain.slice();\n                        this.queryResponsibilityChain.push(waitingPromise);\n                        return [4 /*yield*/, Promise.all(otherWaitingPromises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        promise = new Promise(function (ok, fail) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var pool, request;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        this.driver.connection.logger.logQuery(query, parameters, this);\n                                        return [4 /*yield*/, (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection())];\n                                    case 1:\n                                        pool = _a.sent();\n                                        request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                                        request.stream = true;\n                                        if (parameters && parameters.length) {\n                                            parameters.forEach(function (parameter, index) {\n                                                if (parameter instanceof MssqlParameter_1.MssqlParameter) {\n                                                    request.input(index, _this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                                                }\n                                                else {\n                                                    request.input(index, parameter);\n                                                }\n                                            });\n                                        }\n                                        request.query(query, function (err, result) {\n                                            var resolveChain = function () {\n                                                if (promiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                                                if (waitingPromiseIndex !== -1)\n                                                    _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                                                waitingOkay();\n                                            };\n                                            var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n                                            var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n                                            if (err) {\n                                                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                                                resolveChain();\n                                                return fail(err);\n                                            }\n                                            ok(result.recordset);\n                                            resolveChain();\n                                        });\n                                        if (onEnd)\n                                            request.on(\"done\", onEnd);\n                                        if (onError)\n                                            request.on(\"error\", onError);\n                                        ok(request);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        if (this.isTransactionActive)\n                            this.queryResponsibilityChain.push(promise);\n                        return [2 /*return*/, promise];\n                }\n            });\n        });\n    };\n    /**\n     * Returns all available database names including system databases.\n     */\n    SqlServerQueryRunner.prototype.getDatabases = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"EXEC sp_databases\")];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.map(function (result) { return result[\"DATABASE_NAME\"]; })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    SqlServerQueryRunner.prototype.getSchemas = function (database) {\n        return __awaiter(this, void 0, void 0, function () {\n            var query, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        query = database ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"sys\\\".\\\"schema\\\"\" : \"SELECT * FROM \\\"sys\\\".\\\"schemas\\\"\";\n                        return [4 /*yield*/, this.query(query)];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.map(function (result) { return result[\"name\"]; })];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if database with the given name exist.\n     */\n    SqlServerQueryRunner.prototype.hasDatabase = function (database) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, dbId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT DB_ID('\" + database + \"') as \\\"db_id\\\"\")];\n                    case 1:\n                        result = _a.sent();\n                        dbId = result[0][\"db_id\"];\n                        return [2 /*return*/, !!dbId];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if schema with the given name exist.\n     */\n    SqlServerQueryRunner.prototype.hasSchema = function (schema) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, schemaId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT SCHEMA_ID('\" + schema + \"') as \\\"schema_id\\\"\")];\n                    case 1:\n                        result = _a.sent();\n                        schemaId = result[0][\"schema_id\"];\n                        return [2 /*return*/, !!schemaId];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    SqlServerQueryRunner.prototype.hasTable = function (tableOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var parsedTableName, schema, sql, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.tableName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if column exist in the table.\n     */\n    SqlServerQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var parsedTableName, schema, sql, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n                        sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.tableName + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new database.\n     */\n    SqlServerQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifNotExist ? \"IF DB_ID('\" + database + \"') IS NULL CREATE DATABASE \\\"\" + database + \"\\\"\" : \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n                        down = \"DROP DATABASE \\\"\" + database + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops database.\n     */\n    SqlServerQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifExist ? \"IF DB_ID('\" + database + \"') IS NOT NULL DROP DATABASE \\\"\" + database + \"\\\"\" : \"DROP DATABASE \\\"\" + database + \"\\\"\";\n                        down = \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    SqlServerQueryRunner.prototype.createSchema = function (schemaPath, ifNotExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, upQuery, dbName, schema, currentDB, upQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(schemaPath.indexOf(\".\") === -1)) return [3 /*break*/, 1];\n                        upQuery = ifNotExist ? \"IF SCHEMA_ID('\" + schemaPath + \"') IS NULL BEGIN EXEC ('CREATE SCHEMA \\\"\" + schemaPath + \"\\\"') END\" : \"CREATE SCHEMA \\\"\" + schemaPath + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"DROP SCHEMA \\\"\" + schemaPath + \"\\\"\");\n                        return [3 /*break*/, 3];\n                    case 1:\n                        dbName = schemaPath.split(\".\")[0];\n                        schema = schemaPath.split(\".\")[1];\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDB = _a.sent();\n                        upQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        upQuery = ifNotExist ? \"IF SCHEMA_ID('\" + schema + \"') IS NULL BEGIN EXEC ('CREATE SCHEMA \\\"\" + schema + \"\\\"') END\" : \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"DROP SCHEMA \\\"\" + schema + \"\\\"\");\n                        upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    SqlServerQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {\n        return __awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, upQuery, dbName, schema, currentDB, upQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(schemaPath.indexOf(\".\") === -1)) return [3 /*break*/, 1];\n                        upQuery = ifExist ? \"IF SCHEMA_ID('\" + schemaPath + \"') IS NULL BEGIN EXEC ('DROP SCHEMA \\\"\" + schemaPath + \"\\\"') END\" : \"DROP SCHEMA \\\"\" + schemaPath + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"CREATE SCHEMA \\\"\" + schemaPath + \"\\\"\");\n                        return [3 /*break*/, 3];\n                    case 1:\n                        dbName = schemaPath.split(\".\")[0];\n                        schema = schemaPath.split(\".\")[1];\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDB = _a.sent();\n                        upQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        upQuery = ifExist ? \"IF SCHEMA_ID('\" + schema + \"') IS NULL BEGIN EXEC ('DROP SCHEMA \\\"\" + schema + \"\\\"') END\" : \"DROP SCHEMA \\\"\" + schema + \"\\\"\";\n                        upQueries.push(upQuery);\n                        downQueries.push(\"CREATE SCHEMA \\\"\" + schema + \"\\\"\");\n                        upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        downQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new table.\n     */\n    SqlServerQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n        if (ifNotExist === void 0) { ifNotExist = false; }\n        if (createForeignKeys === void 0) { createForeignKeys = true; }\n        if (createIndices === void 0) { createIndices = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var isTableExist, upQueries, downQueries;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ifNotExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(table)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.createTableSql(table, createForeignKeys));\n                        downQueries.push(this.dropTableSql(table));\n                        // if createForeignKeys is true, we must drop created foreign keys in down query.\n                        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n                        if (createForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return downQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        if (createIndices) {\n                            table.indices.forEach(function (index) {\n                                // new index may be passed without name. In this case we generate index name manually.\n                                if (!index.name)\n                                    index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                                upQueries.push(_this.createIndexSql(table, index));\n                                downQueries.push(_this.dropIndexSql(table, index));\n                            });\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the table.\n     */\n    SqlServerQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {\n        if (dropForeignKeys === void 0) { dropForeignKeys = true; }\n        if (dropIndices === void 0) { dropIndices = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(tableOrName)];\n                    case 1:\n                        isTableExist = _b.sent();\n                        if (!isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _b.label = 2;\n                    case 2:\n                        createForeignKeys = dropForeignKeys;\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 3];\n                        _a = tableOrName;\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 4:\n                        _a = _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        table = _a;\n                        upQueries = [];\n                        downQueries = [];\n                        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n                        // to perform drop queries for foreign keys and indices.\n                        if (dropIndices) {\n                            table.indices.forEach(function (index) {\n                                upQueries.push(_this.dropIndexSql(table, index));\n                                downQueries.push(_this.createIndexSql(table, index));\n                            });\n                        }\n                        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n                        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n                        if (dropForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return upQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        upQueries.push(this.dropTableSql(table));\n                        downQueries.push(this.createTableSql(table, createForeignKeys));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 6:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames a table.\n     */\n    SqlServerQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var upQueries, downQueries, oldTable, _a, newTable, dbName, schemaName, oldTableName, splittedName, currentDB, columnNames, oldPkName, newPkName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(oldTableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = oldTableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(oldTableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        oldTable = _a;\n                        newTable = oldTable.clone();\n                        dbName = undefined;\n                        schemaName = undefined;\n                        oldTableName = oldTable.name;\n                        splittedName = oldTable.name.split(\".\");\n                        if (splittedName.length === 3) {\n                            dbName = splittedName[0];\n                            oldTableName = splittedName[2];\n                            if (splittedName[1] !== \"\")\n                                schemaName = splittedName[1];\n                        }\n                        else if (splittedName.length === 2) {\n                            schemaName = splittedName[0];\n                            oldTableName = splittedName[1];\n                        }\n                        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 4:\n                        currentDB = _b.sent();\n                        if (dbName && dbName !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        }\n                        // rename table\n                        upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(oldTable, true) + \"\\\", \\\"\" + newTableName + \"\\\"\");\n                        downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(newTable, true) + \"\\\", \\\"\" + oldTableName + \"\\\"\");\n                        // rename primary key constraint\n                        if (newTable.primaryColumns.length > 0) {\n                            columnNames = newTable.primaryColumns.map(function (column) { return column.name; });\n                            oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n                            newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n                            // rename primary constraint\n                            upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(newTable, true) + \".\" + oldPkName + \"\\\", \\\"\" + newPkName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(newTable, true) + \".\" + newPkName + \"\\\", \\\"\" + oldPkName + \"\\\"\");\n                        }\n                        // rename unique constraints\n                        newTable.uniques.forEach(function (unique) {\n                            // build new constraint name\n                            var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + unique.name + \"\\\", \\\"\" + newUniqueName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + newUniqueName + \"\\\", \\\"\" + unique.name + \"\\\"\");\n                            // replace constraint name\n                            unique.name = newUniqueName;\n                        });\n                        // rename index constraints\n                        newTable.indices.forEach(function (index) {\n                            // build new constraint name\n                            var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + index.name + \"\\\", \\\"\" + newIndexName + \"\\\", \\\"INDEX\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(newTable, true) + \".\" + newIndexName + \"\\\", \\\"\" + index.name + \"\\\", \\\"INDEX\\\"\");\n                            // replace constraint name\n                            index.name = newIndexName;\n                        });\n                        // rename foreign key constraints\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            // build new constraint name\n                            var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(foreignKey.name, schemaName, dbName) + \"\\\", \\\"\" + newForeignKeyName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(newForeignKeyName, schemaName, dbName) + \"\\\", \\\"\" + foreignKey.name + \"\\\"\");\n                            // replace constraint name\n                            foreignKey.name = newForeignKeyName;\n                        });\n                        // change currently used database back to default db.\n                        if (dbName && dbName !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + dbName + \"\\\"\");\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 5:\n                        _b.sent();\n                        // rename old table and replace it in cached tabled;\n                        oldTable.name = newTable.name;\n                        this.replaceCachedTable(oldTable, newTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new column from the column in the table.\n     */\n    SqlServerQueryRunner.prototype.addColumn = function (tableOrName, column) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, upQueries, downQueries, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, uniqueConstraint, defaultName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD \" + this.buildCreateColumnSql(table, column, false, false));\n                        downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\");\n                        // create or update primary key constraint\n                        if (column.isPrimary) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if table already have primary key, me must drop it and recreate again\n                            if (primaryColumns.length > 0) {\n                                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames_1 = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\");\n                            }\n                            primaryColumns.push(column);\n                            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                            columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            upQueries.push(this.createIndexSql(table, columnIndex));\n                            downQueries.push(this.dropIndexSql(table, columnIndex));\n                        }\n                        // create unique constraint\n                        if (column.isUnique) {\n                            uniqueConstraint = new TableUnique_1.TableUnique({\n                                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                                columnNames: [column.name]\n                            });\n                            clonedTable.uniques.push(uniqueConstraint);\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + column.name + \"\\\")\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\");\n                        }\n                        // create default constraint\n                        if (column.default !== null && column.default !== undefined) {\n                            defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default + \" FOR \\\"\" + column.name + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.addColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    SqlServerQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, index_1.PromiseUtils.runInSequence(columns, function (column) { return _this.addColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames column in the given table.\n     */\n    SqlServerQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, oldColumn, newColumn;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        oldColumn = oldTableColumnOrName instanceof TableColumn_1.TableColumn ? oldTableColumnOrName : table.columns.find(function (c) { return c.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        newColumn = undefined;\n                        if (newTableColumnOrName instanceof TableColumn_1.TableColumn) {\n                            newColumn = newTableColumnOrName;\n                        }\n                        else {\n                            newColumn = oldColumn.clone();\n                            newColumn.name = newTableColumnOrName;\n                        }\n                        return [4 /*yield*/, this.changeColumn(table, oldColumn, newColumn)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    SqlServerQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var table, _a, clonedTable, upQueries, downQueries, oldColumn, dbName_1, schemaName_1, splittedName, currentDB, primaryColumns, columnNames, oldPkName, newPkName, oldTableColumn, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint, defaultName, defaultName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        oldColumn = oldTableColumnOrName instanceof TableColumn_1.TableColumn\n                            ? oldTableColumnOrName\n                            : table.columns.find(function (column) { return column.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        if (!((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length)) return [3 /*break*/, 6];\n                        // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n                        // Also, we recreate column if column type changed\n                        return [4 /*yield*/, this.dropColumn(table, oldColumn)];\n                    case 4:\n                        // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n                        // Also, we recreate column if column type changed\n                        _b.sent();\n                        return [4 /*yield*/, this.addColumn(table, newColumn)];\n                    case 5:\n                        _b.sent();\n                        // update cloned table\n                        clonedTable = table.clone();\n                        return [3 /*break*/, 10];\n                    case 6:\n                        if (!(newColumn.name !== oldColumn.name)) return [3 /*break*/, 8];\n                        dbName_1 = undefined;\n                        schemaName_1 = undefined;\n                        splittedName = table.name.split(\".\");\n                        if (splittedName.length === 3) {\n                            dbName_1 = splittedName[0];\n                            if (splittedName[1] !== \"\")\n                                schemaName_1 = splittedName[1];\n                        }\n                        else if (splittedName.length === 2) {\n                            schemaName_1 = splittedName[0];\n                        }\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 7:\n                        currentDB = _b.sent();\n                        if (dbName_1 && dbName_1 !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + dbName_1 + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                        }\n                        // rename the column\n                        upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(table, true) + \".\" + oldColumn.name + \"\\\", \\\"\" + newColumn.name + \"\\\"\");\n                        downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(table, true) + \".\" + newColumn.name + \"\\\", \\\"\" + oldColumn.name + \"\\\"\");\n                        if (oldColumn.isPrimary === true) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            columnNames = primaryColumns.map(function (column) { return column.name; });\n                            oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                            // replace old column name with new column name\n                            columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                            columnNames.push(newColumn.name);\n                            newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                            // rename primary constraint\n                            upQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(clonedTable, true) + \".\" + oldPkName + \"\\\", \\\"\" + newPkName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + this.escapeTableName(clonedTable, true) + \".\" + newPkName + \"\\\", \\\"\" + oldPkName + \"\\\"\");\n                        }\n                        // rename index constraints\n                        clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n                            // build new constraint name\n                            index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                            index.columnNames.push(newColumn.name);\n                            var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + index.name + \"\\\", \\\"\" + newIndexName + \"\\\", \\\"INDEX\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + newIndexName + \"\\\", \\\"\" + index.name + \"\\\", \\\"INDEX\\\"\");\n                            // replace constraint name\n                            index.name = newIndexName;\n                        });\n                        // rename foreign key constraints\n                        clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n                            // build new constraint name\n                            foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                            foreignKey.columnNames.push(newColumn.name);\n                            var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(foreignKey.name, schemaName_1, dbName_1) + \"\\\", \\\"\" + newForeignKeyName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(newForeignKeyName, schemaName_1, dbName_1) + \"\\\", \\\"\" + foreignKey.name + \"\\\"\");\n                            // replace constraint name\n                            foreignKey.name = newForeignKeyName;\n                        });\n                        // rename check constraints\n                        clonedTable.findColumnChecks(oldColumn).forEach(function (check) {\n                            // build new constraint name\n                            check.columnNames.splice(check.columnNames.indexOf(oldColumn.name), 1);\n                            check.columnNames.push(newColumn.name);\n                            var newCheckName = _this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + check.name + \"\\\", \\\"\" + newCheckName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + newCheckName + \"\\\", \\\"\" + check.name + \"\\\"\");\n                            // replace constraint name\n                            check.name = newCheckName;\n                        });\n                        // rename unique constraints\n                        clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {\n                            // build new constraint name\n                            unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                            unique.columnNames.push(newColumn.name);\n                            var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n                            // build queries\n                            upQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + unique.name + \"\\\", \\\"\" + newUniqueName + \"\\\"\");\n                            downQueries.push(\"EXEC sp_rename \\\"\" + _this.escapeTableName(clonedTable, true) + \".\" + newUniqueName + \"\\\", \\\"\" + unique.name + \"\\\"\");\n                            // replace constraint name\n                            unique.name = newUniqueName;\n                        });\n                        // change currently used database back to default db.\n                        if (dbName_1 && dbName_1 !== currentDB) {\n                            upQueries.push(\"USE \\\"\" + currentDB + \"\\\"\");\n                            downQueries.push(\"USE \\\"\" + dbName_1 + \"\\\"\");\n                        }\n                        oldTableColumn = clonedTable.columns.find(function (column) { return column.name === oldColumn.name; });\n                        clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                        oldColumn.name = newColumn.name;\n                        _b.label = 8;\n                    case 8:\n                        if (this.isColumnChanged(oldColumn, newColumn)) {\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ALTER COLUMN \" + this.buildCreateColumnSql(table, newColumn, true, false));\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ALTER COLUMN \" + this.buildCreateColumnSql(table, oldColumn, true, false));\n                        }\n                        if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if primary column state changed, we must always drop existed constraint.\n                            if (primaryColumns.length > 0) {\n                                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                            }\n                            if (newColumn.isPrimary === true) {\n                                primaryColumns.push(newColumn);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = true;\n                                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                            }\n                            else {\n                                primaryColumn = primaryColumns.find(function (c) { return c.name === newColumn.name; });\n                                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = false;\n                                // if we have another primary keys, we must recreate constraint.\n                                if (primaryColumns.length > 0) {\n                                    pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                    columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                    upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                                    downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                                }\n                            }\n                        }\n                        if (newColumn.isUnique !== oldColumn.isUnique) {\n                            if (newColumn.isUnique === true) {\n                                uniqueConstraint = new TableUnique_1.TableUnique({\n                                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                                    columnNames: [newColumn.name]\n                                });\n                                clonedTable.uniques.push(uniqueConstraint);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\");\n                            }\n                            else {\n                                uniqueConstraint = clonedTable.uniques.find(function (unique) {\n                                    return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) { return columnName === newColumn.name; });\n                                });\n                                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\");\n                            }\n                        }\n                        if (newColumn.default !== oldColumn.default) {\n                            if (newColumn.default !== null && newColumn.default !== undefined) {\n                                defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + newColumn.default + \" FOR \\\"\" + newColumn.name + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                            }\n                            else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                                defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + oldColumn.default + \" FOR \\\"\" + oldColumn.name + \"\\\"\");\n                            }\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 9:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        _b.label = 10;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    SqlServerQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, index_1.PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops column in the table.\n     */\n    SqlServerQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique, defaultName;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        column = columnOrName instanceof TableColumn_1.TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        // drop primary key constraint\n                        if (column.isPrimary) {\n                            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) { return column.name; }));\n                            columnNames = clonedTable.primaryColumns.map(function (primaryColumn) { return \"\\\"\" + primaryColumn.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\");\n                            tableColumn = clonedTable.findColumnByName(column.name);\n                            tableColumn.isPrimary = false;\n                            // if primary key have multiple columns, we must recreate it without dropped column\n                            if (clonedTable.primaryColumns.length > 0) {\n                                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) { return column.name; }));\n                                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) { return \"\\\"\" + primaryColumn.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\");\n                                downQueries.push(\"ALTER TABLE \" + this.escapeTableName(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\");\n                            }\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n                            upQueries.push(this.dropIndexSql(table, columnIndex));\n                            downQueries.push(this.createIndexSql(table, columnIndex));\n                        }\n                        columnCheck = clonedTable.checks.find(function (check) { return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name; });\n                        if (columnCheck) {\n                            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n                            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n                            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n                        }\n                        columnUnique = clonedTable.uniques.find(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n                        if (columnUnique) {\n                            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n                            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n                            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n                        }\n                        // drop default constraint\n                        if (column.default !== null && column.default !== undefined) {\n                            defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default + \" FOR \\\"\" + column.name + \"\\\"\");\n                        }\n                        upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\");\n                        downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD \" + this.buildCreateColumnSql(table, column, false, false));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.removeColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the columns in the table.\n     */\n    SqlServerQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, index_1.PromiseUtils.runInSequence(columns, function (column) { return _this.dropColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new primary key.\n     */\n    SqlServerQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        up = this.createPrimaryKeySql(table, columnNames);\n                        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n                        clonedTable.columns.forEach(function (column) {\n                            if (columnNames.find(function (columnName) { return columnName === column.name; }))\n                                column.isPrimary = true;\n                        });\n                        down = this.dropPrimaryKeySql(clonedTable);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    SqlServerQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, columnNames, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        columnNames = columns.map(function (column) { return column.name; });\n                        upQueries = [];\n                        downQueries = [];\n                        primaryColumns = clonedTable.primaryColumns;\n                        if (primaryColumns.length > 0) {\n                            pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                            columnNamesString_1 = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\");\n                            downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\");\n                        }\n                        // update columns in table.\n                        clonedTable.columns\n                            .filter(function (column) { return columnNames.indexOf(column.name) !== -1; })\n                            .forEach(function (column) { return column.isPrimary = true; });\n                        pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n                        columnNamesString = columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                        upQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n                        downQueries.push(\"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\");\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a primary key.\n     */\n    SqlServerQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        up = this.dropPrimaryKeySql(table);\n                        down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) { return column.name; }));\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.primaryColumns.forEach(function (column) {\n                            column.isPrimary = false;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraint.\n     */\n    SqlServerQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new unique constraint may be passed without name. In this case we generate unique name manually.\n                        if (!uniqueConstraint.name)\n                            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n                        up = this.createUniqueConstraintSql(table, uniqueConstraint);\n                        down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addUniqueConstraint(uniqueConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraints.\n     */\n    SqlServerQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = uniqueConstraints.map(function (uniqueConstraint) { return _this.createUniqueConstraint(tableOrName, uniqueConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops unique constraint.\n     */\n    SqlServerQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, uniqueConstraint, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        uniqueConstraint = uniqueOrName instanceof TableUnique_1.TableUnique ? uniqueOrName : table.uniques.find(function (u) { return u.name === uniqueOrName; });\n                        if (!uniqueConstraint)\n                            throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n                        up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n                        down = this.createUniqueConstraintSql(table, uniqueConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeUniqueConstraint(uniqueConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an unique constraints.\n     */\n    SqlServerQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = uniqueConstraints.map(function (uniqueConstraint) { return _this.dropUniqueConstraint(tableOrName, uniqueConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new check constraint.\n     */\n    SqlServerQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new unique constraint may be passed without name. In this case we generate unique name manually.\n                        if (!checkConstraint.name)\n                            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n                        up = this.createCheckConstraintSql(table, checkConstraint);\n                        down = this.dropCheckConstraintSql(table, checkConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addCheckConstraint(checkConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new check constraints.\n     */\n    SqlServerQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = checkConstraints.map(function (checkConstraint) { return _this.createCheckConstraint(tableOrName, checkConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraint.\n     */\n    SqlServerQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, checkConstraint, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        checkConstraint = checkOrName instanceof TableCheck_1.TableCheck ? checkOrName : table.checks.find(function (c) { return c.name === checkOrName; });\n                        if (!checkConstraint)\n                            throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n                        up = this.dropCheckConstraintSql(table, checkConstraint);\n                        down = this.createCheckConstraintSql(table, checkConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeCheckConstraint(checkConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraints.\n     */\n    SqlServerQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = checkConstraints.map(function (checkConstraint) { return _this.dropCheckConstraint(tableOrName, checkConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign key.\n     */\n    SqlServerQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new FK may be passed without name. In this case we generate FK name manually.\n                        if (!foreignKey.name)\n                            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\n                        up = this.createForeignKeySql(table, foreignKey);\n                        down = this.dropForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign keys.\n     */\n    SqlServerQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = foreignKeys.map(function (foreignKey) { return _this.createForeignKey(tableOrName, foreignKey); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign key from the table.\n     */\n    SqlServerQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, foreignKey, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        foreignKey = foreignKeyOrName instanceof TableForeignKey_1.TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) { return fk.name === foreignKeyOrName; });\n                        if (!foreignKey)\n                            throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n                        up = this.dropForeignKeySql(table, foreignKey);\n                        down = this.createForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign keys from the table.\n     */\n    SqlServerQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = foreignKeys.map(function (foreignKey) { return _this.dropForeignKey(tableOrName, foreignKey); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new index.\n     */\n    SqlServerQueryRunner.prototype.createIndex = function (tableOrName, index) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new index may be passed without name. In this case we generate index name manually.\n                        if (!index.name)\n                            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                        up = this.createIndexSql(table, index);\n                        down = this.dropIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new indices\n     */\n    SqlServerQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.createIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an index.\n     */\n    SqlServerQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var table, _a, index, up, down;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table_1.Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        index = indexOrName instanceof TableIndex_1.TableIndex ? indexOrName : table.indices.find(function (i) { return i.name === indexOrName; });\n                        if (!index)\n                            throw new Error(\"Supplied index was not found in table \" + table.name);\n                        up = this.dropIndexSql(table, index);\n                        down = this.createIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an indices from the table.\n     */\n    SqlServerQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.dropIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    SqlServerQueryRunner.prototype.clearTable = function (tablePath) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapeTableName(tablePath))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    SqlServerQueryRunner.prototype.clearDatabase = function (database) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var isDatabaseExist, allTablesSql, allTablesResults, error_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!database) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasDatabase(database)];\n                    case 1:\n                        isDatabaseExist = _a.sent();\n                        if (!isDatabaseExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, this.startTransaction()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 9, , 14]);\n                        allTablesSql = database\n                            ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_TYPE\\\" = 'BASE TABLE'\"\n                            : \"SELECT * FROM \\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_TYPE\\\" = 'BASE TABLE'\";\n                        return [4 /*yield*/, this.query(allTablesSql)];\n                    case 5:\n                        allTablesResults = _a.sent();\n                        return [4 /*yield*/, Promise.all(allTablesResults.map(function (tablesResult) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var dropForeignKeySql, dropFkQueries;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            dropForeignKeySql = \"SELECT 'ALTER TABLE \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"' + OBJECT_SCHEMA_NAME(\\\"fk\\\".\\\"parent_object_id\\\", DB_ID('\" + tablesResult[\"TABLE_CATALOG\"] + \"')) + '\\\".\\\"' + OBJECT_NAME(\\\"fk\\\".\\\"parent_object_id\\\", DB_ID('\" + tablesResult[\"TABLE_CATALOG\"] + \"')) + '\\\" \" +\n                                                (\"DROP CONSTRAINT \\\"' + \\\"fk\\\".\\\"name\\\" + '\\\"' as \\\"query\\\" FROM \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" AS \\\"fk\\\" \") +\n                                                (\"WHERE \\\"fk\\\".\\\"referenced_object_id\\\" = OBJECT_ID('\\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_NAME\"] + \"\\\"')\");\n                                            return [4 /*yield*/, this.query(dropForeignKeySql)];\n                                        case 1:\n                                            dropFkQueries = _a.sent();\n                                            return [2 /*return*/, Promise.all(dropFkQueries.map(function (result) { return result[\"query\"]; }).map(function (dropQuery) { return _this.query(dropQuery); }))];\n                                    }\n                                });\n                            }); }))];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, Promise.all(allTablesResults.map(function (tablesResult) {\n                                var dropTableSql = \"DROP TABLE \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_NAME\"] + \"\\\"\";\n                                return _this.query(dropTableSql);\n                            }))];\n                    case 7:\n                        _a.sent();\n                        return [4 /*yield*/, this.commitTransaction()];\n                    case 8:\n                        _a.sent();\n                        return [3 /*break*/, 14];\n                    case 9:\n                        error_1 = _a.sent();\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, this.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw error_1;\n                    case 14: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Return current database.\n     */\n    SqlServerQueryRunner.prototype.getCurrentDatabase = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentDBQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT DB_NAME() AS \\\"db_name\\\"\")];\n                    case 1:\n                        currentDBQuery = _a.sent();\n                        return [2 /*return*/, currentDBQuery[0][\"db_name\"]];\n                }\n            });\n        });\n    };\n    /**\n     * Return current schema.\n     */\n    SqlServerQueryRunner.prototype.getCurrentSchema = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var currentSchemaQuery;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT SCHEMA_NAME() AS \\\"schema_name\\\"\")];\n                    case 1:\n                        currentSchemaQuery = _a.sent();\n                        return [2 /*return*/, currentSchemaQuery[0][\"schema_name\"]];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    SqlServerQueryRunner.prototype.loadTables = function (tableNames) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var schemaNames, currentSchema, currentDatabase, extractTableSchemaAndName, dbNames, schemaNamesString, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, foreignKeysSql, identityColumnsSql, dbCollationsSql, indicesSql, _a, dbTables, dbColumns, dbConstraints, dbForeignKeys, dbIdentityColumns, dbCollations, dbIndices;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        // if no tables given then no need to proceed\n                        if (!tableNames || !tableNames.length)\n                            return [2 /*return*/, []];\n                        schemaNames = [];\n                        return [4 /*yield*/, this.getCurrentSchema()];\n                    case 1:\n                        currentSchema = _b.sent();\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDatabase = _b.sent();\n                        extractTableSchemaAndName = function (tableName) {\n                            var _a = tableName.split(\".\"), database = _a[0], schema = _a[1], name = _a[2];\n                            // if name is empty, it means that tableName have only schema name and table name or only table name\n                            if (!name) {\n                                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                                if (!schema) {\n                                    name = database;\n                                    schema = _this.driver.options.schema || currentSchema;\n                                }\n                                else {\n                                    name = schema;\n                                    schema = database;\n                                }\n                            }\n                            else if (schema === \"\") {\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return [schema, name];\n                        };\n                        tableNames.filter(function (tablePath) { return tablePath.indexOf(\".\") !== -1; })\n                            .forEach(function (tablePath) {\n                            if (tablePath.split(\".\").length === 3) {\n                                if (tablePath.split(\".\")[1] !== \"\")\n                                    schemaNames.push(tablePath.split(\".\")[1]);\n                            }\n                            else {\n                                schemaNames.push(tablePath.split(\".\")[0]);\n                            }\n                        });\n                        schemaNames.push(this.driver.options.schema || currentSchema);\n                        dbNames = tableNames\n                            .filter(function (tablePath) { return tablePath.split(\".\").length === 3; })\n                            .map(function (tablePath) { return tablePath.split(\".\")[0]; });\n                        if (this.driver.database && !dbNames.find(function (dbName) { return dbName === _this.driver.database; }))\n                            dbNames.push(this.driver.database);\n                        schemaNamesString = schemaNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = extractTableSchemaAndName(tableName), schema = _a[0], name = _a[1];\n                            return \"(\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        columnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n                        }).join(\" UNION ALL \");\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = extractTableSchemaAndName(tableName), schema = _a[0], name = _a[1];\n                            return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" +\n                                (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n                        }).join(\" OR \");\n                        constraintsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") +\n                                (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n                        }).join(\" UNION ALL \");\n                        foreignKeysSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" +\n                                \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n                        }).join(\" UNION ALL \");\n                        identityColumnsSql = dbNames.map(function (dbName) {\n                            return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") +\n                                (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n                        }).join(\" UNION ALL \");\n                        dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"SYS\\\".\\\"DATABASES\\\"\";\n                        indicesSql = dbNames.map(function (dbName) {\n                            return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" +\n                                \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" +\n                                (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") +\n                                (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") +\n                                \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n                        }).join(\" UNION ALL \");\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(foreignKeysSql),\n                                this.query(identityColumnsSql),\n                                this.query(dbCollationsSql),\n                                this.query(indicesSql),\n                            ])];\n                    case 3:\n                        _a = _b.sent(), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbForeignKeys = _a[3], dbIdentityColumns = _a[4], dbCollations = _a[5], dbIndices = _a[6];\n                        // if tables were not found in the db, no need to proceed\n                        if (!dbTables.length)\n                            return [2 /*return*/, []];\n                        return [4 /*yield*/, Promise.all(dbTables.map(function (dbTable) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var table, db, schema, tableFullName, defaultCollation, tableUniqueConstraints, tableCheckConstraints, tableForeignKeyConstraints, tableIndexConstraints;\n                                return __generator(this, function (_a) {\n                                    table = new Table_1.Table();\n                                    db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n                                    schema = dbTable[\"TABLE_SCHEMA\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"TABLE_SCHEMA\"];\n                                    table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n                                    tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n                                    defaultCollation = dbCollations.find(function (dbCollation) { return dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"]; });\n                                    // create columns from the loaded columns\n                                    table.columns = dbColumns\n                                        .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName; })\n                                        .map(function (dbColumn) {\n                                        var columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                            return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                                                && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                                        });\n                                        var uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"; });\n                                        var isConstraintComposite = uniqueConstraint\n                                            ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\n                                                && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                                                && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]; })\n                                            : false;\n                                        var isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\"; });\n                                        var isGenerated = !!dbIdentityColumns.find(function (column) {\n                                            return _this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName\n                                                && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                                        });\n                                        var tableColumn = new TableColumn_1.TableColumn();\n                                        tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                                        tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                                        // check only columns that have length property\n                                        if (_this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                                            var length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                                            if (length === \"-1\") {\n                                                tableColumn.length = \"MAX\";\n                                            }\n                                            else {\n                                                tableColumn.length = !_this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                                            }\n                                        }\n                                        if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                                            if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                                                tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                                            if (dbColumn[\"NUMERIC_SCALE\"] !== null && !_this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                                                tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                                        }\n                                        tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                            ? _this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\n                                            : undefined;\n                                        tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                                        tableColumn.isPrimary = isPrimary;\n                                        tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                        tableColumn.isGenerated = isGenerated;\n                                        if (isGenerated)\n                                            tableColumn.generationStrategy = \"increment\";\n                                        if (tableColumn.default === \"newsequentialid()\") {\n                                            tableColumn.isGenerated = true;\n                                            tableColumn.generationStrategy = \"uuid\";\n                                            tableColumn.default = undefined;\n                                        }\n                                        // todo: unable to get default charset\n                                        // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n                                        if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                                            tableColumn.precision = !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                                        }\n                                        return tableColumn;\n                                    });\n                                    tableUniqueConstraints = OrmUtils_1.OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                        return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                                            && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                                    }), function (dbConstraint) { return dbConstraint[\"CONSTRAINT_NAME\"]; });\n                                    table.uniques = tableUniqueConstraints.map(function (constraint) {\n                                        var uniques = dbConstraints.filter(function (dbC) { return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]; });\n                                        return new TableUnique_1.TableUnique({\n                                            name: constraint[\"CONSTRAINT_NAME\"],\n                                            columnNames: uniques.map(function (u) { return u[\"COLUMN_NAME\"]; })\n                                        });\n                                    });\n                                    tableCheckConstraints = OrmUtils_1.OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                        return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                                            && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n                                    }), function (dbConstraint) { return dbConstraint[\"CONSTRAINT_NAME\"]; });\n                                    table.checks = tableCheckConstraints.map(function (constraint) {\n                                        var checks = dbConstraints.filter(function (dbC) { return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]; });\n                                        return new TableCheck_1.TableCheck({\n                                            name: constraint[\"CONSTRAINT_NAME\"],\n                                            columnNames: checks.map(function (c) { return c[\"COLUMN_NAME\"]; }),\n                                            expression: constraint[\"definition\"]\n                                        });\n                                    });\n                                    tableForeignKeyConstraints = OrmUtils_1.OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                                        return _this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n                                    }), function (dbForeignKey) { return dbForeignKey[\"FK_NAME\"]; });\n                                    table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                                        var foreignKeys = dbForeignKeys.filter(function (dbFk) { return dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]; });\n                                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                                        var db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                                        var schema = dbForeignKey[\"REF_SCHEMA\"] === currentSchema ? undefined : dbForeignKey[\"REF_SCHEMA\"];\n                                        var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n                                        return new TableForeignKey_1.TableForeignKey({\n                                            name: dbForeignKey[\"FK_NAME\"],\n                                            columnNames: foreignKeys.map(function (dbFk) { return dbFk[\"COLUMN_NAME\"]; }),\n                                            referencedTableName: referencedTableName,\n                                            referencedColumnNames: foreignKeys.map(function (dbFk) { return dbFk[\"REF_COLUMN\"]; }),\n                                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"),\n                                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n                                        });\n                                    });\n                                    tableIndexConstraints = OrmUtils_1.OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                                        return _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n                                    }), function (dbIndex) { return dbIndex[\"INDEX_NAME\"]; });\n                                    table.indices = tableIndexConstraints.map(function (constraint) {\n                                        var indices = dbIndices.filter(function (index) { return index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]; });\n                                        return new TableIndex_1.TableIndex({\n                                            table: table,\n                                            name: constraint[\"INDEX_NAME\"],\n                                            columnNames: indices.map(function (i) { return i[\"COLUMN_NAME\"]; }),\n                                            isUnique: constraint[\"IS_UNIQUE\"],\n                                            where: constraint[\"CONDITION\"]\n                                        });\n                                    });\n                                    return [2 /*return*/, table];\n                                });\n                            }); }))];\n                    case 4: \n                    // create table schemas for loaded tables\n                    return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Builds and returns SQL for create table.\n     */\n    SqlServerQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n        var _this = this;\n        var columnDefinitions = table.columns.map(function (column) { return _this.buildCreateColumnSql(table, column, false, true); }).join(\", \");\n        var sql = \"CREATE TABLE \" + this.escapeTableName(table) + \" (\" + columnDefinitions;\n        table.columns\n            .filter(function (column) { return column.isUnique; })\n            .forEach(function (column) {\n            var isUniqueExist = table.uniques.some(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n            if (!isUniqueExist)\n                table.uniques.push(new TableUnique_1.TableUnique({\n                    name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                    columnNames: [column.name]\n                }));\n        });\n        if (table.uniques.length > 0) {\n            var uniquesSql = table.uniques.map(function (unique) {\n                var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                var columnNames = unique.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n            }).join(\", \");\n            sql += \", \" + uniquesSql;\n        }\n        if (table.checks.length > 0) {\n            var checksSql = table.checks.map(function (check) {\n                var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n                return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n            }).join(\", \");\n            sql += \", \" + checksSql;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            var foreignKeysSql = table.foreignKeys.map(function (fk) {\n                var columnNames = fk.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                if (!fk.name)\n                    fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapeTableName(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\";\n                if (fk.onDelete)\n                    constraint += \" ON DELETE \" + fk.onDelete;\n                if (fk.onUpdate)\n                    constraint += \" ON UPDATE \" + fk.onUpdate;\n                return constraint;\n            }).join(\", \");\n            sql += \", \" + foreignKeysSql;\n        }\n        var primaryColumns = table.columns.filter(function (column) { return column.isPrimary; });\n        if (primaryColumns.length > 0) {\n            var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) { return column.name; }));\n            var columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n            sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n        }\n        sql += \")\";\n        return sql;\n    };\n    /**\n     * Builds drop table sql.\n     */\n    SqlServerQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {\n        return ifExist ? \"DROP TABLE IF EXISTS \" + this.escapeTableName(tableOrName) : \"DROP TABLE \" + this.escapeTableName(tableOrName);\n    };\n    /**\n     * Builds create index sql.\n     */\n    SqlServerQueryRunner.prototype.createIndexSql = function (table, index) {\n        var columns = index.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return \"CREATE \" + (index.isUnique ? \"UNIQUE \" : \"\") + \"INDEX \\\"\" + index.name + \"\\\" ON \" + this.escapeTableName(table) + \"(\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\");\n    };\n    /**\n     * Builds drop index sql.\n     */\n    SqlServerQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n        var indexName = indexOrName instanceof TableIndex_1.TableIndex ? indexOrName.name : indexOrName;\n        return \"DROP INDEX \\\"\" + indexName + \"\\\" ON \" + this.escapeTableName(table);\n    };\n    /**\n     * Builds create primary key sql.\n     */\n    SqlServerQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n        var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        var columnNamesString = columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\";\n    };\n    /**\n     * Builds drop primary key sql.\n     */\n    SqlServerQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n        var columnNames = table.primaryColumns.map(function (column) { return column.name; });\n        var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\";\n    };\n    /**\n     * Builds create unique constraint sql.\n     */\n    SqlServerQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {\n        var columnNames = uniqueConstraint.columnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\", \");\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\" + columnNames + \")\";\n    };\n    /**\n     * Builds drop unique constraint sql.\n     */\n    SqlServerQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {\n        var uniqueName = uniqueOrName instanceof TableUnique_1.TableUnique ? uniqueOrName.name : uniqueOrName;\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + uniqueName + \"\\\"\";\n    };\n    /**\n     * Builds create check constraint sql.\n     */\n    SqlServerQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\";\n    };\n    /**\n     * Builds drop check constraint sql.\n     */\n    SqlServerQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n        var checkName = checkOrName instanceof TableCheck_1.TableCheck ? checkOrName.name : checkOrName;\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\";\n    };\n    /**\n     * Builds create foreign key sql.\n     */\n    SqlServerQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n        var columnNames = foreignKey.columnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\", \");\n        var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\",\");\n        var sql = \"ALTER TABLE \" + this.escapeTableName(table) + \" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" +\n            (\"REFERENCES \" + this.escapeTableName(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n        if (foreignKey.onDelete)\n            sql += \" ON DELETE \" + foreignKey.onDelete;\n        if (foreignKey.onUpdate)\n            sql += \" ON UPDATE \" + foreignKey.onUpdate;\n        return sql;\n    };\n    /**\n     * Builds drop foreign key sql.\n     */\n    SqlServerQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n        var foreignKeyName = foreignKeyOrName instanceof TableForeignKey_1.TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return \"ALTER TABLE \" + this.escapeTableName(table) + \" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\";\n    };\n    /**\n     * Escapes given table name.\n     */\n    SqlServerQueryRunner.prototype.escapeTableName = function (tableOrName, disableEscape) {\n        var name = tableOrName instanceof Table_1.Table ? tableOrName.name : tableOrName;\n        if (this.driver.options.schema) {\n            if (name.indexOf(\".\") === -1) {\n                name = this.driver.options.schema + \".\" + name;\n            }\n            else if (name.split(\".\").length === 3) {\n                var splittedName = name.split(\".\");\n                var dbName = splittedName[0];\n                var tableName = splittedName[2];\n                name = dbName + \".\" + this.driver.options.schema + \".\" + tableName;\n            }\n        }\n        return name.split(\".\").map(function (i) {\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n        }).join(\".\");\n    };\n    SqlServerQueryRunner.prototype.parseTableName = function (target) {\n        var tableName = target instanceof Table_1.Table ? target.name : target;\n        if (tableName.split(\".\").length === 3) {\n            return {\n                database: tableName.split(\".\")[0],\n                schema: tableName.split(\".\")[1] === \"\" ? \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n                tableName: tableName.split(\".\")[2]\n            };\n        }\n        else if (tableName.split(\".\").length === 2) {\n            return {\n                database: this.driver.database,\n                schema: tableName.split(\".\")[0],\n                tableName: tableName.split(\".\")[1]\n            };\n        }\n        else {\n            return {\n                database: this.driver.database,\n                schema: this.driver.options.schema ? this.driver.options.schema : \"SCHEMA_NAME()\",\n                tableName: tableName\n            };\n        }\n    };\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    SqlServerQueryRunner.prototype.buildForeignKeyName = function (fkName, schemaName, dbName) {\n        var joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n        return joinedFkName;\n    };\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    SqlServerQueryRunner.prototype.removeParenthesisFromDefault = function (defaultValue) {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        var normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    };\n    /**\n     * Builds a query for create column.\n     */\n    SqlServerQueryRunner.prototype.buildCreateColumnSql = function (table, column, skipIdentity, createDefault) {\n        var c = \"\\\"\" + column.name + \"\\\" \" + this.connection.driver.createFullType(column);\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n        if (column.default !== undefined && column.default !== null && createDefault) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            var defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += \" CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default;\n        }\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            var defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += \" CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT NEWSEQUENTIALID()\";\n        }\n        return c;\n    };\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    SqlServerQueryRunner.prototype.mssqlParameterToNativeParameter = function (parameter) {\n        switch (this.driver.normalizeType({ type: parameter.type })) {\n            case \"bit\":\n                return this.driver.mssql.Bit;\n            case \"bigint\":\n                return this.driver.mssql.BigInt;\n            case \"decimal\":\n                return (_a = this.driver.mssql).Decimal.apply(_a, parameter.params);\n            case \"float\":\n                return this.driver.mssql.Float;\n            case \"int\":\n                return this.driver.mssql.Int;\n            case \"money\":\n                return this.driver.mssql.Money;\n            case \"numeric\":\n                return (_b = this.driver.mssql).Numeric.apply(_b, parameter.params);\n            case \"smallint\":\n                return this.driver.mssql.SmallInt;\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney;\n            case \"real\":\n                return this.driver.mssql.Real;\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt;\n            case \"char\":\n                return (_c = this.driver.mssql).Char.apply(_c, parameter.params);\n            case \"nchar\":\n                return (_d = this.driver.mssql).NChar.apply(_d, parameter.params);\n            case \"text\":\n                return this.driver.mssql.Text;\n            case \"ntext\":\n                return this.driver.mssql.Ntext;\n            case \"varchar\":\n                return (_e = this.driver.mssql).VarChar.apply(_e, parameter.params);\n            case \"nvarchar\":\n                return (_f = this.driver.mssql).NVarChar.apply(_f, parameter.params);\n            case \"xml\":\n                return this.driver.mssql.Xml;\n            case \"time\":\n                return (_g = this.driver.mssql).Time.apply(_g, parameter.params);\n            case \"date\":\n                return this.driver.mssql.Date;\n            case \"datetime\":\n                return this.driver.mssql.DateTime;\n            case \"datetime2\":\n                return (_h = this.driver.mssql).DateTime2.apply(_h, parameter.params);\n            case \"datetimeoffset\":\n                return (_j = this.driver.mssql).DateTimeOffset.apply(_j, parameter.params);\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime;\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier;\n            case \"variant\":\n                return this.driver.mssql.Variant;\n            case \"binary\":\n                return this.driver.mssql.Binary;\n            case \"varbinary\":\n                return (_k = this.driver.mssql).VarBinary.apply(_k, parameter.params);\n            case \"image\":\n                return this.driver.mssql.Image;\n            case \"udt\":\n                return this.driver.mssql.UDT;\n        }\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    };\n    return SqlServerQueryRunner;\n}(BaseQueryRunner_1.BaseQueryRunner));\nexports.SqlServerQueryRunner = SqlServerQueryRunner;\n\n//# sourceMappingURL=SqlServerQueryRunner.js.map\n"},"lineCount":2442}},"hash":"76da84d945360c969b6de21b037577aa","cacheData":{"env":{}}}