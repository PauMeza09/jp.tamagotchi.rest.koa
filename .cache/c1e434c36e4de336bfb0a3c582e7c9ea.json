{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../error/FindRelationsNotFoundError","loc":{"line":3,"column":43}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FindRelationsNotFoundError_1 = require(\"../error/FindRelationsNotFoundError\");\n/**\n * Utilities to work with FindOptions.\n */\nvar FindOptionsUtils = /** @class */ (function () {\n    function FindOptionsUtils() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    FindOptionsUtils.isFindOneOptions = function (obj) {\n        var possibleOptions = obj;\n        return possibleOptions &&\n            (possibleOptions.select instanceof Array ||\n                possibleOptions.where instanceof Object ||\n                typeof possibleOptions.where === \"string\" ||\n                possibleOptions.relations instanceof Array ||\n                possibleOptions.join instanceof Object ||\n                possibleOptions.order instanceof Object ||\n                possibleOptions.cache instanceof Object ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                possibleOptions.loadRelationIds instanceof Object ||\n                typeof possibleOptions.loadRelationIds === \"boolean\");\n    };\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    FindOptionsUtils.isFindManyOptions = function (obj) {\n        var possibleOptions = obj;\n        return possibleOptions && (this.isFindOneOptions(possibleOptions) ||\n            typeof possibleOptions.skip === \"number\" ||\n            typeof possibleOptions.take === \"number\" ||\n            typeof possibleOptions.skip === \"string\" ||\n            typeof possibleOptions.take === \"string\");\n    };\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    FindOptionsUtils.extractFindManyOptionsAlias = function (object) {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n        return undefined;\n    };\n    /**\n     * Applies give find many options to the given query builder.\n     */\n    FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder = function (qb, options) {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n        if (options)\n            return qb.where(options);\n        return qb;\n    };\n    /**\n     * Applies give find options to the given query builder.\n     */\n    FindOptionsUtils.applyOptionsToQueryBuilder = function (qb, options) {\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n        var metadata = qb.expressionMap.mainAlias.metadata;\n        // apply all options from FindOptions\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(function (select) {\n                if (!metadata.findColumnWithPropertyPath(select))\n                    throw new Error(select + \" column was not found in the \" + metadata.name + \" entity.\");\n                qb.addSelect(qb.alias + \".\" + select);\n            });\n        }\n        if (options.where)\n            qb.where(options.where);\n        if (options.skip)\n            qb.skip(options.skip);\n        if (options.take)\n            qb.take(options.take);\n        if (options.order)\n            Object.keys(options.order).forEach(function (key) {\n                var order = options.order[key];\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(key + \" column was not found in the \" + metadata.name + \" entity.\");\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n        if (options.relations) {\n            var allRelations = options.relations.map(function (relation) { return relation; });\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias.name, qb.expressionMap.mainAlias.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError_1.FindRelationsNotFoundError(allRelations);\n        }\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(function (key) {\n                    qb.leftJoin(options.join.leftJoin[key], key);\n                });\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(function (key) {\n                    qb.innerJoin(options.join.innerJoin[key], key);\n                });\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(function (key) {\n                    qb.leftJoinAndSelect(options.join.leftJoinAndSelect[key], key);\n                });\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(function (key) {\n                    qb.innerJoinAndSelect(options.join.innerJoinAndSelect[key], key);\n                });\n        }\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                var cache = options.cache;\n                qb.cache(cache.id, cache.milliseconds);\n            }\n            else {\n                qb.cache(options.cache);\n            }\n        }\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n        }\n        else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds);\n        }\n        return qb;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    FindOptionsUtils.applyRelationsRecursively = function (qb, allRelations, alias, metadata, prefix) {\n        var _this = this;\n        // find all relations that match given prefix\n        var matchedBaseRelations = [];\n        if (prefix) {\n            var regexp_1 = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\n            matchedBaseRelations = allRelations\n                .filter(function (relation) { return relation.match(regexp_1); })\n                .map(function (relation) { return relation.replace(regexp_1, \"\"); })\n                .filter(function (relation) { return metadata.findRelationWithPropertyPath(relation); });\n        }\n        else {\n            matchedBaseRelations = allRelations.filter(function (relation) { return metadata.findRelationWithPropertyPath(relation); });\n        }\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach(function (relation) {\n            // add a join for the found relation\n            var selection = alias + \".\" + relation;\n            qb.leftJoinAndSelect(selection, alias + \"_\" + relation);\n            // join the eager relations of the found relation\n            var relMetadata = metadata.relations.find(function (metadata) { return metadata.propertyName === relation; });\n            if (relMetadata) {\n                _this.joinEagerRelations(qb, alias + \"_\" + relation, relMetadata.inverseEntityMetadata);\n            }\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(allRelations.indexOf(prefix ? prefix + \".\" + relation : relation), 1);\n            // try to find sub-relations\n            var join = qb.expressionMap.joinAttributes.find(function (join) { return join.entityOrProperty === selection; });\n            _this.applyRelationsRecursively(qb, allRelations, join.alias.name, join.metadata, prefix ? prefix + \".\" + relation : relation);\n        });\n    };\n    FindOptionsUtils.joinEagerRelations = function (qb, alias, metadata) {\n        var _this = this;\n        metadata.eagerRelations.forEach(function (relation) {\n            var relationAlias = alias + \"_\" + relation.propertyPath.replace(\".\", \"_\");\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\n            _this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    };\n    return FindOptionsUtils;\n}());\nexports.FindOptionsUtils = FindOptionsUtils;\n\n//# sourceMappingURL=FindOptionsUtils.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/find-options/FindOptionsUtils.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}}],"sources":{"../node_modules/typeorm/find-options/FindOptionsUtils.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FindRelationsNotFoundError_1 = require(\"../error/FindRelationsNotFoundError\");\n/**\n * Utilities to work with FindOptions.\n */\nvar FindOptionsUtils = /** @class */ (function () {\n    function FindOptionsUtils() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    FindOptionsUtils.isFindOneOptions = function (obj) {\n        var possibleOptions = obj;\n        return possibleOptions &&\n            (possibleOptions.select instanceof Array ||\n                possibleOptions.where instanceof Object ||\n                typeof possibleOptions.where === \"string\" ||\n                possibleOptions.relations instanceof Array ||\n                possibleOptions.join instanceof Object ||\n                possibleOptions.order instanceof Object ||\n                possibleOptions.cache instanceof Object ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                possibleOptions.loadRelationIds instanceof Object ||\n                typeof possibleOptions.loadRelationIds === \"boolean\");\n    };\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    FindOptionsUtils.isFindManyOptions = function (obj) {\n        var possibleOptions = obj;\n        return possibleOptions && (this.isFindOneOptions(possibleOptions) ||\n            typeof possibleOptions.skip === \"number\" ||\n            typeof possibleOptions.take === \"number\" ||\n            typeof possibleOptions.skip === \"string\" ||\n            typeof possibleOptions.take === \"string\");\n    };\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    FindOptionsUtils.extractFindManyOptionsAlias = function (object) {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n        return undefined;\n    };\n    /**\n     * Applies give find many options to the given query builder.\n     */\n    FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder = function (qb, options) {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n        if (options)\n            return qb.where(options);\n        return qb;\n    };\n    /**\n     * Applies give find options to the given query builder.\n     */\n    FindOptionsUtils.applyOptionsToQueryBuilder = function (qb, options) {\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n        var metadata = qb.expressionMap.mainAlias.metadata;\n        // apply all options from FindOptions\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(function (select) {\n                if (!metadata.findColumnWithPropertyPath(select))\n                    throw new Error(select + \" column was not found in the \" + metadata.name + \" entity.\");\n                qb.addSelect(qb.alias + \".\" + select);\n            });\n        }\n        if (options.where)\n            qb.where(options.where);\n        if (options.skip)\n            qb.skip(options.skip);\n        if (options.take)\n            qb.take(options.take);\n        if (options.order)\n            Object.keys(options.order).forEach(function (key) {\n                var order = options.order[key];\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(key + \" column was not found in the \" + metadata.name + \" entity.\");\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n        if (options.relations) {\n            var allRelations = options.relations.map(function (relation) { return relation; });\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias.name, qb.expressionMap.mainAlias.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError_1.FindRelationsNotFoundError(allRelations);\n        }\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(function (key) {\n                    qb.leftJoin(options.join.leftJoin[key], key);\n                });\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(function (key) {\n                    qb.innerJoin(options.join.innerJoin[key], key);\n                });\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(function (key) {\n                    qb.leftJoinAndSelect(options.join.leftJoinAndSelect[key], key);\n                });\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(function (key) {\n                    qb.innerJoinAndSelect(options.join.innerJoinAndSelect[key], key);\n                });\n        }\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                var cache = options.cache;\n                qb.cache(cache.id, cache.milliseconds);\n            }\n            else {\n                qb.cache(options.cache);\n            }\n        }\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n        }\n        else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds);\n        }\n        return qb;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    FindOptionsUtils.applyRelationsRecursively = function (qb, allRelations, alias, metadata, prefix) {\n        var _this = this;\n        // find all relations that match given prefix\n        var matchedBaseRelations = [];\n        if (prefix) {\n            var regexp_1 = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\n            matchedBaseRelations = allRelations\n                .filter(function (relation) { return relation.match(regexp_1); })\n                .map(function (relation) { return relation.replace(regexp_1, \"\"); })\n                .filter(function (relation) { return metadata.findRelationWithPropertyPath(relation); });\n        }\n        else {\n            matchedBaseRelations = allRelations.filter(function (relation) { return metadata.findRelationWithPropertyPath(relation); });\n        }\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach(function (relation) {\n            // add a join for the found relation\n            var selection = alias + \".\" + relation;\n            qb.leftJoinAndSelect(selection, alias + \"_\" + relation);\n            // join the eager relations of the found relation\n            var relMetadata = metadata.relations.find(function (metadata) { return metadata.propertyName === relation; });\n            if (relMetadata) {\n                _this.joinEagerRelations(qb, alias + \"_\" + relation, relMetadata.inverseEntityMetadata);\n            }\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(allRelations.indexOf(prefix ? prefix + \".\" + relation : relation), 1);\n            // try to find sub-relations\n            var join = qb.expressionMap.joinAttributes.find(function (join) { return join.entityOrProperty === selection; });\n            _this.applyRelationsRecursively(qb, allRelations, join.alias.name, join.metadata, prefix ? prefix + \".\" + relation : relation);\n        });\n    };\n    FindOptionsUtils.joinEagerRelations = function (qb, alias, metadata) {\n        var _this = this;\n        metadata.eagerRelations.forEach(function (relation) {\n            var relationAlias = alias + \"_\" + relation.propertyPath.replace(\".\", \"_\");\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\n            _this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    };\n    return FindOptionsUtils;\n}());\nexports.FindOptionsUtils = FindOptionsUtils;\n\n//# sourceMappingURL=FindOptionsUtils.js.map\n"},"lineCount":199}},"hash":"a18660f08dea3812a083b8194eb844c9","cacheData":{"env":{}}}