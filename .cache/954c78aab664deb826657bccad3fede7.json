{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../error/CustomRepositoryDoesNotHaveEntityError","loc":{"line":3,"column":55}},{"name":"../index","loc":{"line":4,"column":22}},{"name":"../error/CustomRepositoryNotFoundError","loc":{"line":5,"column":46}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CustomRepositoryDoesNotHaveEntityError_1 = require(\"../error/CustomRepositoryDoesNotHaveEntityError\");\nvar index_1 = require(\"../index\");\nvar CustomRepositoryNotFoundError_1 = require(\"../error/CustomRepositoryNotFoundError\");\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nvar AbstractRepository = /** @class */ (function () {\n    function AbstractRepository() {\n    }\n    Object.defineProperty(AbstractRepository.prototype, \"repository\", {\n        // -------------------------------------------------------------------------\n        // Protected Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the original ORM repository for the entity that is managed by this repository.\n         * If current repository does not manage any entity, then exception will be thrown.\n         */\n        get: function () {\n            var target = this.getCustomRepositoryTarget(this);\n            if (!target)\n                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);\n            return this.manager.getRepository(target);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractRepository.prototype, \"treeRepository\", {\n        /**\n         * Gets the original ORM tree repository for the entity that is managed by this repository.\n         * If current repository does not manage any entity, then exception will be thrown.\n         */\n        get: function () {\n            var target = this.getCustomRepositoryTarget(this);\n            if (!target)\n                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);\n            return this.manager.getTreeRepository(target);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    AbstractRepository.prototype.createQueryBuilder = function (alias) {\n        var target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);\n        return this.manager.getRepository(target).createQueryBuilder(alias);\n    };\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    AbstractRepository.prototype.createQueryBuilderFor = function (entity, alias) {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    };\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    AbstractRepository.prototype.getRepositoryFor = function (entity) {\n        return this.manager.getRepository(entity);\n    };\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    AbstractRepository.prototype.getTreeRepositoryFor = function (entity) {\n        return this.manager.getTreeRepository(entity);\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    AbstractRepository.prototype.getCustomRepositoryTarget = function (customRepository) {\n        var entityRepositoryMetadataArgs = index_1.getMetadataArgsStorage().entityRepositories.find(function (repository) {\n            return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError_1.CustomRepositoryNotFoundError(customRepository);\n        return entityRepositoryMetadataArgs.entity;\n    };\n    return AbstractRepository;\n}());\nexports.AbstractRepository = AbstractRepository;\n\n//# sourceMappingURL=AbstractRepository.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/repository/AbstractRepository.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}}],"sources":{"../node_modules/typeorm/repository/AbstractRepository.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CustomRepositoryDoesNotHaveEntityError_1 = require(\"../error/CustomRepositoryDoesNotHaveEntityError\");\nvar index_1 = require(\"../index\");\nvar CustomRepositoryNotFoundError_1 = require(\"../error/CustomRepositoryNotFoundError\");\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nvar AbstractRepository = /** @class */ (function () {\n    function AbstractRepository() {\n    }\n    Object.defineProperty(AbstractRepository.prototype, \"repository\", {\n        // -------------------------------------------------------------------------\n        // Protected Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the original ORM repository for the entity that is managed by this repository.\n         * If current repository does not manage any entity, then exception will be thrown.\n         */\n        get: function () {\n            var target = this.getCustomRepositoryTarget(this);\n            if (!target)\n                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);\n            return this.manager.getRepository(target);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractRepository.prototype, \"treeRepository\", {\n        /**\n         * Gets the original ORM tree repository for the entity that is managed by this repository.\n         * If current repository does not manage any entity, then exception will be thrown.\n         */\n        get: function () {\n            var target = this.getCustomRepositoryTarget(this);\n            if (!target)\n                throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);\n            return this.manager.getTreeRepository(target);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    AbstractRepository.prototype.createQueryBuilder = function (alias) {\n        var target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError_1.CustomRepositoryDoesNotHaveEntityError(this.constructor);\n        return this.manager.getRepository(target).createQueryBuilder(alias);\n    };\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    AbstractRepository.prototype.createQueryBuilderFor = function (entity, alias) {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    };\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    AbstractRepository.prototype.getRepositoryFor = function (entity) {\n        return this.manager.getRepository(entity);\n    };\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    AbstractRepository.prototype.getTreeRepositoryFor = function (entity) {\n        return this.manager.getTreeRepository(entity);\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    AbstractRepository.prototype.getCustomRepositoryTarget = function (customRepository) {\n        var entityRepositoryMetadataArgs = index_1.getMetadataArgsStorage().entityRepositories.find(function (repository) {\n            return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError_1.CustomRepositoryNotFoundError(customRepository);\n        return entityRepositoryMetadataArgs.entity;\n    };\n    return AbstractRepository;\n}());\nexports.AbstractRepository = AbstractRepository;\n\n//# sourceMappingURL=AbstractRepository.js.map\n"},"lineCount":98}},"hash":"c2ca8ed510c9b02db6086f96a295586a","cacheData":{"env":{}}}