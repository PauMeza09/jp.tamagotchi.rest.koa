{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nvar Repository = /** @class */ (function () {\n    function Repository() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    Repository.prototype.createQueryBuilder = function (alias, queryRunner) {\n        return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    };\n    Object.defineProperty(Repository.prototype, \"target\", {\n        /**\n         * Returns object that is managed by this repository.\n         * If this repository manages entity from schema,\n         * then it returns a name of that schema instead.\n         */\n        get: function () {\n            return this.metadata.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    Repository.prototype.hasId = function (entity) {\n        return this.manager.hasId(this.metadata.target, entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    Repository.prototype.getId = function (entity) {\n        return this.manager.getId(this.metadata.target, entity);\n    };\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    Repository.prototype.create = function (plainEntityLikeOrPlainEntityLikes) {\n        return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);\n    };\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    Repository.prototype.merge = function (mergeIntoEntity) {\n        var entityLikes = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            entityLikes[_i - 1] = arguments[_i];\n        }\n        return (_a = this.manager).merge.apply(_a, [this.metadata.target, mergeIntoEntity].concat(entityLikes));\n        var _a;\n    };\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    Repository.prototype.preload = function (entityLike) {\n        return this.manager.preload(this.metadata.target, entityLike);\n    };\n    /**\n     * Saves one or many given entities.\n     */\n    Repository.prototype.save = function (entityOrEntities, options) {\n        return this.manager.save(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Removes one or many given entities.\n     */\n    Repository.prototype.remove = function (entityOrEntities, options) {\n        return this.manager.remove(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    Repository.prototype.insert = function (entity, options) {\n        return this.manager.insert(this.metadata.target, entity, options);\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.update = function (criteria, partialEntity, options) {\n        return this.manager.update(this.metadata.target, criteria, partialEntity, options);\n    };\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.delete = function (criteria, options) {\n        return this.manager.delete(this.metadata.target, criteria, options);\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    Repository.prototype.count = function (optionsOrConditions) {\n        return this.manager.count(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    Repository.prototype.find = function (optionsOrConditions) {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    Repository.prototype.findAndCount = function (optionsOrConditions) {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    Repository.prototype.findByIds = function (ids, optionsOrConditions) {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    Repository.prototype.findOne = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    Repository.prototype.findOneOrFail = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOneOrFail(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    Repository.prototype.query = function (query, parameters) {\n        return this.manager.query(query, parameters);\n    };\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    Repository.prototype.clear = function () {\n        return this.manager.clear(this.metadata.target);\n    };\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    Repository.prototype.increment = function (conditions, propertyPath, value) {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    };\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    Repository.prototype.decrement = function (conditions, propertyPath, value) {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    };\n    return Repository;\n}());\nexports.Repository = Repository;\n\n//# sourceMappingURL=Repository.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/repository/Repository.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}}],"sources":{"../node_modules/typeorm/repository/Repository.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nvar Repository = /** @class */ (function () {\n    function Repository() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    Repository.prototype.createQueryBuilder = function (alias, queryRunner) {\n        return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    };\n    Object.defineProperty(Repository.prototype, \"target\", {\n        /**\n         * Returns object that is managed by this repository.\n         * If this repository manages entity from schema,\n         * then it returns a name of that schema instead.\n         */\n        get: function () {\n            return this.metadata.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    Repository.prototype.hasId = function (entity) {\n        return this.manager.hasId(this.metadata.target, entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    Repository.prototype.getId = function (entity) {\n        return this.manager.getId(this.metadata.target, entity);\n    };\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    Repository.prototype.create = function (plainEntityLikeOrPlainEntityLikes) {\n        return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);\n    };\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    Repository.prototype.merge = function (mergeIntoEntity) {\n        var entityLikes = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            entityLikes[_i - 1] = arguments[_i];\n        }\n        return (_a = this.manager).merge.apply(_a, [this.metadata.target, mergeIntoEntity].concat(entityLikes));\n        var _a;\n    };\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    Repository.prototype.preload = function (entityLike) {\n        return this.manager.preload(this.metadata.target, entityLike);\n    };\n    /**\n     * Saves one or many given entities.\n     */\n    Repository.prototype.save = function (entityOrEntities, options) {\n        return this.manager.save(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Removes one or many given entities.\n     */\n    Repository.prototype.remove = function (entityOrEntities, options) {\n        return this.manager.remove(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    Repository.prototype.insert = function (entity, options) {\n        return this.manager.insert(this.metadata.target, entity, options);\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.update = function (criteria, partialEntity, options) {\n        return this.manager.update(this.metadata.target, criteria, partialEntity, options);\n    };\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.delete = function (criteria, options) {\n        return this.manager.delete(this.metadata.target, criteria, options);\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    Repository.prototype.count = function (optionsOrConditions) {\n        return this.manager.count(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    Repository.prototype.find = function (optionsOrConditions) {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    Repository.prototype.findAndCount = function (optionsOrConditions) {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    Repository.prototype.findByIds = function (ids, optionsOrConditions) {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    Repository.prototype.findOne = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    Repository.prototype.findOneOrFail = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOneOrFail(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    Repository.prototype.query = function (query, parameters) {\n        return this.manager.query(query, parameters);\n    };\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    Repository.prototype.clear = function () {\n        return this.manager.clear(this.metadata.target);\n    };\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    Repository.prototype.increment = function (conditions, propertyPath, value) {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    };\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    Repository.prototype.decrement = function (conditions, propertyPath, value) {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    };\n    return Repository;\n}());\nexports.Repository = Repository;\n\n//# sourceMappingURL=Repository.js.map\n"},"lineCount":184}},"hash":"0c66175bf64f1fac54cecaf29ca3bc85","cacheData":{"env":{}}}