{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./EntityMetadata","loc":{"line":3,"column":31}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityMetadata_1 = require(\"./EntityMetadata\");\n/**\n * Contains all information about some entity's relation.\n */\nvar RelationMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function RelationMetadata(options) {\n        /**\n         * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n         */\n        this.isTreeParent = false;\n        /**\n         * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n         */\n        this.isTreeChildren = false;\n        /**\n         * Indicates if this relation's column is a primary key.\n         * Can be used only for many-to-one and owner one-to-one relations.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this relation is lazily loaded.\n         */\n        this.isLazy = false;\n        /**\n         * Indicates if this relation is eagerly loaded.\n         */\n        this.isEager = false;\n        /**\n         * Indicates if persistence is enabled for the relation.\n         * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n         * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n         * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n         */\n        this.persistenceEnabled = true;\n        /**\n         * If set to true then related objects are allowed to be inserted to the database.\n         */\n        this.isCascadeInsert = false;\n        /**\n         * If set to true then related objects are allowed to be updated in the database.\n         */\n        this.isCascadeUpdate = false;\n        /**\n         * If set to true then related objects are allowed to be remove from the database.\n         */\n        this.isCascadeRemove = false;\n        /**\n         * Indicates if relation column value can be nullable or not.\n         */\n        this.isNullable = true;\n        /**\n         * Indicates if this side is an owner of this relation.\n         */\n        this.isOwning = false;\n        /**\n         * Checks if this relation's type is \"one-to-one\".\n         */\n        this.isOneToOne = false;\n        /**\n         * Checks if this relation is owner side of the \"one-to-one\" relation.\n         * Owner side means this side of relation has a join column in the table.\n         */\n        this.isOneToOneOwner = false;\n        /**\n         * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n         */\n        this.isWithJoinColumn = false;\n        /**\n         * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n         * NOT owner side means this side of relation does not have a join column in the table.\n         */\n        this.isOneToOneNotOwner = false;\n        /**\n         * Checks if this relation's type is \"one-to-many\".\n         */\n        this.isOneToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-one\".\n         */\n        this.isManyToOne = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\".\n         */\n        this.isManyToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n         * Owner side means this side of relation has a join table.\n         */\n        this.isManyToManyOwner = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n         * Not owner side means this side of relation does not have a join table.\n         */\n        this.isManyToManyNotOwner = false;\n        /**\n         * Foreign keys created for this relation.\n         */\n        this.foreignKeys = [];\n        /**\n         * Join table columns.\n         * Join columns can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be empty.\n         * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n         * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n         */\n        this.joinColumns = [];\n        /**\n         * Inverse join table columns.\n         * Inverse join columns are supported only for many-to-many relations\n         * and can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be undefined.\n         */\n        this.inverseJoinColumns = [];\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        var args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n        this.isLazy = args.isLazy || false;\n        this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        this.isPrimary = args.options.primary || false;\n        this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;\n        this.onDelete = args.options.onDelete;\n        this.isEager = args.options.eager || false;\n        this.persistenceEnabled = args.options.persistence === false ? false : true;\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        this.type = args.type instanceof Function ? args.type() : args.type;\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    RelationMetadata.prototype.getRelationIdMap = function (entity) {\n        var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;\n        var referencedColumns = joinColumns.map(function (joinColumn) { return joinColumn.referencedColumn; });\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata_1.EntityMetadata.getValueMap(entity, referencedColumns);\n    };\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    RelationMetadata.prototype.ensureRelationIdMap = function (id) {\n        if (id instanceof Object)\n            return id;\n        var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;\n        var referencedColumns = joinColumns.map(function (joinColumn) { return joinColumn.referencedColumn; });\n        if (referencedColumns.length > 1)\n            throw new Error(\"Cannot create relation id map for a single value because relation contains multiple referenced columns.\");\n        return referencedColumns[0].createValueMap(id);\n    };\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    RelationMetadata.prototype.getEntityValue = function (entity, getLazyRelationsPromiseValue) {\n        if (getLazyRelationsPromiseValue === void 0) { getLazyRelationsPromiseValue = false; }\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            var extractEmbeddedColumnValue_1 = function (propertyNames, value) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue_1(propertyNames, value[propertyName]);\n                    }\n                    return undefined;\n                }\n                return value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            var embeddedObject = extractEmbeddedColumnValue_1(propertyNames, entity);\n            if (this.isLazy) {\n                if (embeddedObject[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName];\n                return undefined;\n            }\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\n        }\n        else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName];\n                return undefined;\n            }\n            return entity[this.propertyName];\n        }\n    };\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    RelationMetadata.prototype.setEntityValue = function (entity, value) {\n        var propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var extractEmbeddedColumnValue_2 = function (embeddedMetadatas, map) {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                var embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                    extractEmbeddedColumnValue_2(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_2(this.embeddedMetadata.embeddedMetadataTree.slice(), entity);\n        }\n        else {\n            entity[propertyName] = value;\n        }\n    };\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    RelationMetadata.prototype.createValueMap = function (value) {\n        var _this = this;\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_3 = function (propertyNames, map) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue_3(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[_this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_3(propertyNames, {});\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return _a = {}, _a[this.propertyName] = value, _a;\n        }\n        var _a;\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    RelationMetadata.prototype.build = function () {\n        this.propertyPath = this.buildPropertyPath();\n    };\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    RelationMetadata.prototype.registerForeignKeys = function () {\n        var foreignKeys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            foreignKeys[_i] = arguments[_i];\n        }\n        (_a = this.foreignKeys).push.apply(_a, foreignKeys);\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n        var _a;\n    };\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    RelationMetadata.prototype.registerJunctionEntityMetadata = function (junctionEntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    };\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    RelationMetadata.prototype.buildInverseSidePropertyPath = function () {\n        if (this.givenInverseSidePropertyFactory) {\n            var ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n        }\n        else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n        }\n        else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n        return \"\";\n    };\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    RelationMetadata.prototype.buildPropertyPath = function () {\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\n    };\n    return RelationMetadata;\n}());\nexports.RelationMetadata = RelationMetadata;\n\n//# sourceMappingURL=RelationMetadata.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/metadata/RelationMetadata.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}}],"sources":{"../node_modules/typeorm/metadata/RelationMetadata.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityMetadata_1 = require(\"./EntityMetadata\");\n/**\n * Contains all information about some entity's relation.\n */\nvar RelationMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function RelationMetadata(options) {\n        /**\n         * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n         */\n        this.isTreeParent = false;\n        /**\n         * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n         */\n        this.isTreeChildren = false;\n        /**\n         * Indicates if this relation's column is a primary key.\n         * Can be used only for many-to-one and owner one-to-one relations.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this relation is lazily loaded.\n         */\n        this.isLazy = false;\n        /**\n         * Indicates if this relation is eagerly loaded.\n         */\n        this.isEager = false;\n        /**\n         * Indicates if persistence is enabled for the relation.\n         * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n         * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n         * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n         */\n        this.persistenceEnabled = true;\n        /**\n         * If set to true then related objects are allowed to be inserted to the database.\n         */\n        this.isCascadeInsert = false;\n        /**\n         * If set to true then related objects are allowed to be updated in the database.\n         */\n        this.isCascadeUpdate = false;\n        /**\n         * If set to true then related objects are allowed to be remove from the database.\n         */\n        this.isCascadeRemove = false;\n        /**\n         * Indicates if relation column value can be nullable or not.\n         */\n        this.isNullable = true;\n        /**\n         * Indicates if this side is an owner of this relation.\n         */\n        this.isOwning = false;\n        /**\n         * Checks if this relation's type is \"one-to-one\".\n         */\n        this.isOneToOne = false;\n        /**\n         * Checks if this relation is owner side of the \"one-to-one\" relation.\n         * Owner side means this side of relation has a join column in the table.\n         */\n        this.isOneToOneOwner = false;\n        /**\n         * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n         */\n        this.isWithJoinColumn = false;\n        /**\n         * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n         * NOT owner side means this side of relation does not have a join column in the table.\n         */\n        this.isOneToOneNotOwner = false;\n        /**\n         * Checks if this relation's type is \"one-to-many\".\n         */\n        this.isOneToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-one\".\n         */\n        this.isManyToOne = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\".\n         */\n        this.isManyToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n         * Owner side means this side of relation has a join table.\n         */\n        this.isManyToManyOwner = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n         * Not owner side means this side of relation does not have a join table.\n         */\n        this.isManyToManyNotOwner = false;\n        /**\n         * Foreign keys created for this relation.\n         */\n        this.foreignKeys = [];\n        /**\n         * Join table columns.\n         * Join columns can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be empty.\n         * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n         * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n         */\n        this.joinColumns = [];\n        /**\n         * Inverse join table columns.\n         * Inverse join columns are supported only for many-to-many relations\n         * and can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be undefined.\n         */\n        this.inverseJoinColumns = [];\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        var args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n        this.isLazy = args.isLazy || false;\n        this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        this.isPrimary = args.options.primary || false;\n        this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;\n        this.onDelete = args.options.onDelete;\n        this.isEager = args.options.eager || false;\n        this.persistenceEnabled = args.options.persistence === false ? false : true;\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        this.type = args.type instanceof Function ? args.type() : args.type;\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    RelationMetadata.prototype.getRelationIdMap = function (entity) {\n        var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;\n        var referencedColumns = joinColumns.map(function (joinColumn) { return joinColumn.referencedColumn; });\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata_1.EntityMetadata.getValueMap(entity, referencedColumns);\n    };\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    RelationMetadata.prototype.ensureRelationIdMap = function (id) {\n        if (id instanceof Object)\n            return id;\n        var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;\n        var referencedColumns = joinColumns.map(function (joinColumn) { return joinColumn.referencedColumn; });\n        if (referencedColumns.length > 1)\n            throw new Error(\"Cannot create relation id map for a single value because relation contains multiple referenced columns.\");\n        return referencedColumns[0].createValueMap(id);\n    };\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    RelationMetadata.prototype.getEntityValue = function (entity, getLazyRelationsPromiseValue) {\n        if (getLazyRelationsPromiseValue === void 0) { getLazyRelationsPromiseValue = false; }\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            var extractEmbeddedColumnValue_1 = function (propertyNames, value) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue_1(propertyNames, value[propertyName]);\n                    }\n                    return undefined;\n                }\n                return value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            var embeddedObject = extractEmbeddedColumnValue_1(propertyNames, entity);\n            if (this.isLazy) {\n                if (embeddedObject[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName];\n                return undefined;\n            }\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\n        }\n        else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName];\n                return undefined;\n            }\n            return entity[this.propertyName];\n        }\n    };\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    RelationMetadata.prototype.setEntityValue = function (entity, value) {\n        var propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var extractEmbeddedColumnValue_2 = function (embeddedMetadatas, map) {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                var embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                    extractEmbeddedColumnValue_2(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_2(this.embeddedMetadata.embeddedMetadataTree.slice(), entity);\n        }\n        else {\n            entity[propertyName] = value;\n        }\n    };\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    RelationMetadata.prototype.createValueMap = function (value) {\n        var _this = this;\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = this.embeddedMetadata.parentPropertyNames.slice();\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_3 = function (propertyNames, map) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue_3(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[_this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_3(propertyNames, {});\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return _a = {}, _a[this.propertyName] = value, _a;\n        }\n        var _a;\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    RelationMetadata.prototype.build = function () {\n        this.propertyPath = this.buildPropertyPath();\n    };\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    RelationMetadata.prototype.registerForeignKeys = function () {\n        var foreignKeys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            foreignKeys[_i] = arguments[_i];\n        }\n        (_a = this.foreignKeys).push.apply(_a, foreignKeys);\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n        var _a;\n    };\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    RelationMetadata.prototype.registerJunctionEntityMetadata = function (junctionEntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    };\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    RelationMetadata.prototype.buildInverseSidePropertyPath = function () {\n        if (this.givenInverseSidePropertyFactory) {\n            var ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n        }\n        else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n        }\n        else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n        return \"\";\n    };\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    RelationMetadata.prototype.buildPropertyPath = function () {\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\n    };\n    return RelationMetadata;\n}());\nexports.RelationMetadata = RelationMetadata;\n\n//# sourceMappingURL=RelationMetadata.js.map\n"},"lineCount":358}},"hash":"528012cccf9076bac053ed0f3b399c83","cacheData":{"env":{}}}