{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../driver/mongodb/MongoDriver","loc":{"line":3,"column":28}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\n/**\n * Contains all information about entity's embedded property.\n */\nvar EmbeddedMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EmbeddedMetadata(options) {\n        /**\n         * Columns inside this embed.\n         */\n        this.columns = [];\n        /**\n         * Relations inside this embed.\n         */\n        this.relations = [];\n        /**\n         * Entity listeners inside this embed.\n         */\n        this.listeners = [];\n        /**\n         * Indices applied to the embed columns.\n         */\n        this.indices = [];\n        /**\n         * Relation ids inside this embed.\n         */\n        this.relationIds = [];\n        /**\n         * Relation counts inside this embed.\n         */\n        this.relationCounts = [];\n        /**\n         * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n         */\n        this.embeddeds = [];\n        /**\n         * Indicates if this embedded is in array mode.\n         *\n         * This option works only in monogodb.\n         */\n        this.isArray = false;\n        /**\n         * Returns array of property names of current embed and all its parent embeds.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * we need to get value of \"id\" column from the post real entity object.\n         * this method will return [\"data\", \"information\", \"counters\"]\n         */\n        this.parentPropertyNames = [];\n        /**\n         * Returns array of prefixes of current embed and all its parent embeds.\n         */\n        this.parentPrefixes = [];\n        /**\n         * Returns embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.embeddedMetadataTree = [];\n        /**\n         * Embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.columnsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.relationsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.listenersFromTree = [];\n        /**\n         * Indices of this embed and all indices from its child embeds.\n         */\n        this.indicesFromTree = [];\n        /**\n         * Relation ids of this embed and all relation ids from its child embeds.\n         */\n        this.relationIdsFromTree = [];\n        /**\n         * Relation counts of this embed and all relation counts from its child embeds.\n         */\n        this.relationCountsFromTree = [];\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates a new embedded object.\n     */\n    EmbeddedMetadata.prototype.create = function () {\n        return new this.type;\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    EmbeddedMetadata.prototype.build = function (connection) {\n        this.embeddeds.forEach(function (embedded) { return embedded.build(connection); });\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        return this;\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    EmbeddedMetadata.prototype.buildPrefix = function (connection) {\n        if (connection.driver instanceof MongoDriver_1.MongoDriver)\n            return this.propertyName;\n        var prefixes = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n        if (this.customPrefix === undefined) {\n            prefixes.push(this.propertyName);\n        }\n        else if (typeof this.customPrefix === \"string\") {\n            prefixes.push(this.customPrefix);\n        }\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    };\n    EmbeddedMetadata.prototype.buildParentPropertyNames = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    };\n    EmbeddedMetadata.prototype.buildParentPrefixes = function () {\n        return [this.prefix || this.propertyName];\n    };\n    EmbeddedMetadata.prototype.buildEmbeddedMetadataTree = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    };\n    EmbeddedMetadata.prototype.buildColumnsFromTree = function () {\n        return this.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.buildColumnsFromTree()); }, this.columns);\n    };\n    EmbeddedMetadata.prototype.buildRelationsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationsFromTree()); }, this.relations);\n    };\n    EmbeddedMetadata.prototype.buildListenersFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildListenersFromTree()); }, this.listeners);\n    };\n    EmbeddedMetadata.prototype.buildIndicesFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildIndicesFromTree()); }, this.indices);\n    };\n    EmbeddedMetadata.prototype.buildRelationIdsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationIdsFromTree()); }, this.relationIds);\n    };\n    EmbeddedMetadata.prototype.buildRelationCountsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationCountsFromTree()); }, this.relationCounts);\n    };\n    return EmbeddedMetadata;\n}());\nexports.EmbeddedMetadata = EmbeddedMetadata;\n\n//# sourceMappingURL=EmbeddedMetadata.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/metadata/EmbeddedMetadata.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}}],"sources":{"../node_modules/typeorm/metadata/EmbeddedMetadata.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\n/**\n * Contains all information about entity's embedded property.\n */\nvar EmbeddedMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EmbeddedMetadata(options) {\n        /**\n         * Columns inside this embed.\n         */\n        this.columns = [];\n        /**\n         * Relations inside this embed.\n         */\n        this.relations = [];\n        /**\n         * Entity listeners inside this embed.\n         */\n        this.listeners = [];\n        /**\n         * Indices applied to the embed columns.\n         */\n        this.indices = [];\n        /**\n         * Relation ids inside this embed.\n         */\n        this.relationIds = [];\n        /**\n         * Relation counts inside this embed.\n         */\n        this.relationCounts = [];\n        /**\n         * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n         */\n        this.embeddeds = [];\n        /**\n         * Indicates if this embedded is in array mode.\n         *\n         * This option works only in monogodb.\n         */\n        this.isArray = false;\n        /**\n         * Returns array of property names of current embed and all its parent embeds.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * we need to get value of \"id\" column from the post real entity object.\n         * this method will return [\"data\", \"information\", \"counters\"]\n         */\n        this.parentPropertyNames = [];\n        /**\n         * Returns array of prefixes of current embed and all its parent embeds.\n         */\n        this.parentPrefixes = [];\n        /**\n         * Returns embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.embeddedMetadataTree = [];\n        /**\n         * Embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.columnsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.relationsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.listenersFromTree = [];\n        /**\n         * Indices of this embed and all indices from its child embeds.\n         */\n        this.indicesFromTree = [];\n        /**\n         * Relation ids of this embed and all relation ids from its child embeds.\n         */\n        this.relationIdsFromTree = [];\n        /**\n         * Relation counts of this embed and all relation counts from its child embeds.\n         */\n        this.relationCountsFromTree = [];\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates a new embedded object.\n     */\n    EmbeddedMetadata.prototype.create = function () {\n        return new this.type;\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    EmbeddedMetadata.prototype.build = function (connection) {\n        this.embeddeds.forEach(function (embedded) { return embedded.build(connection); });\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        return this;\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    EmbeddedMetadata.prototype.buildPrefix = function (connection) {\n        if (connection.driver instanceof MongoDriver_1.MongoDriver)\n            return this.propertyName;\n        var prefixes = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n        if (this.customPrefix === undefined) {\n            prefixes.push(this.propertyName);\n        }\n        else if (typeof this.customPrefix === \"string\") {\n            prefixes.push(this.customPrefix);\n        }\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    };\n    EmbeddedMetadata.prototype.buildParentPropertyNames = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    };\n    EmbeddedMetadata.prototype.buildParentPrefixes = function () {\n        return [this.prefix || this.propertyName];\n    };\n    EmbeddedMetadata.prototype.buildEmbeddedMetadataTree = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    };\n    EmbeddedMetadata.prototype.buildColumnsFromTree = function () {\n        return this.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.buildColumnsFromTree()); }, this.columns);\n    };\n    EmbeddedMetadata.prototype.buildRelationsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationsFromTree()); }, this.relations);\n    };\n    EmbeddedMetadata.prototype.buildListenersFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildListenersFromTree()); }, this.listeners);\n    };\n    EmbeddedMetadata.prototype.buildIndicesFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildIndicesFromTree()); }, this.indices);\n    };\n    EmbeddedMetadata.prototype.buildRelationIdsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationIdsFromTree()); }, this.relationIds);\n    };\n    EmbeddedMetadata.prototype.buildRelationCountsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationCountsFromTree()); }, this.relationCounts);\n    };\n    return EmbeddedMetadata;\n}());\nexports.EmbeddedMetadata = EmbeddedMetadata;\n\n//# sourceMappingURL=EmbeddedMetadata.js.map\n"},"lineCount":174}},"hash":"c25ac9cff7ac0d7e6e5ded5906b7416c","cacheData":{"env":{}}}