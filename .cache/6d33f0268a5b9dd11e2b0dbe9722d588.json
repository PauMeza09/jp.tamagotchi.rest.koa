{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./Alias","loc":{"line":11,"column":22}},{"name":"./JoinAttribute","loc":{"line":12,"column":30}},{"name":"./relation-id/RelationIdAttribute","loc":{"line":13,"column":36}},{"name":"./relation-count/RelationCountAttribute","loc":{"line":14,"column":39}}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Alias_1 = require(\"./Alias\");\nvar JoinAttribute_1 = require(\"./JoinAttribute\");\nvar RelationIdAttribute_1 = require(\"./relation-id/RelationIdAttribute\");\nvar RelationCountAttribute_1 = require(\"./relation-count/RelationCountAttribute\");\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nvar QueryExpressionMap = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function QueryExpressionMap(connection) {\n        this.connection = connection;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if QueryBuilder used to select entities and not a raw results.\n         */\n        this.queryEntity = false;\n        /**\n         * All aliases (including main alias) used in the query.\n         */\n        this.aliases = [];\n        /**\n         * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n         */\n        this.queryType = \"select\";\n        /**\n         * Data needs to be SELECT-ed.\n         */\n        this.selects = [];\n        /**\n         * Extra returning columns to be added to the returning statement if driver supports it.\n         */\n        this.extraReturningColumns = [];\n        /**\n         * Optional on conflict statement used in insertion query in postgres.\n         */\n        this.onConflict = \"\";\n        /**\n         * JOIN queries.\n         */\n        this.joinAttributes = [];\n        /**\n         * RelationId queries.\n         */\n        this.relationIdAttributes = [];\n        /**\n         * Relation count queries.\n         */\n        this.relationCountAttributes = [];\n        /**\n         * WHERE queries.\n         */\n        this.wheres = [];\n        /**\n         * HAVING queries.\n         */\n        this.havings = [];\n        /**\n         * ORDER BY queries.\n         */\n        this.orderBys = {};\n        /**\n         * GROUP BY queries.\n         */\n        this.groupBys = [];\n        /**\n         * Parameters used to be escaped in final query.\n         */\n        this.parameters = {};\n        /**\n         * Indicates if alias, table names and column names will be ecaped by driver, or not.\n         *\n         * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n         */\n        this.disableEscaping = true;\n        /**\n         * Indicates if virtual columns should be included in entity result.\n         *\n         * todo: what to do with it? is it properly used? what about persistence?\n         */\n        this.enableRelationIdValues = false;\n        /**\n         * Extra where condition appended to the end of original where conditions with AND keyword.\n         * Original condition will be wrapped into brackets.\n         */\n        this.extraAppendedAndWhereCondition = \"\";\n        /**\n         * Indicates if query builder creates a subquery.\n         */\n        this.subQuery = false;\n        /**\n         * Indicates if property names are prefixed with alias names during property replacement.\n         * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n         * but user can use them in WHERE expressions.\n         */\n        this.aliasNamePrefixingEnabled = true;\n        /**\n         * Indicates if query result cache is enabled or not.\n         */\n        this.cache = false;\n        /**\n         * Options that define QueryBuilder behaviour.\n         */\n        this.options = [];\n        /**\n         * List of columns where data should be inserted.\n         * Used in INSERT query.\n         */\n        this.insertColumns = [];\n        /**\n         * Used if user wants to update or delete a specific entities.\n         */\n        this.whereEntities = [];\n        /**\n         * Indicates if entity must be updated after insertion / updation.\n         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n         */\n        this.updateEntity = true;\n        /**\n         * Indicates if listeners and subscribers must be called before and after query execution.\n         */\n        this.callListeners = true;\n        /**\n         * Indicates if query must be wrapped into transaction.\n         */\n        this.useTransaction = false;\n        /**\n         * Extra parameters.\n         * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.\n         */\n        this.nativeParameters = {};\n    }\n    Object.defineProperty(QueryExpressionMap.prototype, \"allOrderBys\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Get all ORDER BY queries - if order by is specified by user then it uses them,\n         * otherwise it uses default entity order by if it was set.\n         */\n        get: function () {\n            var _this = this;\n            if (!Object.keys(this.orderBys).length && this.mainAlias.hasMetadata && this.options.indexOf(\"disable-global-order\") === -1) {\n                var entityOrderBy_1 = this.mainAlias.metadata.orderBy || {};\n                return Object.keys(entityOrderBy_1).reduce(function (orderBy, key) {\n                    orderBy[_this.mainAlias.name + \".\" + key] = entityOrderBy_1[key];\n                    return orderBy;\n                }, {});\n            }\n            return this.orderBys;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    QueryExpressionMap.prototype.setMainAlias = function (alias) {\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n        // set new main alias\n        this.mainAlias = alias;\n        return alias;\n    };\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    QueryExpressionMap.prototype.createAlias = function (options) {\n        var aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && options.target instanceof Function)\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n        var alias = new Alias_1.Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n        this.aliases.push(alias);\n        return alias;\n    };\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    QueryExpressionMap.prototype.findAliasByName = function (aliasName) {\n        var alias = this.aliases.find(function (alias) { return alias.name === aliasName; });\n        if (!alias)\n            throw new Error(\"\\\"\" + aliasName + \"\\\" alias was not found. Maybe you forgot to join it?\");\n        return alias;\n    };\n    QueryExpressionMap.prototype.findColumnByAliasExpression = function (aliasExpression) {\n        var _a = aliasExpression.split(\".\"), aliasName = _a[0], propertyPath = _a[1];\n        var alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    };\n    Object.defineProperty(QueryExpressionMap.prototype, \"relationMetadata\", {\n        /**\n         * Gets relation metadata of the relation this query builder works with.\n         *\n         * todo: add proper exceptions\n         */\n        get: function () {\n            if (!this.mainAlias)\n                throw new Error(\"Entity to work with is not specified!\"); // todo: better message\n            var relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n            if (!relationMetadata)\n                throw new Error(\"Relation \" + this.relationPropertyPath + \" was not found in entity \" + this.mainAlias.name); // todo: better message\n            return relationMetadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    QueryExpressionMap.prototype.clone = function () {\n        var _this = this;\n        var map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map(function (select) { return select; });\n        this.aliases.forEach(function (alias) { return map.aliases.push(new Alias_1.Alias(alias)); });\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.joinAttributes = this.joinAttributes.map(function (join) { return new JoinAttribute_1.JoinAttribute(_this.connection, _this, join); });\n        map.relationIdAttributes = this.relationIdAttributes.map(function (relationId) { return new RelationIdAttribute_1.RelationIdAttribute(_this, relationId); });\n        map.relationCountAttributes = this.relationCountAttributes.map(function (relationCount) { return new RelationCountAttribute_1.RelationCountAttribute(_this, relationCount); });\n        map.wheres = this.wheres.map(function (where) { return (__assign({}, where)); });\n        map.havings = this.havings.map(function (having) { return (__assign({}, having)); });\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map(function (groupBy) { return groupBy; });\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.lockVersion = this.lockVersion;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.nativeParameters = this.nativeParameters;\n        return map;\n    };\n    return QueryExpressionMap;\n}());\nexports.QueryExpressionMap = QueryExpressionMap;\n\n//# sourceMappingURL=QueryExpressionMap.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/query-builder/QueryExpressionMap.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/QueryExpressionMap.js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Alias_1 = require(\"./Alias\");\nvar JoinAttribute_1 = require(\"./JoinAttribute\");\nvar RelationIdAttribute_1 = require(\"./relation-id/RelationIdAttribute\");\nvar RelationCountAttribute_1 = require(\"./relation-count/RelationCountAttribute\");\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nvar QueryExpressionMap = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function QueryExpressionMap(connection) {\n        this.connection = connection;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if QueryBuilder used to select entities and not a raw results.\n         */\n        this.queryEntity = false;\n        /**\n         * All aliases (including main alias) used in the query.\n         */\n        this.aliases = [];\n        /**\n         * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n         */\n        this.queryType = \"select\";\n        /**\n         * Data needs to be SELECT-ed.\n         */\n        this.selects = [];\n        /**\n         * Extra returning columns to be added to the returning statement if driver supports it.\n         */\n        this.extraReturningColumns = [];\n        /**\n         * Optional on conflict statement used in insertion query in postgres.\n         */\n        this.onConflict = \"\";\n        /**\n         * JOIN queries.\n         */\n        this.joinAttributes = [];\n        /**\n         * RelationId queries.\n         */\n        this.relationIdAttributes = [];\n        /**\n         * Relation count queries.\n         */\n        this.relationCountAttributes = [];\n        /**\n         * WHERE queries.\n         */\n        this.wheres = [];\n        /**\n         * HAVING queries.\n         */\n        this.havings = [];\n        /**\n         * ORDER BY queries.\n         */\n        this.orderBys = {};\n        /**\n         * GROUP BY queries.\n         */\n        this.groupBys = [];\n        /**\n         * Parameters used to be escaped in final query.\n         */\n        this.parameters = {};\n        /**\n         * Indicates if alias, table names and column names will be ecaped by driver, or not.\n         *\n         * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n         */\n        this.disableEscaping = true;\n        /**\n         * Indicates if virtual columns should be included in entity result.\n         *\n         * todo: what to do with it? is it properly used? what about persistence?\n         */\n        this.enableRelationIdValues = false;\n        /**\n         * Extra where condition appended to the end of original where conditions with AND keyword.\n         * Original condition will be wrapped into brackets.\n         */\n        this.extraAppendedAndWhereCondition = \"\";\n        /**\n         * Indicates if query builder creates a subquery.\n         */\n        this.subQuery = false;\n        /**\n         * Indicates if property names are prefixed with alias names during property replacement.\n         * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n         * but user can use them in WHERE expressions.\n         */\n        this.aliasNamePrefixingEnabled = true;\n        /**\n         * Indicates if query result cache is enabled or not.\n         */\n        this.cache = false;\n        /**\n         * Options that define QueryBuilder behaviour.\n         */\n        this.options = [];\n        /**\n         * List of columns where data should be inserted.\n         * Used in INSERT query.\n         */\n        this.insertColumns = [];\n        /**\n         * Used if user wants to update or delete a specific entities.\n         */\n        this.whereEntities = [];\n        /**\n         * Indicates if entity must be updated after insertion / updation.\n         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n         */\n        this.updateEntity = true;\n        /**\n         * Indicates if listeners and subscribers must be called before and after query execution.\n         */\n        this.callListeners = true;\n        /**\n         * Indicates if query must be wrapped into transaction.\n         */\n        this.useTransaction = false;\n        /**\n         * Extra parameters.\n         * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.\n         */\n        this.nativeParameters = {};\n    }\n    Object.defineProperty(QueryExpressionMap.prototype, \"allOrderBys\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Get all ORDER BY queries - if order by is specified by user then it uses them,\n         * otherwise it uses default entity order by if it was set.\n         */\n        get: function () {\n            var _this = this;\n            if (!Object.keys(this.orderBys).length && this.mainAlias.hasMetadata && this.options.indexOf(\"disable-global-order\") === -1) {\n                var entityOrderBy_1 = this.mainAlias.metadata.orderBy || {};\n                return Object.keys(entityOrderBy_1).reduce(function (orderBy, key) {\n                    orderBy[_this.mainAlias.name + \".\" + key] = entityOrderBy_1[key];\n                    return orderBy;\n                }, {});\n            }\n            return this.orderBys;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    QueryExpressionMap.prototype.setMainAlias = function (alias) {\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n        // set new main alias\n        this.mainAlias = alias;\n        return alias;\n    };\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    QueryExpressionMap.prototype.createAlias = function (options) {\n        var aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && options.target instanceof Function)\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n        var alias = new Alias_1.Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n        this.aliases.push(alias);\n        return alias;\n    };\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    QueryExpressionMap.prototype.findAliasByName = function (aliasName) {\n        var alias = this.aliases.find(function (alias) { return alias.name === aliasName; });\n        if (!alias)\n            throw new Error(\"\\\"\" + aliasName + \"\\\" alias was not found. Maybe you forgot to join it?\");\n        return alias;\n    };\n    QueryExpressionMap.prototype.findColumnByAliasExpression = function (aliasExpression) {\n        var _a = aliasExpression.split(\".\"), aliasName = _a[0], propertyPath = _a[1];\n        var alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    };\n    Object.defineProperty(QueryExpressionMap.prototype, \"relationMetadata\", {\n        /**\n         * Gets relation metadata of the relation this query builder works with.\n         *\n         * todo: add proper exceptions\n         */\n        get: function () {\n            if (!this.mainAlias)\n                throw new Error(\"Entity to work with is not specified!\"); // todo: better message\n            var relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n            if (!relationMetadata)\n                throw new Error(\"Relation \" + this.relationPropertyPath + \" was not found in entity \" + this.mainAlias.name); // todo: better message\n            return relationMetadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    QueryExpressionMap.prototype.clone = function () {\n        var _this = this;\n        var map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map(function (select) { return select; });\n        this.aliases.forEach(function (alias) { return map.aliases.push(new Alias_1.Alias(alias)); });\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.joinAttributes = this.joinAttributes.map(function (join) { return new JoinAttribute_1.JoinAttribute(_this.connection, _this, join); });\n        map.relationIdAttributes = this.relationIdAttributes.map(function (relationId) { return new RelationIdAttribute_1.RelationIdAttribute(_this, relationId); });\n        map.relationCountAttributes = this.relationCountAttributes.map(function (relationCount) { return new RelationCountAttribute_1.RelationCountAttribute(_this, relationCount); });\n        map.wheres = this.wheres.map(function (where) { return (__assign({}, where)); });\n        map.havings = this.havings.map(function (having) { return (__assign({}, having)); });\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map(function (groupBy) { return groupBy; });\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.lockVersion = this.lockVersion;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.nativeParameters = this.nativeParameters;\n        return map;\n    };\n    return QueryExpressionMap;\n}());\nexports.QueryExpressionMap = QueryExpressionMap;\n\n//# sourceMappingURL=QueryExpressionMap.js.map\n"},"lineCount":291}},"hash":"acd53ad2e27875c393d1f2a32c8e270e","cacheData":{"env":{}}}