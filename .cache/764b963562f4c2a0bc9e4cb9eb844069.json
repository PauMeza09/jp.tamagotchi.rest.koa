{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./TreeRepository","loc":{"line":3,"column":31}},{"name":"./Repository","loc":{"line":4,"column":27}},{"name":"../driver/mongodb/MongoDriver","loc":{"line":5,"column":28}},{"name":"./MongoRepository","loc":{"line":6,"column":32}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TreeRepository_1 = require(\"./TreeRepository\");\nvar Repository_1 = require(\"./Repository\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar MongoRepository_1 = require(\"./MongoRepository\");\n/**\n * Factory used to create different types of repositories.\n */\nvar RepositoryFactory = /** @class */ (function () {\n    function RepositoryFactory() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a repository.\n     */\n    RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {\n        if (metadata.treeType) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            var repository = new TreeRepository_1.TreeRepository();\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n        }\n        else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            var repository = void 0;\n            if (manager.connection.driver instanceof MongoDriver_1.MongoDriver) {\n                repository = new MongoRepository_1.MongoRepository();\n            }\n            else {\n                repository = new Repository_1.Repository();\n            }\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n        }\n    };\n    return RepositoryFactory;\n}());\nexports.RepositoryFactory = RepositoryFactory;\n\n//# sourceMappingURL=RepositoryFactory.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/repository/RepositoryFactory.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"../node_modules/typeorm/repository/RepositoryFactory.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TreeRepository_1 = require(\"./TreeRepository\");\nvar Repository_1 = require(\"./Repository\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar MongoRepository_1 = require(\"./MongoRepository\");\n/**\n * Factory used to create different types of repositories.\n */\nvar RepositoryFactory = /** @class */ (function () {\n    function RepositoryFactory() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a repository.\n     */\n    RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {\n        if (metadata.treeType) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            var repository = new TreeRepository_1.TreeRepository();\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n        }\n        else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            var repository = void 0;\n            if (manager.connection.driver instanceof MongoDriver_1.MongoDriver) {\n                repository = new MongoRepository_1.MongoRepository();\n            }\n            else {\n                repository = new Repository_1.Repository();\n            }\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n        }\n    };\n    return RepositoryFactory;\n}());\nexports.RepositoryFactory = RepositoryFactory;\n\n//# sourceMappingURL=RepositoryFactory.js.map\n"},"lineCount":54}},"hash":"02853424ffff281f36f4915b7f48ee0a","cacheData":{"env":{}}}