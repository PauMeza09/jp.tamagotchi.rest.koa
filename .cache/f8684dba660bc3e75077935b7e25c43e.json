{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./QueryBuilder","loc":{"line":48,"column":29}},{"name":"../driver/sqlserver/SqlServerDriver","loc":{"line":49,"column":32}},{"name":"../driver/postgres/PostgresDriver","loc":{"line":50,"column":31}},{"name":"../driver/mysql/MysqlDriver","loc":{"line":51,"column":28}},{"name":"../util/RandomGenerator","loc":{"line":52,"column":32}},{"name":"./result/InsertResult","loc":{"line":53,"column":29}},{"name":"../error/ReturningStatementNotSupportedError","loc":{"line":54,"column":52}},{"name":"../error/InsertValuesMissingError","loc":{"line":55,"column":41}},{"name":"./ReturningResultsEntityUpdator","loc":{"line":56,"column":46}},{"name":"../driver/sqlite-abstract/AbstractSqliteDriver","loc":{"line":57,"column":37}},{"name":"../driver/sqljs/SqljsDriver","loc":{"line":58,"column":28}},{"name":"../subscriber/BroadcasterResult","loc":{"line":59,"column":34}},{"name":"../","loc":{"line":60,"column":17}},{"name":"../driver/oracle/OracleDriver","loc":{"line":61,"column":29}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar QueryBuilder_1 = require(\"./QueryBuilder\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar PostgresDriver_1 = require(\"../driver/postgres/PostgresDriver\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar RandomGenerator_1 = require(\"../util/RandomGenerator\");\nvar InsertResult_1 = require(\"./result/InsertResult\");\nvar ReturningStatementNotSupportedError_1 = require(\"../error/ReturningStatementNotSupportedError\");\nvar InsertValuesMissingError_1 = require(\"../error/InsertValuesMissingError\");\nvar ReturningResultsEntityUpdator_1 = require(\"./ReturningResultsEntityUpdator\");\nvar AbstractSqliteDriver_1 = require(\"../driver/sqlite-abstract/AbstractSqliteDriver\");\nvar SqljsDriver_1 = require(\"../driver/sqljs/SqljsDriver\");\nvar BroadcasterResult_1 = require(\"../subscriber/BroadcasterResult\");\nvar _1 = require(\"../\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar InsertQueryBuilder = /** @class */ (function (_super) {\n    __extends(InsertQueryBuilder, _super);\n    function InsertQueryBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    InsertQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createInsertExpression();\n        return sql.trim();\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    InsertQueryBuilder.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var queryRunner, transactionStartedByUs, valueSets, broadcastResult_1, returningResultsEntityUpdator, _a, sql, parameters, insertResult, _b, broadcastResult_2, error_1, rollbackError_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 13, 18, 23]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _c.sent();\n                        transactionStartedByUs = true;\n                        _c.label = 3;\n                    case 3:\n                        valueSets = this.getValueSets();\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 5];\n                        broadcastResult_1 = new BroadcasterResult_1.BroadcasterResult();\n                        valueSets.forEach(function (valueSet) {\n                            queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult_1, _this.expressionMap.mainAlias.metadata, valueSet);\n                        });\n                        if (!(broadcastResult_1.promises.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, Promise.all(broadcastResult_1.promises)];\n                    case 4:\n                        _c.sent();\n                        _c.label = 5;\n                    case 5:\n                        returningResultsEntityUpdator = new ReturningResultsEntityUpdator_1.ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n                        if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {\n                            this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();\n                        }\n                        _a = this.getQueryAndParameters(), sql = _a[0], parameters = _a[1];\n                        insertResult = new InsertResult_1.InsertResult();\n                        // console.time(\".query execution by database\");\n                        _b = insertResult;\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 6:\n                        // console.time(\".query execution by database\");\n                        _b.raw = _c.sent();\n                        if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 8];\n                        // console.time(\".updating entity\");\n                        return [4 /*yield*/, returningResultsEntityUpdator.insert(insertResult, valueSets)];\n                    case 7:\n                        // console.time(\".updating entity\");\n                        _c.sent();\n                        _c.label = 8;\n                    case 8:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 10];\n                        broadcastResult_2 = new BroadcasterResult_1.BroadcasterResult();\n                        valueSets.forEach(function (valueSet) {\n                            queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult_2, _this.expressionMap.mainAlias.metadata, valueSet);\n                        });\n                        if (!(broadcastResult_2.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcastResult_2.promises)];\n                    case 9:\n                        _c.sent();\n                        _c.label = 10;\n                    case 10:\n                        if (!transactionStartedByUs) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: \n                    // console.timeEnd(\".commit\");\n                    return [2 /*return*/, insertResult];\n                    case 13:\n                        error_1 = _c.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 17];\n                        _c.label = 14;\n                    case 14:\n                        _c.trys.push([14, 16, , 17]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 15:\n                        _c.sent();\n                        return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _c.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 20];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 19:\n                        _c.sent();\n                        _c.label = 20;\n                    case 20:\n                        if (!(this.connection.driver instanceof SqljsDriver_1.SqljsDriver && !queryRunner.isTransactionActive)) return [3 /*break*/, 22];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 21:\n                        _c.sent();\n                        _c.label = 22;\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    InsertQueryBuilder.prototype.into = function (entityTarget, columns) {\n        entityTarget = entityTarget instanceof _1.EntitySchema ? entityTarget.options.name : entityTarget;\n        var mainAlias = this.createFromAlias(entityTarget);\n        this.expressionMap.setMainAlias(mainAlias);\n        this.expressionMap.insertColumns = columns || [];\n        return this;\n    };\n    /**\n     * Values needs to be inserted into table.\n     */\n    InsertQueryBuilder.prototype.values = function (values) {\n        this.expressionMap.valuesSet = values;\n        return this;\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    InsertQueryBuilder.prototype.output = function (output) {\n        return this.returning(output);\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    InsertQueryBuilder.prototype.returning = function (returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError_1.ReturningStatementNotSupportedError();\n        this.expressionMap.returning = returning;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    InsertQueryBuilder.prototype.updateEntity = function (enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    };\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres.\n     */\n    InsertQueryBuilder.prototype.onConflict = function (statement) {\n        this.expressionMap.onConflict = statement;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    InsertQueryBuilder.prototype.createInsertExpression = function () {\n        var tableName = this.getTableName(this.getMainTableName());\n        var valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        var returningExpression = this.createReturningExpression();\n        var columnsExpression = this.createColumnNamesExpression();\n        // generate INSERT query\n        var query = \"INSERT INTO \" + tableName;\n        // add columns expression\n        if (columnsExpression) {\n            query += \"(\" + columnsExpression + \")\";\n        }\n        else {\n            if (!valuesExpression && this.connection.driver instanceof MysqlDriver_1.MysqlDriver) // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\";\n        }\n        // add OUTPUT expression\n        if (returningExpression && this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n            query += \" OUTPUT \" + returningExpression;\n        }\n        // add VALUES expression\n        if (valuesExpression) {\n            query += \" VALUES \" + valuesExpression;\n        }\n        else {\n            if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver) { // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\";\n            }\n            else {\n                query += \" DEFAULT VALUES\";\n            }\n        }\n        if (this.expressionMap.onConflict && this.connection.driver instanceof PostgresDriver_1.PostgresDriver) {\n            query += \" ON CONFLICT \" + this.expressionMap.onConflict;\n        }\n        // add RETURNING expression\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver_1.PostgresDriver || this.connection.driver instanceof OracleDriver_1.OracleDriver)) {\n            query += \" RETURNING \" + returningExpression;\n        }\n        return query;\n    };\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    InsertQueryBuilder.prototype.getInsertedColumns = function () {\n        var _this = this;\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            return [];\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            // if user specified list of columns he wants to insert to, then we filter only them\n            if (_this.expressionMap.insertColumns.length)\n                return _this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\n            // if user did not specified such list then return all columns except auto-increment one\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n            if (column.isGenerated && column.generationStrategy === \"increment\" && !(_this.connection.driver instanceof OracleDriver_1.OracleDriver))\n                return false;\n            return true;\n        });\n    };\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    InsertQueryBuilder.prototype.createColumnNamesExpression = function () {\n        var _this = this;\n        var columns = this.getInsertedColumns();\n        if (columns.length > 0)\n            return columns.map(function (column) { return _this.escape(column.databaseName); }).join(\", \");\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (!this.expressionMap.mainAlias.hasMetadata && !this.expressionMap.insertColumns.length) {\n            var valueSets = this.getValueSets();\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0]).map(function (columnName) { return _this.escape(columnName); }).join(\", \");\n        }\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns.map(function (columnName) { return _this.escape(columnName); }).join(\", \");\n    };\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    InsertQueryBuilder.prototype.createValuesExpression = function () {\n        var _this = this;\n        var valueSets = this.getValueSets();\n        var columns = this.getInsertedColumns();\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            var expression_1 = \"\";\n            var parametersCount_1 = Object.keys(this.expressionMap.nativeParameters).length;\n            valueSets.forEach(function (valueSet, valueSetIndex) {\n                columns.forEach(function (column, columnIndex) {\n                    if (columnIndex === 0) {\n                        expression_1 += \"(\";\n                    }\n                    var paramName = \"i\" + valueSetIndex + \"_\" + column.databaseName;\n                    // extract real value from the entity\n                    var value = column.getEntityValue(valueSet);\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n                    // make sure our value is normalized by a driver\n                    value = _this.connection.driver.preparePersistentValue(value, column);\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    if (column.isVersion) {\n                        expression_1 += \"1\";\n                        // } else if (column.isNestedSetLeft) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                        //\n                        // } else if (column.isNestedSetRight) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                    }\n                    else if (column.isDiscriminator) {\n                        _this.expressionMap.nativeParameters[\"discriminator_value\"] = _this.expressionMap.mainAlias.metadata.discriminatorValue;\n                        expression_1 += _this.connection.driver.createParameter(\"discriminator_value\", parametersCount_1);\n                        parametersCount_1++;\n                        // return \"1\";\n                        // for create and update dates we insert current date\n                        // no, we don't do it because this constant is already in \"default\" value of the column\n                        // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                        // } else if (column.isCreateDate || column.isUpdateDate) {\n                        //     return \"CURRENT_TIMESTAMP\";\n                        // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    }\n                    else if (column.isGenerated && column.generationStrategy === \"uuid\" && !_this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\n                        var paramName_1 = \"uuid_\" + column.databaseName + valueSetIndex;\n                        value = RandomGenerator_1.RandomGenerator.uuid4();\n                        _this.expressionMap.nativeParameters[paramName_1] = value;\n                        expression_1 += _this.connection.driver.createParameter(paramName_1, parametersCount_1);\n                        parametersCount_1++;\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if (_this.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (column.default !== undefined) { // try to use default defined in the column\n                                expression_1 += _this.connection.driver.normalizeDefault(column);\n                            }\n                            else {\n                                expression_1 += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n                            }\n                        }\n                        else {\n                            expression_1 += \"DEFAULT\";\n                        }\n                        // support for SQL expressions in queries\n                    }\n                    else if (value instanceof Function) {\n                        expression_1 += value();\n                        // just any other regular value\n                    }\n                    else {\n                        if (_this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver)\n                            value = _this.connection.driver.parametrizeValue(column, value);\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n                        _this.expressionMap.nativeParameters[paramName] = value;\n                        if (_this.connection.driver instanceof MysqlDriver_1.MysqlDriver && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression_1 += \"GeomFromText(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \")\";\n                        }\n                        else {\n                            expression_1 += _this.connection.driver.createParameter(paramName, parametersCount_1);\n                        }\n                        parametersCount_1++;\n                    }\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            expression_1 += \")\";\n                        }\n                        else {\n                            expression_1 += \"), \";\n                        }\n                    }\n                    else {\n                        expression_1 += \", \";\n                    }\n                });\n            });\n            if (expression_1 === \"()\")\n                return \"\";\n            return expression_1;\n        }\n        else { // for tables without metadata\n            // get values needs to be inserted\n            return valueSets.map(function (valueSet, insertionIndex) {\n                var columnValues = Object.keys(valueSet).map(function (columnName) {\n                    var paramName = \"i\" + insertionIndex + \"_\" + columnName;\n                    var value = valueSet[columnName];\n                    // support for SQL expressions in queries\n                    if (value instanceof Function) {\n                        return value();\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if (_this.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver) {\n                            return \"NULL\";\n                        }\n                        else {\n                            return \"DEFAULT\";\n                        }\n                        // just any other regular value\n                    }\n                    else {\n                        _this.expressionMap.nativeParameters[paramName] = value;\n                        return _this.connection.driver.createParameter(paramName, Object.keys(_this.expressionMap.nativeParameters).length - 1);\n                    }\n                }).join(\", \").trim();\n                return columnValues ? \"(\" + columnValues + \")\" : \"\";\n            }).join(\", \");\n        }\n    };\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    InsertQueryBuilder.prototype.getValueSets = function () {\n        if (this.expressionMap.valuesSet instanceof Array && this.expressionMap.valuesSet.length > 0)\n            return this.expressionMap.valuesSet;\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n        throw new InsertValuesMissingError_1.InsertValuesMissingError();\n    };\n    return InsertQueryBuilder;\n}(QueryBuilder_1.QueryBuilder));\nexports.InsertQueryBuilder = InsertQueryBuilder;\n\n//# sourceMappingURL=InsertQueryBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/query-builder/InsertQueryBuilder.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/InsertQueryBuilder.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar QueryBuilder_1 = require(\"./QueryBuilder\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar PostgresDriver_1 = require(\"../driver/postgres/PostgresDriver\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar RandomGenerator_1 = require(\"../util/RandomGenerator\");\nvar InsertResult_1 = require(\"./result/InsertResult\");\nvar ReturningStatementNotSupportedError_1 = require(\"../error/ReturningStatementNotSupportedError\");\nvar InsertValuesMissingError_1 = require(\"../error/InsertValuesMissingError\");\nvar ReturningResultsEntityUpdator_1 = require(\"./ReturningResultsEntityUpdator\");\nvar AbstractSqliteDriver_1 = require(\"../driver/sqlite-abstract/AbstractSqliteDriver\");\nvar SqljsDriver_1 = require(\"../driver/sqljs/SqljsDriver\");\nvar BroadcasterResult_1 = require(\"../subscriber/BroadcasterResult\");\nvar _1 = require(\"../\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar InsertQueryBuilder = /** @class */ (function (_super) {\n    __extends(InsertQueryBuilder, _super);\n    function InsertQueryBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    InsertQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createInsertExpression();\n        return sql.trim();\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    InsertQueryBuilder.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var queryRunner, transactionStartedByUs, valueSets, broadcastResult_1, returningResultsEntityUpdator, _a, sql, parameters, insertResult, _b, broadcastResult_2, error_1, rollbackError_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 13, 18, 23]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _c.sent();\n                        transactionStartedByUs = true;\n                        _c.label = 3;\n                    case 3:\n                        valueSets = this.getValueSets();\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 5];\n                        broadcastResult_1 = new BroadcasterResult_1.BroadcasterResult();\n                        valueSets.forEach(function (valueSet) {\n                            queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult_1, _this.expressionMap.mainAlias.metadata, valueSet);\n                        });\n                        if (!(broadcastResult_1.promises.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, Promise.all(broadcastResult_1.promises)];\n                    case 4:\n                        _c.sent();\n                        _c.label = 5;\n                    case 5:\n                        returningResultsEntityUpdator = new ReturningResultsEntityUpdator_1.ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n                        if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {\n                            this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();\n                        }\n                        _a = this.getQueryAndParameters(), sql = _a[0], parameters = _a[1];\n                        insertResult = new InsertResult_1.InsertResult();\n                        // console.time(\".query execution by database\");\n                        _b = insertResult;\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 6:\n                        // console.time(\".query execution by database\");\n                        _b.raw = _c.sent();\n                        if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 8];\n                        // console.time(\".updating entity\");\n                        return [4 /*yield*/, returningResultsEntityUpdator.insert(insertResult, valueSets)];\n                    case 7:\n                        // console.time(\".updating entity\");\n                        _c.sent();\n                        _c.label = 8;\n                    case 8:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 10];\n                        broadcastResult_2 = new BroadcasterResult_1.BroadcasterResult();\n                        valueSets.forEach(function (valueSet) {\n                            queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult_2, _this.expressionMap.mainAlias.metadata, valueSet);\n                        });\n                        if (!(broadcastResult_2.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcastResult_2.promises)];\n                    case 9:\n                        _c.sent();\n                        _c.label = 10;\n                    case 10:\n                        if (!transactionStartedByUs) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: \n                    // console.timeEnd(\".commit\");\n                    return [2 /*return*/, insertResult];\n                    case 13:\n                        error_1 = _c.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 17];\n                        _c.label = 14;\n                    case 14:\n                        _c.trys.push([14, 16, , 17]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 15:\n                        _c.sent();\n                        return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _c.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 20];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 19:\n                        _c.sent();\n                        _c.label = 20;\n                    case 20:\n                        if (!(this.connection.driver instanceof SqljsDriver_1.SqljsDriver && !queryRunner.isTransactionActive)) return [3 /*break*/, 22];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 21:\n                        _c.sent();\n                        _c.label = 22;\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    InsertQueryBuilder.prototype.into = function (entityTarget, columns) {\n        entityTarget = entityTarget instanceof _1.EntitySchema ? entityTarget.options.name : entityTarget;\n        var mainAlias = this.createFromAlias(entityTarget);\n        this.expressionMap.setMainAlias(mainAlias);\n        this.expressionMap.insertColumns = columns || [];\n        return this;\n    };\n    /**\n     * Values needs to be inserted into table.\n     */\n    InsertQueryBuilder.prototype.values = function (values) {\n        this.expressionMap.valuesSet = values;\n        return this;\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    InsertQueryBuilder.prototype.output = function (output) {\n        return this.returning(output);\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    InsertQueryBuilder.prototype.returning = function (returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError_1.ReturningStatementNotSupportedError();\n        this.expressionMap.returning = returning;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    InsertQueryBuilder.prototype.updateEntity = function (enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    };\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres.\n     */\n    InsertQueryBuilder.prototype.onConflict = function (statement) {\n        this.expressionMap.onConflict = statement;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    InsertQueryBuilder.prototype.createInsertExpression = function () {\n        var tableName = this.getTableName(this.getMainTableName());\n        var valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        var returningExpression = this.createReturningExpression();\n        var columnsExpression = this.createColumnNamesExpression();\n        // generate INSERT query\n        var query = \"INSERT INTO \" + tableName;\n        // add columns expression\n        if (columnsExpression) {\n            query += \"(\" + columnsExpression + \")\";\n        }\n        else {\n            if (!valuesExpression && this.connection.driver instanceof MysqlDriver_1.MysqlDriver) // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\";\n        }\n        // add OUTPUT expression\n        if (returningExpression && this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n            query += \" OUTPUT \" + returningExpression;\n        }\n        // add VALUES expression\n        if (valuesExpression) {\n            query += \" VALUES \" + valuesExpression;\n        }\n        else {\n            if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver) { // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\";\n            }\n            else {\n                query += \" DEFAULT VALUES\";\n            }\n        }\n        if (this.expressionMap.onConflict && this.connection.driver instanceof PostgresDriver_1.PostgresDriver) {\n            query += \" ON CONFLICT \" + this.expressionMap.onConflict;\n        }\n        // add RETURNING expression\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver_1.PostgresDriver || this.connection.driver instanceof OracleDriver_1.OracleDriver)) {\n            query += \" RETURNING \" + returningExpression;\n        }\n        return query;\n    };\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    InsertQueryBuilder.prototype.getInsertedColumns = function () {\n        var _this = this;\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            return [];\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            // if user specified list of columns he wants to insert to, then we filter only them\n            if (_this.expressionMap.insertColumns.length)\n                return _this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\n            // if user did not specified such list then return all columns except auto-increment one\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n            if (column.isGenerated && column.generationStrategy === \"increment\" && !(_this.connection.driver instanceof OracleDriver_1.OracleDriver))\n                return false;\n            return true;\n        });\n    };\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    InsertQueryBuilder.prototype.createColumnNamesExpression = function () {\n        var _this = this;\n        var columns = this.getInsertedColumns();\n        if (columns.length > 0)\n            return columns.map(function (column) { return _this.escape(column.databaseName); }).join(\", \");\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (!this.expressionMap.mainAlias.hasMetadata && !this.expressionMap.insertColumns.length) {\n            var valueSets = this.getValueSets();\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0]).map(function (columnName) { return _this.escape(columnName); }).join(\", \");\n        }\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns.map(function (columnName) { return _this.escape(columnName); }).join(\", \");\n    };\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    InsertQueryBuilder.prototype.createValuesExpression = function () {\n        var _this = this;\n        var valueSets = this.getValueSets();\n        var columns = this.getInsertedColumns();\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            var expression_1 = \"\";\n            var parametersCount_1 = Object.keys(this.expressionMap.nativeParameters).length;\n            valueSets.forEach(function (valueSet, valueSetIndex) {\n                columns.forEach(function (column, columnIndex) {\n                    if (columnIndex === 0) {\n                        expression_1 += \"(\";\n                    }\n                    var paramName = \"i\" + valueSetIndex + \"_\" + column.databaseName;\n                    // extract real value from the entity\n                    var value = column.getEntityValue(valueSet);\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n                    // make sure our value is normalized by a driver\n                    value = _this.connection.driver.preparePersistentValue(value, column);\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    if (column.isVersion) {\n                        expression_1 += \"1\";\n                        // } else if (column.isNestedSetLeft) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                        //\n                        // } else if (column.isNestedSetRight) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                    }\n                    else if (column.isDiscriminator) {\n                        _this.expressionMap.nativeParameters[\"discriminator_value\"] = _this.expressionMap.mainAlias.metadata.discriminatorValue;\n                        expression_1 += _this.connection.driver.createParameter(\"discriminator_value\", parametersCount_1);\n                        parametersCount_1++;\n                        // return \"1\";\n                        // for create and update dates we insert current date\n                        // no, we don't do it because this constant is already in \"default\" value of the column\n                        // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                        // } else if (column.isCreateDate || column.isUpdateDate) {\n                        //     return \"CURRENT_TIMESTAMP\";\n                        // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    }\n                    else if (column.isGenerated && column.generationStrategy === \"uuid\" && !_this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\n                        var paramName_1 = \"uuid_\" + column.databaseName + valueSetIndex;\n                        value = RandomGenerator_1.RandomGenerator.uuid4();\n                        _this.expressionMap.nativeParameters[paramName_1] = value;\n                        expression_1 += _this.connection.driver.createParameter(paramName_1, parametersCount_1);\n                        parametersCount_1++;\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if (_this.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (column.default !== undefined) { // try to use default defined in the column\n                                expression_1 += _this.connection.driver.normalizeDefault(column);\n                            }\n                            else {\n                                expression_1 += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n                            }\n                        }\n                        else {\n                            expression_1 += \"DEFAULT\";\n                        }\n                        // support for SQL expressions in queries\n                    }\n                    else if (value instanceof Function) {\n                        expression_1 += value();\n                        // just any other regular value\n                    }\n                    else {\n                        if (_this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver)\n                            value = _this.connection.driver.parametrizeValue(column, value);\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n                        _this.expressionMap.nativeParameters[paramName] = value;\n                        if (_this.connection.driver instanceof MysqlDriver_1.MysqlDriver && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression_1 += \"GeomFromText(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \")\";\n                        }\n                        else {\n                            expression_1 += _this.connection.driver.createParameter(paramName, parametersCount_1);\n                        }\n                        parametersCount_1++;\n                    }\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            expression_1 += \")\";\n                        }\n                        else {\n                            expression_1 += \"), \";\n                        }\n                    }\n                    else {\n                        expression_1 += \", \";\n                    }\n                });\n            });\n            if (expression_1 === \"()\")\n                return \"\";\n            return expression_1;\n        }\n        else { // for tables without metadata\n            // get values needs to be inserted\n            return valueSets.map(function (valueSet, insertionIndex) {\n                var columnValues = Object.keys(valueSet).map(function (columnName) {\n                    var paramName = \"i\" + insertionIndex + \"_\" + columnName;\n                    var value = valueSet[columnName];\n                    // support for SQL expressions in queries\n                    if (value instanceof Function) {\n                        return value();\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if (_this.connection.driver instanceof AbstractSqliteDriver_1.AbstractSqliteDriver) {\n                            return \"NULL\";\n                        }\n                        else {\n                            return \"DEFAULT\";\n                        }\n                        // just any other regular value\n                    }\n                    else {\n                        _this.expressionMap.nativeParameters[paramName] = value;\n                        return _this.connection.driver.createParameter(paramName, Object.keys(_this.expressionMap.nativeParameters).length - 1);\n                    }\n                }).join(\", \").trim();\n                return columnValues ? \"(\" + columnValues + \")\" : \"\";\n            }).join(\", \");\n        }\n    };\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    InsertQueryBuilder.prototype.getValueSets = function () {\n        if (this.expressionMap.valuesSet instanceof Array && this.expressionMap.valuesSet.length > 0)\n            return this.expressionMap.valuesSet;\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n        throw new InsertValuesMissingError_1.InsertValuesMissingError();\n    };\n    return InsertQueryBuilder;\n}(QueryBuilder_1.QueryBuilder));\nexports.InsertQueryBuilder = InsertQueryBuilder;\n\n//# sourceMappingURL=InsertQueryBuilder.js.map\n"},"lineCount":475}},"hash":"d54ff5f80826827110df03b3810446e5","cacheData":{"env":{}}}