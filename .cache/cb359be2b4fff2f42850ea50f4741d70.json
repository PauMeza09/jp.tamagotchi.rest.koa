{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../metadata/ColumnMetadata","loc":{"line":3,"column":31}},{"name":"../metadata/UniqueMetadata","loc":{"line":4,"column":31}},{"name":"../metadata/ForeignKeyMetadata","loc":{"line":5,"column":35}},{"name":"../driver/oracle/OracleDriver","loc":{"line":6,"column":29}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ColumnMetadata_1 = require(\"../metadata/ColumnMetadata\");\nvar UniqueMetadata_1 = require(\"../metadata/UniqueMetadata\");\nvar ForeignKeyMetadata_1 = require(\"../metadata/ForeignKeyMetadata\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go thought each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nvar RelationJoinColumnBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationJoinColumnBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    RelationJoinColumnBuilder.prototype.build = function (joinColumns, relation) {\n        var referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        if (!referencedColumns.length)\n            return { foreignKey: undefined, uniqueConstraint: undefined }; // this case is possible only for one-to-one non owning side\n        var columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        var foreignKey = new ForeignKeyMetadata_1.ForeignKeyMetadata({\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns: columns,\n            referencedColumns: referencedColumns,\n            onDelete: relation.onDelete,\n        });\n        // Oracle does not allow both primary and unique constraints on the same column\n        if (this.connection.driver instanceof OracleDriver_1.OracleDriver && columns.every(function (column) { return column.isPrimary; }))\n            return { foreignKey: foreignKey, uniqueConstraint: undefined };\n        if (referencedColumns.length > 0 && relation.isOneToOne) {\n            var uniqueConstraint = new UniqueMetadata_1.UniqueMetadata({\n                entityMetadata: relation.entityMetadata,\n                columns: foreignKey.columns,\n                args: {\n                    name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(function (c) { return c.databaseName; })),\n                    target: relation.entityMetadata.target,\n                }\n            });\n            uniqueConstraint.build(this.connection.namingStrategy);\n            return { foreignKey: foreignKey, uniqueConstraint: uniqueConstraint };\n        }\n        return { foreignKey: foreignKey, uniqueConstraint: undefined };\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    RelationJoinColumnBuilder.prototype.collectReferencedColumns = function (joinColumns, relation) {\n        var hasAnyReferencedColumnName = joinColumns.find(function (joinColumnArgs) { return !!joinColumnArgs.referencedColumnName; });\n        var manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        var hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n        }\n        else { // cases with referenced columns defined\n            return joinColumns.map(function (joinColumn) {\n                var referencedColumn = relation.inverseEntityMetadata.ownColumns.find(function (column) { return column.propertyName === joinColumn.referencedColumnName; }); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new Error(\"Referenced column \" + joinColumn.referencedColumnName + \" was not found in entity \" + relation.inverseEntityMetadata.name);\n                return referencedColumn;\n            });\n        }\n    };\n    /**\n     * Collects columns from the given join column args.\n     */\n    RelationJoinColumnBuilder.prototype.collectColumns = function (joinColumns, relation, referencedColumns) {\n        var _this = this;\n        return referencedColumns.map(function (referencedColumn) {\n            // in the case if relation has join column with only name set we need this check\n            var joinColumnMetadataArg = joinColumns.find(function (joinColumn) {\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumn.name;\n            });\n            var joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : _this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n            var relationalColumn = relation.entityMetadata.ownColumns.find(function (column) { return column.databaseName === joinColumnName; });\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata_1.ColumnMetadata({\n                    connection: _this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length: referencedColumn.length,\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable\n                        }\n                    }\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(_this.connection);\n            return relationalColumn;\n        });\n    };\n    return RelationJoinColumnBuilder;\n}());\nexports.RelationJoinColumnBuilder = RelationJoinColumnBuilder;\n\n//# sourceMappingURL=RelationJoinColumnBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}}],"sources":{"../node_modules/typeorm/metadata-builder/RelationJoinColumnBuilder.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ColumnMetadata_1 = require(\"../metadata/ColumnMetadata\");\nvar UniqueMetadata_1 = require(\"../metadata/UniqueMetadata\");\nvar ForeignKeyMetadata_1 = require(\"../metadata/ForeignKeyMetadata\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go thought each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nvar RelationJoinColumnBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationJoinColumnBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    RelationJoinColumnBuilder.prototype.build = function (joinColumns, relation) {\n        var referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        if (!referencedColumns.length)\n            return { foreignKey: undefined, uniqueConstraint: undefined }; // this case is possible only for one-to-one non owning side\n        var columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        var foreignKey = new ForeignKeyMetadata_1.ForeignKeyMetadata({\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns: columns,\n            referencedColumns: referencedColumns,\n            onDelete: relation.onDelete,\n        });\n        // Oracle does not allow both primary and unique constraints on the same column\n        if (this.connection.driver instanceof OracleDriver_1.OracleDriver && columns.every(function (column) { return column.isPrimary; }))\n            return { foreignKey: foreignKey, uniqueConstraint: undefined };\n        if (referencedColumns.length > 0 && relation.isOneToOne) {\n            var uniqueConstraint = new UniqueMetadata_1.UniqueMetadata({\n                entityMetadata: relation.entityMetadata,\n                columns: foreignKey.columns,\n                args: {\n                    name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(function (c) { return c.databaseName; })),\n                    target: relation.entityMetadata.target,\n                }\n            });\n            uniqueConstraint.build(this.connection.namingStrategy);\n            return { foreignKey: foreignKey, uniqueConstraint: uniqueConstraint };\n        }\n        return { foreignKey: foreignKey, uniqueConstraint: undefined };\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    RelationJoinColumnBuilder.prototype.collectReferencedColumns = function (joinColumns, relation) {\n        var hasAnyReferencedColumnName = joinColumns.find(function (joinColumnArgs) { return !!joinColumnArgs.referencedColumnName; });\n        var manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        var hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n        }\n        else { // cases with referenced columns defined\n            return joinColumns.map(function (joinColumn) {\n                var referencedColumn = relation.inverseEntityMetadata.ownColumns.find(function (column) { return column.propertyName === joinColumn.referencedColumnName; }); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new Error(\"Referenced column \" + joinColumn.referencedColumnName + \" was not found in entity \" + relation.inverseEntityMetadata.name);\n                return referencedColumn;\n            });\n        }\n    };\n    /**\n     * Collects columns from the given join column args.\n     */\n    RelationJoinColumnBuilder.prototype.collectColumns = function (joinColumns, relation, referencedColumns) {\n        var _this = this;\n        return referencedColumns.map(function (referencedColumn) {\n            // in the case if relation has join column with only name set we need this check\n            var joinColumnMetadataArg = joinColumns.find(function (joinColumn) {\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumn.name;\n            });\n            var joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : _this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n            var relationalColumn = relation.entityMetadata.ownColumns.find(function (column) { return column.databaseName === joinColumnName; });\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata_1.ColumnMetadata({\n                    connection: _this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length: referencedColumn.length,\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable\n                        }\n                    }\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(_this.connection);\n            return relationalColumn;\n        });\n    };\n    return RelationJoinColumnBuilder;\n}());\nexports.RelationJoinColumnBuilder = RelationJoinColumnBuilder;\n\n//# sourceMappingURL=RelationJoinColumnBuilder.js.map\n"},"lineCount":154}},"hash":"44a580147984793a44179ef88622d8af","cacheData":{"env":{}}}