{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RelationCountLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountLoader(connection, queryRunner, relationCountAttributes) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.relationCountAttributes = relationCountAttributes;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationCountLoader.prototype.load = function (rawEntities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                promises = this.relationCountAttributes.map(function (relationCountAttr) { return __awaiter(_this, void 0, void 0, function () {\n                    var relation, inverseRelation, referenceColumnName_1, inverseSideTable, inverseSideTableName, inverseSideTableAlias, inverseSidePropertyName, referenceColumnValues, qb, _a, joinTableColumnName_1, inverseJoinColumnName, firstJunctionColumn, secondJunctionColumn, referenceColumnValues, junctionAlias, inverseSideTableName, inverseSideTableAlias, junctionTableName, condition, qb, _b;\n                    return __generator(this, function (_c) {\n                        switch (_c.label) {\n                            case 0:\n                                if (!relationCountAttr.relation.isOneToMany) return [3 /*break*/, 2];\n                                relation = relationCountAttr.relation;\n                                inverseRelation = relation.inverseRelation;\n                                referenceColumnName_1 = inverseRelation.joinColumns[0].referencedColumn.propertyName;\n                                inverseSideTable = relation.inverseEntityMetadata.target;\n                                inverseSideTableName = relation.inverseEntityMetadata.tableName;\n                                inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                                inverseSidePropertyName = inverseRelation.propertyName;\n                                referenceColumnValues = rawEntities\n                                    .map(function (rawEntity) { return rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName_1]; })\n                                    .filter(function (value) { return !!value; });\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (referenceColumnValues.length === 0)\n                                    return [2 /*return*/, { relationCountAttribute: relationCountAttr, results: [] }];\n                                qb = this.connection.createQueryBuilder(this.queryRunner);\n                                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                                    .addSelect(\"COUNT(*)\", \"cnt\")\n                                    .from(inverseSideTable, inverseSideTableAlias)\n                                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:...ids)\")\n                                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\n                                    .setParameter(\"ids\", referenceColumnValues);\n                                // apply condition (custom query builder factory)\n                                if (relationCountAttr.queryBuilderFactory)\n                                    relationCountAttr.queryBuilderFactory(qb);\n                                _a = {\n                                    relationCountAttribute: relationCountAttr\n                                };\n                                return [4 /*yield*/, qb.getRawMany()];\n                            case 1: return [2 /*return*/, (_a.results = _c.sent(),\n                                    _a)];\n                            case 2:\n                                inverseJoinColumnName = void 0;\n                                firstJunctionColumn = void 0;\n                                secondJunctionColumn = void 0;\n                                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\n                                    joinTableColumnName_1 = relationCountAttr.relation.joinColumns[0].referencedColumn.databaseName;\n                                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn.databaseName;\n                                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];\n                                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];\n                                }\n                                else {\n                                    joinTableColumnName_1 = relationCountAttr.relation.inverseRelation.inverseJoinColumns[0].referencedColumn.databaseName;\n                                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;\n                                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];\n                                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];\n                                }\n                                referenceColumnValues = rawEntities\n                                    .map(function (rawEntity) { return rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName_1]; })\n                                    .filter(function (value) { return value; });\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (referenceColumnValues.length === 0)\n                                    return [2 /*return*/, { relationCountAttribute: relationCountAttr, results: [] }];\n                                junctionAlias = relationCountAttr.junctionAlias;\n                                inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                                inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                                junctionTableName = relationCountAttr.relation.junctionEntityMetadata.tableName;\n                                condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues + \")\" +\n                                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\n                                qb = this.connection.createQueryBuilder(this.queryRunner);\n                                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(inverseJoinColumnName) + \")\", \"cnt\")\n                                    .from(inverseSideTableName, inverseSideTableAlias)\n                                    .innerJoin(junctionTableName, junctionAlias, condition)\n                                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\n                                // apply condition (custom query builder factory)\n                                if (relationCountAttr.queryBuilderFactory)\n                                    relationCountAttr.queryBuilderFactory(qb);\n                                _b = {\n                                    relationCountAttribute: relationCountAttr\n                                };\n                                return [4 /*yield*/, qb.getRawMany()];\n                            case 3: return [2 /*return*/, (_b.results = _c.sent(),\n                                    _b)];\n                        }\n                    });\n                }); });\n                return [2 /*return*/, Promise.all(promises)];\n            });\n        });\n    };\n    return RelationCountLoader;\n}());\nexports.RelationCountLoader = RelationCountLoader;\n\n//# sourceMappingURL=RelationCountLoader.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/relation-count/RelationCountLoader.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RelationCountLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountLoader(connection, queryRunner, relationCountAttributes) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.relationCountAttributes = relationCountAttributes;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationCountLoader.prototype.load = function (rawEntities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var promises;\n            return __generator(this, function (_a) {\n                promises = this.relationCountAttributes.map(function (relationCountAttr) { return __awaiter(_this, void 0, void 0, function () {\n                    var relation, inverseRelation, referenceColumnName_1, inverseSideTable, inverseSideTableName, inverseSideTableAlias, inverseSidePropertyName, referenceColumnValues, qb, _a, joinTableColumnName_1, inverseJoinColumnName, firstJunctionColumn, secondJunctionColumn, referenceColumnValues, junctionAlias, inverseSideTableName, inverseSideTableAlias, junctionTableName, condition, qb, _b;\n                    return __generator(this, function (_c) {\n                        switch (_c.label) {\n                            case 0:\n                                if (!relationCountAttr.relation.isOneToMany) return [3 /*break*/, 2];\n                                relation = relationCountAttr.relation;\n                                inverseRelation = relation.inverseRelation;\n                                referenceColumnName_1 = inverseRelation.joinColumns[0].referencedColumn.propertyName;\n                                inverseSideTable = relation.inverseEntityMetadata.target;\n                                inverseSideTableName = relation.inverseEntityMetadata.tableName;\n                                inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                                inverseSidePropertyName = inverseRelation.propertyName;\n                                referenceColumnValues = rawEntities\n                                    .map(function (rawEntity) { return rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName_1]; })\n                                    .filter(function (value) { return !!value; });\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (referenceColumnValues.length === 0)\n                                    return [2 /*return*/, { relationCountAttribute: relationCountAttr, results: [] }];\n                                qb = this.connection.createQueryBuilder(this.queryRunner);\n                                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                                    .addSelect(\"COUNT(*)\", \"cnt\")\n                                    .from(inverseSideTable, inverseSideTableAlias)\n                                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:...ids)\")\n                                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\n                                    .setParameter(\"ids\", referenceColumnValues);\n                                // apply condition (custom query builder factory)\n                                if (relationCountAttr.queryBuilderFactory)\n                                    relationCountAttr.queryBuilderFactory(qb);\n                                _a = {\n                                    relationCountAttribute: relationCountAttr\n                                };\n                                return [4 /*yield*/, qb.getRawMany()];\n                            case 1: return [2 /*return*/, (_a.results = _c.sent(),\n                                    _a)];\n                            case 2:\n                                inverseJoinColumnName = void 0;\n                                firstJunctionColumn = void 0;\n                                secondJunctionColumn = void 0;\n                                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\n                                    joinTableColumnName_1 = relationCountAttr.relation.joinColumns[0].referencedColumn.databaseName;\n                                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn.databaseName;\n                                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];\n                                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];\n                                }\n                                else {\n                                    joinTableColumnName_1 = relationCountAttr.relation.inverseRelation.inverseJoinColumns[0].referencedColumn.databaseName;\n                                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;\n                                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];\n                                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];\n                                }\n                                referenceColumnValues = rawEntities\n                                    .map(function (rawEntity) { return rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName_1]; })\n                                    .filter(function (value) { return value; });\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (referenceColumnValues.length === 0)\n                                    return [2 /*return*/, { relationCountAttribute: relationCountAttr, results: [] }];\n                                junctionAlias = relationCountAttr.junctionAlias;\n                                inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                                inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                                junctionTableName = relationCountAttr.relation.junctionEntityMetadata.tableName;\n                                condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues + \")\" +\n                                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\n                                qb = this.connection.createQueryBuilder(this.queryRunner);\n                                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(inverseJoinColumnName) + \")\", \"cnt\")\n                                    .from(inverseSideTableName, inverseSideTableAlias)\n                                    .innerJoin(junctionTableName, junctionAlias, condition)\n                                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\n                                // apply condition (custom query builder factory)\n                                if (relationCountAttr.queryBuilderFactory)\n                                    relationCountAttr.queryBuilderFactory(qb);\n                                _b = {\n                                    relationCountAttribute: relationCountAttr\n                                };\n                                return [4 /*yield*/, qb.getRawMany()];\n                            case 3: return [2 /*return*/, (_b.results = _c.sent(),\n                                    _b)];\n                        }\n                    });\n                }); });\n                return [2 /*return*/, Promise.all(promises)];\n            });\n        });\n    };\n    return RelationCountLoader;\n}());\nexports.RelationCountLoader = RelationCountLoader;\n\n//# sourceMappingURL=RelationCountLoader.js.map\n"},"lineCount":147}},"hash":"4d4a4b1844ca119c3eb7578be3f9123a","cacheData":{"env":{}}}