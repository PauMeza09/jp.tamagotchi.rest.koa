{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../util/OrmUtils","loc":{"line":38,"column":25}},{"name":"../driver/oracle/OracleDriver","loc":{"line":39,"column":29}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../util/OrmUtils\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nvar ReturningResultsEntityUpdator = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ReturningResultsEntityUpdator(queryRunner, expressionMap) {\n        this.queryRunner = queryRunner;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    ReturningResultsEntityUpdator.prototype.update = function (updateResult, entities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        return [4 /*yield*/, Promise.all(entities.map(function (entity, entityIndex) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var result, returningColumns, updationColumns, entityId, loadedReturningColumns;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!this.queryRunner.connection.driver.isReturningSqlSupported()) return [3 /*break*/, 1];\n                                            if (this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver && updateResult.raw instanceof Array && this.expressionMap.extraReturningColumns.length > 0) {\n                                                updateResult.raw = updateResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {\n                                                    newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                                                    return newRaw;\n                                                }, {});\n                                            }\n                                            result = updateResult.raw instanceof Array ? updateResult.raw[entityIndex] : updateResult.raw;\n                                            returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n                                            if (returningColumns) {\n                                                this.queryRunner.manager.merge(metadata.target, entity, returningColumns);\n                                                updateResult.generatedMaps.push(returningColumns);\n                                            }\n                                            return [3 /*break*/, 3];\n                                        case 1:\n                                            updationColumns = this.getUpdationReturningColumns();\n                                            if (!(updationColumns.length > 0)) return [3 /*break*/, 3];\n                                            entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n                                            if (!entityId)\n                                                throw new Error(\"Cannot update entity because entity id is not set in the entity.\");\n                                            return [4 /*yield*/, this.queryRunner.manager\n                                                    .createQueryBuilder()\n                                                    .select(metadata.primaryColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .addSelect(this.getUpdationReturningColumns().map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .from(metadata.target, metadata.targetName)\n                                                    .where(entityId)\n                                                    .getOne()];\n                                        case 2:\n                                            loadedReturningColumns = _a.sent();\n                                            if (loadedReturningColumns) {\n                                                this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);\n                                                updateResult.generatedMaps.push(loadedReturningColumns);\n                                            }\n                                            _a.label = 3;\n                                        case 3: return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    ReturningResultsEntityUpdator.prototype.insert = function (insertResult, entities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata, insertionColumns, generatedMaps;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        insertionColumns = this.getInsertionReturningColumns();\n                        generatedMaps = entities.map(function (entity, entityIndex) {\n                            if (_this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver && insertResult.raw instanceof Array && _this.expressionMap.extraReturningColumns.length > 0) {\n                                insertResult.raw = insertResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {\n                                    newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                                    return newRaw;\n                                }, {});\n                            }\n                            // get all values generated by a database for us\n                            var result = insertResult.raw instanceof Array ? insertResult.raw[entityIndex] : insertResult.raw;\n                            var generatedMap = _this.queryRunner.connection.driver.createGeneratedMap(metadata, result) || {};\n                            // if database does not support uuid generation we need to get uuid values\n                            // generated by orm and set them to the generatedMap\n                            if (_this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {\n                                metadata.generatedColumns.forEach(function (generatedColumn) {\n                                    if (generatedColumn.generationStrategy === \"uuid\") {\n                                        // uuid can be defined by user in a model, that's why first we get it\n                                        var uuid = generatedColumn.getEntityValue(entity);\n                                        if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value\n                                            uuid = _this.expressionMap.nativeParameters[\"uuid_\" + generatedColumn.databaseName + entityIndex];\n                                        OrmUtils_1.OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));\n                                    }\n                                });\n                            }\n                            _this.queryRunner.manager.merge(metadata.target, entity, generatedMap); // todo: this should not be here, but problem with below line\n                            return generatedMap;\n                        });\n                        if (!(this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(entities.map(function (entity, entityIndex) { return __awaiter(_this, void 0, void 0, function () {\n                                var entityId, returningResult;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            entityId = metadata.getEntityIdMap(entity);\n                                            return [4 /*yield*/, this.queryRunner.manager\n                                                    .createQueryBuilder()\n                                                    .select(metadata.primaryColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .addSelect(insertionColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .from(metadata.target, metadata.targetName)\n                                                    .where(entityId)\n                                                    .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                                                    .getOne()];\n                                        case 1:\n                                            returningResult = _a.sent();\n                                            this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult);\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        entities.forEach(function (entity, entityIndex) {\n                            var entityId = metadata.getEntityIdMap(entity);\n                            insertResult.identifiers.push(entityId);\n                            insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n                            _this.queryRunner.manager.merge(_this.expressionMap.mainAlias.metadata.target, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Columns we need to be returned from the database when we insert entity.\n     */\n    ReturningResultsEntityUpdator.prototype.getInsertionReturningColumns = function () {\n        // for databases which support returning statement we need to return extra columns like id\n        // for other databases we don't need to return id column since its returned by a driver already\n        var needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported();\n        // filter out the columns of which we need database inserted values to update our entity\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            return column.default !== undefined ||\n                (needToCheckGenerated && column.isGenerated) ||\n                column.isCreateDate ||\n                column.isUpdateDate ||\n                column.isVersion;\n        });\n    };\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    ReturningResultsEntityUpdator.prototype.getUpdationReturningColumns = function () {\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            return column.isUpdateDate || column.isVersion;\n        });\n    };\n    return ReturningResultsEntityUpdator;\n}());\nexports.ReturningResultsEntityUpdator = ReturningResultsEntityUpdator;\n\n//# sourceMappingURL=ReturningResultsEntityUpdator.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/ReturningResultsEntityUpdator.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../util/OrmUtils\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nvar ReturningResultsEntityUpdator = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ReturningResultsEntityUpdator(queryRunner, expressionMap) {\n        this.queryRunner = queryRunner;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    ReturningResultsEntityUpdator.prototype.update = function (updateResult, entities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        return [4 /*yield*/, Promise.all(entities.map(function (entity, entityIndex) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var result, returningColumns, updationColumns, entityId, loadedReturningColumns;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!this.queryRunner.connection.driver.isReturningSqlSupported()) return [3 /*break*/, 1];\n                                            if (this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver && updateResult.raw instanceof Array && this.expressionMap.extraReturningColumns.length > 0) {\n                                                updateResult.raw = updateResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {\n                                                    newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                                                    return newRaw;\n                                                }, {});\n                                            }\n                                            result = updateResult.raw instanceof Array ? updateResult.raw[entityIndex] : updateResult.raw;\n                                            returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n                                            if (returningColumns) {\n                                                this.queryRunner.manager.merge(metadata.target, entity, returningColumns);\n                                                updateResult.generatedMaps.push(returningColumns);\n                                            }\n                                            return [3 /*break*/, 3];\n                                        case 1:\n                                            updationColumns = this.getUpdationReturningColumns();\n                                            if (!(updationColumns.length > 0)) return [3 /*break*/, 3];\n                                            entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n                                            if (!entityId)\n                                                throw new Error(\"Cannot update entity because entity id is not set in the entity.\");\n                                            return [4 /*yield*/, this.queryRunner.manager\n                                                    .createQueryBuilder()\n                                                    .select(metadata.primaryColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .addSelect(this.getUpdationReturningColumns().map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .from(metadata.target, metadata.targetName)\n                                                    .where(entityId)\n                                                    .getOne()];\n                                        case 2:\n                                            loadedReturningColumns = _a.sent();\n                                            if (loadedReturningColumns) {\n                                                this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);\n                                                updateResult.generatedMaps.push(loadedReturningColumns);\n                                            }\n                                            _a.label = 3;\n                                        case 3: return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    ReturningResultsEntityUpdator.prototype.insert = function (insertResult, entities) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata, insertionColumns, generatedMaps;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        insertionColumns = this.getInsertionReturningColumns();\n                        generatedMaps = entities.map(function (entity, entityIndex) {\n                            if (_this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver && insertResult.raw instanceof Array && _this.expressionMap.extraReturningColumns.length > 0) {\n                                insertResult.raw = insertResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {\n                                    newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                                    return newRaw;\n                                }, {});\n                            }\n                            // get all values generated by a database for us\n                            var result = insertResult.raw instanceof Array ? insertResult.raw[entityIndex] : insertResult.raw;\n                            var generatedMap = _this.queryRunner.connection.driver.createGeneratedMap(metadata, result) || {};\n                            // if database does not support uuid generation we need to get uuid values\n                            // generated by orm and set them to the generatedMap\n                            if (_this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {\n                                metadata.generatedColumns.forEach(function (generatedColumn) {\n                                    if (generatedColumn.generationStrategy === \"uuid\") {\n                                        // uuid can be defined by user in a model, that's why first we get it\n                                        var uuid = generatedColumn.getEntityValue(entity);\n                                        if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value\n                                            uuid = _this.expressionMap.nativeParameters[\"uuid_\" + generatedColumn.databaseName + entityIndex];\n                                        OrmUtils_1.OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));\n                                    }\n                                });\n                            }\n                            _this.queryRunner.manager.merge(metadata.target, entity, generatedMap); // todo: this should not be here, but problem with below line\n                            return generatedMap;\n                        });\n                        if (!(this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(entities.map(function (entity, entityIndex) { return __awaiter(_this, void 0, void 0, function () {\n                                var entityId, returningResult;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            entityId = metadata.getEntityIdMap(entity);\n                                            return [4 /*yield*/, this.queryRunner.manager\n                                                    .createQueryBuilder()\n                                                    .select(metadata.primaryColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .addSelect(insertionColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .from(metadata.target, metadata.targetName)\n                                                    .where(entityId)\n                                                    .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                                                    .getOne()];\n                                        case 1:\n                                            returningResult = _a.sent();\n                                            this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult);\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        entities.forEach(function (entity, entityIndex) {\n                            var entityId = metadata.getEntityIdMap(entity);\n                            insertResult.identifiers.push(entityId);\n                            insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n                            _this.queryRunner.manager.merge(_this.expressionMap.mainAlias.metadata.target, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Columns we need to be returned from the database when we insert entity.\n     */\n    ReturningResultsEntityUpdator.prototype.getInsertionReturningColumns = function () {\n        // for databases which support returning statement we need to return extra columns like id\n        // for other databases we don't need to return id column since its returned by a driver already\n        var needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported();\n        // filter out the columns of which we need database inserted values to update our entity\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            return column.default !== undefined ||\n                (needToCheckGenerated && column.isGenerated) ||\n                column.isCreateDate ||\n                column.isUpdateDate ||\n                column.isVersion;\n        });\n    };\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    ReturningResultsEntityUpdator.prototype.getUpdationReturningColumns = function () {\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            return column.isUpdateDate || column.isVersion;\n        });\n    };\n    return ReturningResultsEntityUpdator;\n}());\nexports.ReturningResultsEntityUpdator = ReturningResultsEntityUpdator;\n\n//# sourceMappingURL=ReturningResultsEntityUpdator.js.map\n"},"lineCount":220}},"hash":"21a6066c5a85f8ea07212d0953c3b479","cacheData":{"env":{}}}