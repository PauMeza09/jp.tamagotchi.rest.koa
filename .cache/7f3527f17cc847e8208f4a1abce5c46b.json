{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../error/EntityNotFoundError","loc":{"line":38,"column":36}},{"name":"../error/QueryRunnerProviderAlreadyReleasedError","loc":{"line":39,"column":56}},{"name":"../error/NoNeedToReleaseEntityManagerError","loc":{"line":40,"column":50}},{"name":"../repository/TreeRepository","loc":{"line":41,"column":31}},{"name":"../repository/Repository","loc":{"line":42,"column":27}},{"name":"../find-options/FindOptionsUtils","loc":{"line":43,"column":33}},{"name":"../query-builder/transformer/PlainObjectToNewEntityTransformer","loc":{"line":44,"column":50}},{"name":"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer","loc":{"line":45,"column":55}},{"name":"../error/CustomRepositoryNotFoundError","loc":{"line":46,"column":46}},{"name":"../index","loc":{"line":47,"column":22}},{"name":"../repository/AbstractRepository","loc":{"line":48,"column":35}},{"name":"../error/CustomRepositoryCannotInheritRepositoryError","loc":{"line":49,"column":61}},{"name":"../driver/mongodb/MongoDriver","loc":{"line":50,"column":28}},{"name":"../error/RepositoryNotFoundError","loc":{"line":51,"column":40}},{"name":"../error/RepositoryNotTreeError","loc":{"line":52,"column":39}},{"name":"../repository/RepositoryFactory","loc":{"line":53,"column":34}},{"name":"../error/TreeRepositoryNotSupportedError","loc":{"line":54,"column":48}},{"name":"../persistence/EntityPersistExecutor","loc":{"line":55,"column":38}},{"name":"../driver/oracle/OracleDriver","loc":{"line":56,"column":29}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityNotFoundError_1 = require(\"../error/EntityNotFoundError\");\nvar QueryRunnerProviderAlreadyReleasedError_1 = require(\"../error/QueryRunnerProviderAlreadyReleasedError\");\nvar NoNeedToReleaseEntityManagerError_1 = require(\"../error/NoNeedToReleaseEntityManagerError\");\nvar TreeRepository_1 = require(\"../repository/TreeRepository\");\nvar Repository_1 = require(\"../repository/Repository\");\nvar FindOptionsUtils_1 = require(\"../find-options/FindOptionsUtils\");\nvar PlainObjectToNewEntityTransformer_1 = require(\"../query-builder/transformer/PlainObjectToNewEntityTransformer\");\nvar PlainObjectToDatabaseEntityTransformer_1 = require(\"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\");\nvar CustomRepositoryNotFoundError_1 = require(\"../error/CustomRepositoryNotFoundError\");\nvar index_1 = require(\"../index\");\nvar AbstractRepository_1 = require(\"../repository/AbstractRepository\");\nvar CustomRepositoryCannotInheritRepositoryError_1 = require(\"../error/CustomRepositoryCannotInheritRepositoryError\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar RepositoryNotFoundError_1 = require(\"../error/RepositoryNotFoundError\");\nvar RepositoryNotTreeError_1 = require(\"../error/RepositoryNotTreeError\");\nvar RepositoryFactory_1 = require(\"../repository/RepositoryFactory\");\nvar TreeRepositoryNotSupportedError_1 = require(\"../error/TreeRepositoryNotSupportedError\");\nvar EntityPersistExecutor_1 = require(\"../persistence/EntityPersistExecutor\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nvar EntityManager = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityManager(connection, queryRunner) {\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Once created and then reused by en repositories.\n         */\n        this.repositories = [];\n        /**\n         * Plain to object transformer used in create and merge operations.\n         */\n        this.plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer_1.PlainObjectToNewEntityTransformer();\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            Object.assign(this.queryRunner, { manager: this });\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    EntityManager.prototype.transaction = function (runInTransaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var queryRunner, result, err_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.connection.driver instanceof MongoDriver_1.MongoDriver)\n                            throw new Error(\"Transactions aren't supported by MongoDB.\");\n                        if (this.queryRunner && this.queryRunner.isReleased)\n                            throw new QueryRunnerProviderAlreadyReleasedError_1.QueryRunnerProviderAlreadyReleasedError();\n                        if (this.queryRunner && this.queryRunner.isTransactionActive)\n                            throw new Error(\"Cannot start transaction because its already started\");\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, 10, 13]);\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, runInTransaction(queryRunner.manager)];\n                    case 3:\n                        result = _a.sent();\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/, result];\n                    case 5:\n                        err_1 = _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        _a.trys.push([6, 8, , 9]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 9];\n                    case 8:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 9];\n                    case 9: throw err_1;\n                    case 10:\n                        if (!!this.queryRunner) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 11:\n                        _a.sent();\n                        _a.label = 12;\n                    case 12: return [7 /*endfinally*/];\n                    case 13: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    EntityManager.prototype.query = function (query, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.connection.query(query, parameters, this.queryRunner)];\n            });\n        });\n    };\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);\n        }\n        else {\n            return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);\n        }\n    };\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    EntityManager.prototype.hasId = function (targetOrEntity, maybeEntity) {\n        var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        var metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    EntityManager.prototype.getId = function (targetOrEntity, maybeEntity) {\n        var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        var metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    };\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    EntityManager.prototype.create = function (entityClass, plainObjectOrObjects) {\n        var _this = this;\n        var metadata = this.connection.getMetadata(entityClass);\n        if (!plainObjectOrObjects)\n            return metadata.create(this.queryRunner);\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(function (plainEntityLike) { return _this.create(entityClass, plainEntityLike); });\n        var mergeIntoEntity = metadata.create(this.queryRunner);\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n        return mergeIntoEntity;\n    };\n    /**\n     * Merges two entities into one new entity.\n     */\n    EntityManager.prototype.merge = function (entityClass, mergeIntoEntity) {\n        var _this = this;\n        var entityLikes = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            entityLikes[_i - 2] = arguments[_i];\n        }\n        var metadata = this.connection.getMetadata(entityClass);\n        entityLikes.forEach(function (object) { return _this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata); });\n        return mergeIntoEntity;\n    };\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    EntityManager.prototype.preload = function (entityClass, entityLike) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, plainObjectToDatabaseEntityTransformer, transformedEntity;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer_1.PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n                        return [4 /*yield*/, plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata)];\n                    case 1:\n                        transformedEntity = _a.sent();\n                        if (transformedEntity)\n                            return [2 /*return*/, this.merge(entityClass, transformedEntity, entityLike)];\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Saves a given entity in the database.\n     */\n    EntityManager.prototype.save = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof index_1.EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        if (target instanceof index_1.EntitySchema)\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Removes a given entity from the database.\n     */\n    EntityManager.prototype.remove = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    EntityManager.prototype.insert = function (target, entity, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.connection.driver instanceof OracleDriver_1.OracleDriver && entity instanceof Array)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(entity.map(function (entity) { return _this.insert(target, entity); }))];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.reduce(function (mergedResult, result) { return Object.assign(mergedResult, result); }, {})];\n                    case 2: return [2 /*return*/, this.createQueryBuilder()\n                            .insert()\n                            .into(target)\n                            .values(entity)\n                            .execute()];\n                }\n            });\n        });\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.update = function (target, criteria, partialEntity, options) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (criteria instanceof Array && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the update method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            criteria instanceof Array) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.delete = function (targetOrEntity, criteria, options) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (criteria instanceof Array && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the delete method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            criteria instanceof Array) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    EntityManager.prototype.count = function (entityClass, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                return [2 /*return*/, FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount()];\n            });\n        });\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    EntityManager.prototype.find = function (entityClass, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                if (!FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany()];\n            });\n        });\n    };\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    EntityManager.prototype.findAndCount = function (entityClass, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                if (!FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount()];\n            });\n        });\n    };\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    EntityManager.prototype.findByIds = function (entityClass, ids, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                // if no ids passed, no need to execute a query - just return an empty array of values\n                if (!ids.length)\n                    return [2 /*return*/, Promise.resolve([])];\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n                if (!FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, qb.andWhereInIds(ids).getMany()];\n            });\n        });\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    EntityManager.prototype.findOne = function (entityClass, idOrOptionsOrConditions, maybeOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var findOptions, options, metadata, alias, qb;\n            return __generator(this, function (_a) {\n                findOptions = undefined;\n                if (FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {\n                    findOptions = idOrOptionsOrConditions;\n                }\n                else if (maybeOptions && FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(maybeOptions)) {\n                    findOptions = maybeOptions;\n                }\n                options = undefined;\n                if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))\n                    options = idOrOptionsOrConditions;\n                metadata = this.connection.getMetadata(entityClass);\n                alias = metadata.name;\n                if (findOptions && findOptions.join) {\n                    alias = findOptions.join.alias;\n                }\n                else if (maybeOptions && FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {\n                    alias = maybeOptions.join.alias;\n                }\n                qb = this.createQueryBuilder(entityClass, alias);\n                if (!findOptions || findOptions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n                if (findOptions)\n                    FindOptionsUtils_1.FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n                if (options) {\n                    qb.where(options);\n                }\n                else if (typeof idOrOptionsOrConditions === \"string\" || typeof idOrOptionsOrConditions === \"number\" || idOrOptionsOrConditions instanceof Date) {\n                    qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));\n                }\n                return [2 /*return*/, qb.getOne()];\n            });\n        });\n    };\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    EntityManager.prototype.findOneOrFail = function (entityClass, idOrOptionsOrConditions, maybeOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.findOne(entityClass, idOrOptionsOrConditions, maybeOptions).then(function (value) {\n                        if (value === undefined) {\n                            return Promise.reject(new EntityNotFoundError_1.EntityNotFoundError(entityClass, idOrOptionsOrConditions));\n                        }\n                        return Promise.resolve(value);\n                    })];\n            });\n        });\n    };\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    EntityManager.prototype.clear = function (entityClass) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, queryRunner;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 6]);\n                        return [4 /*yield*/, queryRunner.clearTable(metadata.tablePath)];\n                    case 2: return [2 /*return*/, _a.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!!this.queryRunner) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [7 /*endfinally*/];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    EntityManager.prototype.increment = function (entityClass, conditions, propertyPath, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata, column, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        column = metadata.findColumnWithPropertyPath(propertyPath);\n                        if (!column)\n                            throw new Error(\"Column \" + propertyPath + \" was not found in \" + metadata.targetName + \" entity.\");\n                        return [4 /*yield*/, this\n                                .createQueryBuilder(entityClass, \"entity\")\n                                .update(entityClass)\n                                .set((_a = {},\n                                _a[propertyPath] = function () { return _this.connection.driver.escape(column.databaseName) + \" + \" + Number(value); },\n                                _a))\n                                .where(conditions)\n                                .execute()];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    EntityManager.prototype.decrement = function (entityClass, conditions, propertyPath, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata, column, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        column = metadata.findColumnWithPropertyPath(propertyPath);\n                        if (!column)\n                            throw new Error(\"Column \" + propertyPath + \" was not found in \" + metadata.targetName + \" entity.\");\n                        return [4 /*yield*/, this\n                                .createQueryBuilder(entityClass, \"entity\")\n                                .update(entityClass)\n                                .set((_a = {},\n                                _a[propertyPath] = function () { return _this.connection.driver.escape(column.databaseName) + \" - \" + Number(value); },\n                                _a))\n                                .where(conditions)\n                                .execute()];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    EntityManager.prototype.getRepository = function (target) {\n        // throw exception if there is no repository with this target registered\n        if (!this.connection.hasMetadata(target))\n            throw new RepositoryNotFoundError_1.RepositoryNotFoundError(this.connection.name, target);\n        // find already created repository instance and return it if found\n        var metadata = this.connection.getMetadata(target);\n        var repository = this.repositories.find(function (repository) { return repository.metadata === metadata; });\n        if (repository)\n            return repository;\n        // if repository was not found then create it, store its instance and return it\n        var newRepository = new RepositoryFactory_1.RepositoryFactory().create(this, metadata, this.queryRunner);\n        this.repositories.push(newRepository);\n        return newRepository;\n    };\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    EntityManager.prototype.getTreeRepository = function (target) {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError_1.TreeRepositoryNotSupportedError(this.connection.driver);\n        // check if repository is real tree repository\n        var repository = this.getRepository(target);\n        if (!(repository instanceof TreeRepository_1.TreeRepository))\n            throw new RepositoryNotTreeError_1.RepositoryNotTreeError(target);\n        return repository;\n    };\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    EntityManager.prototype.getMongoRepository = function (target) {\n        return this.connection.getMongoRepository(target);\n    };\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    EntityManager.prototype.getCustomRepository = function (customRepository) {\n        var entityRepositoryMetadataArgs = index_1.getMetadataArgsStorage().entityRepositories.find(function (repository) {\n            return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError_1.CustomRepositoryNotFoundError(customRepository);\n        var entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n        var entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata);\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository_1.AbstractRepository) {\n            if (!entityRepositoryInstance[\"manager\"])\n                entityRepositoryInstance[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository_1.Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError_1.CustomRepositoryCannotInheritRepositoryError(customRepository);\n            entityRepositoryInstance[\"manager\"] = this;\n            entityRepositoryInstance[\"metadata\"] = entityMetadata;\n        }\n        return entityRepositoryInstance;\n    };\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    EntityManager.prototype.release = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this.queryRunner)\n                    throw new NoNeedToReleaseEntityManagerError_1.NoNeedToReleaseEntityManagerError();\n                return [2 /*return*/, this.queryRunner.release()];\n            });\n        });\n    };\n    return EntityManager;\n}());\nexports.EntityManager = EntityManager;\n\n//# sourceMappingURL=EntityManager.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/typeorm/entity-manager/EntityManager.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}}],"sources":{"../node_modules/typeorm/entity-manager/EntityManager.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityNotFoundError_1 = require(\"../error/EntityNotFoundError\");\nvar QueryRunnerProviderAlreadyReleasedError_1 = require(\"../error/QueryRunnerProviderAlreadyReleasedError\");\nvar NoNeedToReleaseEntityManagerError_1 = require(\"../error/NoNeedToReleaseEntityManagerError\");\nvar TreeRepository_1 = require(\"../repository/TreeRepository\");\nvar Repository_1 = require(\"../repository/Repository\");\nvar FindOptionsUtils_1 = require(\"../find-options/FindOptionsUtils\");\nvar PlainObjectToNewEntityTransformer_1 = require(\"../query-builder/transformer/PlainObjectToNewEntityTransformer\");\nvar PlainObjectToDatabaseEntityTransformer_1 = require(\"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\");\nvar CustomRepositoryNotFoundError_1 = require(\"../error/CustomRepositoryNotFoundError\");\nvar index_1 = require(\"../index\");\nvar AbstractRepository_1 = require(\"../repository/AbstractRepository\");\nvar CustomRepositoryCannotInheritRepositoryError_1 = require(\"../error/CustomRepositoryCannotInheritRepositoryError\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar RepositoryNotFoundError_1 = require(\"../error/RepositoryNotFoundError\");\nvar RepositoryNotTreeError_1 = require(\"../error/RepositoryNotTreeError\");\nvar RepositoryFactory_1 = require(\"../repository/RepositoryFactory\");\nvar TreeRepositoryNotSupportedError_1 = require(\"../error/TreeRepositoryNotSupportedError\");\nvar EntityPersistExecutor_1 = require(\"../persistence/EntityPersistExecutor\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nvar EntityManager = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityManager(connection, queryRunner) {\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Once created and then reused by en repositories.\n         */\n        this.repositories = [];\n        /**\n         * Plain to object transformer used in create and merge operations.\n         */\n        this.plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer_1.PlainObjectToNewEntityTransformer();\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            Object.assign(this.queryRunner, { manager: this });\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    EntityManager.prototype.transaction = function (runInTransaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var queryRunner, result, err_1, rollbackError_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.connection.driver instanceof MongoDriver_1.MongoDriver)\n                            throw new Error(\"Transactions aren't supported by MongoDB.\");\n                        if (this.queryRunner && this.queryRunner.isReleased)\n                            throw new QueryRunnerProviderAlreadyReleasedError_1.QueryRunnerProviderAlreadyReleasedError();\n                        if (this.queryRunner && this.queryRunner.isTransactionActive)\n                            throw new Error(\"Cannot start transaction because its already started\");\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 5, 10, 13]);\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, runInTransaction(queryRunner.manager)];\n                    case 3:\n                        result = _a.sent();\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/, result];\n                    case 5:\n                        err_1 = _a.sent();\n                        _a.label = 6;\n                    case 6:\n                        _a.trys.push([6, 8, , 9]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 9];\n                    case 8:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 9];\n                    case 9: throw err_1;\n                    case 10:\n                        if (!!this.queryRunner) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 11:\n                        _a.sent();\n                        _a.label = 12;\n                    case 12: return [7 /*endfinally*/];\n                    case 13: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    EntityManager.prototype.query = function (query, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.connection.query(query, parameters, this.queryRunner)];\n            });\n        });\n    };\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);\n        }\n        else {\n            return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);\n        }\n    };\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    EntityManager.prototype.hasId = function (targetOrEntity, maybeEntity) {\n        var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        var metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    EntityManager.prototype.getId = function (targetOrEntity, maybeEntity) {\n        var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        var metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    };\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    EntityManager.prototype.create = function (entityClass, plainObjectOrObjects) {\n        var _this = this;\n        var metadata = this.connection.getMetadata(entityClass);\n        if (!plainObjectOrObjects)\n            return metadata.create(this.queryRunner);\n        if (plainObjectOrObjects instanceof Array)\n            return plainObjectOrObjects.map(function (plainEntityLike) { return _this.create(entityClass, plainEntityLike); });\n        var mergeIntoEntity = metadata.create(this.queryRunner);\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n        return mergeIntoEntity;\n    };\n    /**\n     * Merges two entities into one new entity.\n     */\n    EntityManager.prototype.merge = function (entityClass, mergeIntoEntity) {\n        var _this = this;\n        var entityLikes = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            entityLikes[_i - 2] = arguments[_i];\n        }\n        var metadata = this.connection.getMetadata(entityClass);\n        entityLikes.forEach(function (object) { return _this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata); });\n        return mergeIntoEntity;\n    };\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    EntityManager.prototype.preload = function (entityClass, entityLike) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, plainObjectToDatabaseEntityTransformer, transformedEntity;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer_1.PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n                        return [4 /*yield*/, plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata)];\n                    case 1:\n                        transformedEntity = _a.sent();\n                        if (transformedEntity)\n                            return [2 /*return*/, this.merge(entityClass, transformedEntity, entityLike)];\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Saves a given entity in the database.\n     */\n    EntityManager.prototype.save = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof index_1.EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        if (target instanceof index_1.EntitySchema)\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Removes a given entity from the database.\n     */\n    EntityManager.prototype.remove = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        // if user passed empty array of entities then we don't need to do anything\n        if (entity instanceof Array && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor_1.EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    EntityManager.prototype.insert = function (target, entity, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.connection.driver instanceof OracleDriver_1.OracleDriver && entity instanceof Array)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(entity.map(function (entity) { return _this.insert(target, entity); }))];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.reduce(function (mergedResult, result) { return Object.assign(mergedResult, result); }, {})];\n                    case 2: return [2 /*return*/, this.createQueryBuilder()\n                            .insert()\n                            .into(target)\n                            .values(entity)\n                            .execute()];\n                }\n            });\n        });\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.update = function (target, criteria, partialEntity, options) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (criteria instanceof Array && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the update method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            criteria instanceof Array) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.delete = function (targetOrEntity, criteria, options) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (criteria instanceof Array && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the delete method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            criteria instanceof Array) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    EntityManager.prototype.count = function (entityClass, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                return [2 /*return*/, FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount()];\n            });\n        });\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    EntityManager.prototype.find = function (entityClass, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                if (!FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany()];\n            });\n        });\n    };\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    EntityManager.prototype.findAndCount = function (entityClass, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                if (!FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount()];\n            });\n        });\n    };\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    EntityManager.prototype.findByIds = function (entityClass, ids, optionsOrConditions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return __generator(this, function (_a) {\n                // if no ids passed, no need to execute a query - just return an empty array of values\n                if (!ids.length)\n                    return [2 /*return*/, Promise.resolve([])];\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils_1.FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                FindOptionsUtils_1.FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n                if (!FindOptionsUtils_1.FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, qb.andWhereInIds(ids).getMany()];\n            });\n        });\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    EntityManager.prototype.findOne = function (entityClass, idOrOptionsOrConditions, maybeOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var findOptions, options, metadata, alias, qb;\n            return __generator(this, function (_a) {\n                findOptions = undefined;\n                if (FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {\n                    findOptions = idOrOptionsOrConditions;\n                }\n                else if (maybeOptions && FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(maybeOptions)) {\n                    findOptions = maybeOptions;\n                }\n                options = undefined;\n                if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))\n                    options = idOrOptionsOrConditions;\n                metadata = this.connection.getMetadata(entityClass);\n                alias = metadata.name;\n                if (findOptions && findOptions.join) {\n                    alias = findOptions.join.alias;\n                }\n                else if (maybeOptions && FindOptionsUtils_1.FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {\n                    alias = maybeOptions.join.alias;\n                }\n                qb = this.createQueryBuilder(entityClass, alias);\n                if (!findOptions || findOptions.loadEagerRelations !== false)\n                    FindOptionsUtils_1.FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n                if (findOptions)\n                    FindOptionsUtils_1.FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n                if (options) {\n                    qb.where(options);\n                }\n                else if (typeof idOrOptionsOrConditions === \"string\" || typeof idOrOptionsOrConditions === \"number\" || idOrOptionsOrConditions instanceof Date) {\n                    qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));\n                }\n                return [2 /*return*/, qb.getOne()];\n            });\n        });\n    };\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    EntityManager.prototype.findOneOrFail = function (entityClass, idOrOptionsOrConditions, maybeOptions) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.findOne(entityClass, idOrOptionsOrConditions, maybeOptions).then(function (value) {\n                        if (value === undefined) {\n                            return Promise.reject(new EntityNotFoundError_1.EntityNotFoundError(entityClass, idOrOptionsOrConditions));\n                        }\n                        return Promise.resolve(value);\n                    })];\n            });\n        });\n    };\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    EntityManager.prototype.clear = function (entityClass) {\n        return __awaiter(this, void 0, void 0, function () {\n            var metadata, queryRunner;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 6]);\n                        return [4 /*yield*/, queryRunner.clearTable(metadata.tablePath)];\n                    case 2: return [2 /*return*/, _a.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!!this.queryRunner) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [7 /*endfinally*/];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    EntityManager.prototype.increment = function (entityClass, conditions, propertyPath, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata, column, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        column = metadata.findColumnWithPropertyPath(propertyPath);\n                        if (!column)\n                            throw new Error(\"Column \" + propertyPath + \" was not found in \" + metadata.targetName + \" entity.\");\n                        return [4 /*yield*/, this\n                                .createQueryBuilder(entityClass, \"entity\")\n                                .update(entityClass)\n                                .set((_a = {},\n                                _a[propertyPath] = function () { return _this.connection.driver.escape(column.databaseName) + \" + \" + Number(value); },\n                                _a))\n                                .where(conditions)\n                                .execute()];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    EntityManager.prototype.decrement = function (entityClass, conditions, propertyPath, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var metadata, column, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        column = metadata.findColumnWithPropertyPath(propertyPath);\n                        if (!column)\n                            throw new Error(\"Column \" + propertyPath + \" was not found in \" + metadata.targetName + \" entity.\");\n                        return [4 /*yield*/, this\n                                .createQueryBuilder(entityClass, \"entity\")\n                                .update(entityClass)\n                                .set((_a = {},\n                                _a[propertyPath] = function () { return _this.connection.driver.escape(column.databaseName) + \" - \" + Number(value); },\n                                _a))\n                                .where(conditions)\n                                .execute()];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    EntityManager.prototype.getRepository = function (target) {\n        // throw exception if there is no repository with this target registered\n        if (!this.connection.hasMetadata(target))\n            throw new RepositoryNotFoundError_1.RepositoryNotFoundError(this.connection.name, target);\n        // find already created repository instance and return it if found\n        var metadata = this.connection.getMetadata(target);\n        var repository = this.repositories.find(function (repository) { return repository.metadata === metadata; });\n        if (repository)\n            return repository;\n        // if repository was not found then create it, store its instance and return it\n        var newRepository = new RepositoryFactory_1.RepositoryFactory().create(this, metadata, this.queryRunner);\n        this.repositories.push(newRepository);\n        return newRepository;\n    };\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    EntityManager.prototype.getTreeRepository = function (target) {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError_1.TreeRepositoryNotSupportedError(this.connection.driver);\n        // check if repository is real tree repository\n        var repository = this.getRepository(target);\n        if (!(repository instanceof TreeRepository_1.TreeRepository))\n            throw new RepositoryNotTreeError_1.RepositoryNotTreeError(target);\n        return repository;\n    };\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    EntityManager.prototype.getMongoRepository = function (target) {\n        return this.connection.getMongoRepository(target);\n    };\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    EntityManager.prototype.getCustomRepository = function (customRepository) {\n        var entityRepositoryMetadataArgs = index_1.getMetadataArgsStorage().entityRepositories.find(function (repository) {\n            return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError_1.CustomRepositoryNotFoundError(customRepository);\n        var entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n        var entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata);\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository_1.AbstractRepository) {\n            if (!entityRepositoryInstance[\"manager\"])\n                entityRepositoryInstance[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository_1.Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError_1.CustomRepositoryCannotInheritRepositoryError(customRepository);\n            entityRepositoryInstance[\"manager\"] = this;\n            entityRepositoryInstance[\"metadata\"] = entityMetadata;\n        }\n        return entityRepositoryInstance;\n    };\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    EntityManager.prototype.release = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this.queryRunner)\n                    throw new NoNeedToReleaseEntityManagerError_1.NoNeedToReleaseEntityManagerError();\n                return [2 /*return*/, this.queryRunner.release()];\n            });\n        });\n    };\n    return EntityManager;\n}());\nexports.EntityManager = EntityManager;\n\n//# sourceMappingURL=EntityManager.js.map\n"},"lineCount":657}},"hash":"c92395632b1e26dfeca0656846ff489f","cacheData":{"env":{}}}