{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../../util/OrmUtils","loc":{"line":3,"column":25}},{"name":"../../metadata/EntityMetadata","loc":{"line":4,"column":31}},{"name":"../../util/StringUtils","loc":{"line":5,"column":28}},{"name":"../../driver/oracle/OracleDriver","loc":{"line":6,"column":29}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\nvar EntityMetadata_1 = require(\"../../metadata/EntityMetadata\");\nvar StringUtils_1 = require(\"../../util/StringUtils\");\nvar OracleDriver_1 = require(\"../../driver/oracle/OracleDriver\");\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nvar RawSqlResultsToEntityTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RawSqlResultsToEntityTransformer(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {\n        this.expressionMap = expressionMap;\n        this.driver = driver;\n        this.rawRelationIdResults = rawRelationIdResults;\n        this.rawRelationCountResults = rawRelationCountResults;\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    RawSqlResultsToEntityTransformer.prototype.transform = function (rawResults, alias) {\n        var _this = this;\n        var group = this.group(rawResults, alias);\n        var entities = [];\n        group.forEach(function (results) {\n            var entity = _this.transformRawResultsGroup(results, alias);\n            if (entity !== undefined)\n                entities.push(entity);\n        });\n        return entities;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    RawSqlResultsToEntityTransformer.prototype.group = function (rawResults, alias) {\n        var _this = this;\n        var map = new Map();\n        var keys = alias.metadata.primaryColumns.map(function (column) { return _this.buildColumnAlias(alias.name, column.databaseName); });\n        rawResults.forEach(function (rawResult) {\n            var id = keys.map(function (key) { return rawResult[key]; }).join(\"_\"); // todo: check partial\n            if (!id)\n                return;\n            var items = map.get(id);\n            if (!items) {\n                map.set(id, [rawResult]);\n            }\n            else {\n                items.push(rawResult);\n            }\n        });\n        return map;\n    };\n    /**\n     * Transforms set of data results into single entity.\n     */\n    RawSqlResultsToEntityTransformer.prototype.transformRawResultsGroup = function (rawResults, alias) {\n        var _this = this;\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\n        var metadata = alias.metadata;\n        if (metadata.discriminatorColumn) {\n            var discriminatorValues_1 = rawResults.map(function (result) { return result[_this.buildColumnAlias(alias.name, alias.metadata.discriminatorColumn.databaseName)]; });\n            var discriminatorMetadata = metadata.childEntityMetadatas.find(function (childEntityMetadata) {\n                return !!discriminatorValues_1.find(function (value) { return value === childEntityMetadata.discriminatorValue; });\n            });\n            if (discriminatorMetadata)\n                metadata = discriminatorMetadata;\n        }\n        var entity = this.expressionMap.options.indexOf(\"create-pojo\") !== -1 ? {} : metadata.create(this.queryRunner);\n        // get value from columns selections and put them into newly created entity\n        var hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\n        var hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\n        var hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\n        var hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n        // if we have at least one selected column then return this entity\n        // since entity must have at least primary columns to be really selected and transformed into entity\n        if (hasColumns)\n            return entity;\n        // if we don't have any selected column we should not return entity,\n        // except for the case when entity only contain a primary column as a relation to another entity\n        // in this case its absolutely possible our entity to not have any columns except a single relation\n        var hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(function (column) { return column.isVirtual === false; }).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\n        if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))\n            return entity;\n        return undefined;\n    };\n    // get value from columns selections and put them into object\n    RawSqlResultsToEntityTransformer.prototype.transformColumns = function (rawResults, alias, entity, metadata) {\n        var _this = this;\n        var hasData = false;\n        metadata.columns.forEach(function (column) {\n            // if table inheritance is used make sure this column is not child's column\n            if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(function (metadata) { return metadata.target; }).indexOf(column.target) !== -1)\n                return;\n            var value = rawResults[0][_this.buildColumnAlias(alias.name, column.databaseName)];\n            if (value === undefined || column.isVirtual)\n                return;\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\n            // then we don't add this column and its value into the entity\n            if (!_this.expressionMap.selects.find(function (select) { return select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyPath; }))\n                return;\n            column.setEntityValue(entity, _this.driver.prepareHydratedValue(value, column));\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\n                hasData = true;\n        });\n        return hasData;\n    };\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    RawSqlResultsToEntityTransformer.prototype.transformJoins = function (rawResults, entity, alias, metadata) {\n        var _this = this;\n        var hasData = false;\n        // let discriminatorValue: string = \"\";\n        // if (metadata.discriminatorColumn)\n        //     discriminatorValue = rawResults[0][this.buildColumnAlias(alias.name, alias.metadata.discriminatorColumn!.databaseName)];\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n            // if simple left or inner join was performed without selection then we don't need to do anything\n            if (!join.isSelected)\n                return;\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (join.relation && !metadata.relations.find(function (relation) { return relation === join.relation; }))\n                return;\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            }\n            else {\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation.propertyPath)\n                    return;\n            }\n            // transform joined data into entities\n            var result = _this.transform(rawResults, join.alias);\n            result = !join.isMany ? result[0] : result;\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\n            if (result === undefined) // if nothing was joined then simply return\n                return;\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n            }\n            else { // otherwise set to relation\n                join.relation.setEntityValue(entity, result);\n            }\n            hasData = true;\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.transformRelationIds = function (rawSqlResults, alias, entity, metadata) {\n        var _this = this;\n        var hasData = false;\n        this.rawRelationIdResults.forEach(function (rawRelationIdResult) {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\n                return;\n            var relation = rawRelationIdResult.relationIdAttribute.relation;\n            var valueMap = _this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null)\n                return;\n            var idMaps = rawRelationIdResult.results.map(function (result) {\n                var entityPrimaryIds = _this.extractEntityPrimaryIds(relation, result);\n                if (EntityMetadata_1.EntityMetadata.compareIds(entityPrimaryIds, valueMap) === false)\n                    return;\n                var columns;\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n                }\n                else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n                    // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                }\n                else { // ManyToMany\n                    if (relation.isOwning) {\n                        columns = relation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n                    }\n                    else {\n                        columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n                    }\n                }\n                var idMap = columns.reduce(function (idMap, column) {\n                    var value = result[column.databaseName];\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        if (column.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.createValueMap(value);\n                        return OrmUtils_1.OrmUtils.mergeDeep(idMap, column.createValueMap(value));\n                    }\n                    else {\n                        if (column.referencedColumn.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.referencedColumn.createValueMap(value);\n                        return OrmUtils_1.OrmUtils.mergeDeep(idMap, column.referencedColumn.createValueMap(value));\n                    }\n                }, {});\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return columns[0].getEntityValue(idMap);\n                    }\n                    else {\n                        return columns[0].referencedColumn.getEntityValue(idMap);\n                    }\n                }\n                return idMap;\n            }).filter(function (result) { return result; });\n            var properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            var mapToProperty = function (properties, map, value) {\n                var property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                }\n                else if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                }\n                else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                if (idMaps[0] !== undefined) {\n                    mapToProperty(properties, entity, idMaps[0]);\n                    hasData = true;\n                }\n            }\n            else {\n                mapToProperty(properties, entity, idMaps);\n                if (idMaps.length > 0) {\n                    hasData = true;\n                }\n            }\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.transformRelationCounts = function (rawSqlResults, alias, entity) {\n        var _this = this;\n        var hasData = false;\n        this.rawRelationCountResults\n            .filter(function (rawRelationCountResult) { return rawRelationCountResult.relationCountAttribute.parentAlias === alias.name; })\n            .forEach(function (rawRelationCountResult) {\n            var relation = rawRelationCountResult.relationCountAttribute.relation;\n            var referenceColumnName;\n            if (relation.isOneToMany) {\n                referenceColumnName = relation.inverseRelation.joinColumns[0].referencedColumn.databaseName; // todo: fix joinColumns[0]\n            }\n            else {\n                referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn.databaseName : relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;\n            }\n            var referenceColumnValue = rawSqlResults[0][_this.buildColumnAlias(alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n            if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\n                entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                rawRelationCountResult.results\n                    .filter(function (result) { return result[\"parentId\"] === referenceColumnValue; })\n                    .forEach(function (result) {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                    hasData = true;\n                });\n            }\n        });\n        return hasData;\n    };\n    /**\n     * Builds column alias from given alias name and column name,\n     * If alias length is more than 29, abbreviates column name.\n     */\n    RawSqlResultsToEntityTransformer.prototype.buildColumnAlias = function (aliasName, columnName) {\n        var columnAliasName = aliasName + \"_\" + columnName;\n        if (columnAliasName.length > 29 && this.driver instanceof OracleDriver_1.OracleDriver)\n            return aliasName + \"_\" + StringUtils_1.abbreviate(columnName, 2);\n        return columnAliasName;\n    };\n    RawSqlResultsToEntityTransformer.prototype.createValueMapFromJoinColumns = function (relation, parentAlias, rawSqlResults) {\n        var _this = this;\n        var columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n        }\n        return columns.reduce(function (valueMap, column) {\n            rawSqlResults.forEach(function (rawSqlResult) {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] = rawSqlResult[_this.buildColumnAlias(parentAlias, column.databaseName)];\n                }\n                else {\n                    valueMap[column.databaseName] = rawSqlResult[_this.buildColumnAlias(parentAlias, column.referencedColumn.databaseName)];\n                }\n            });\n            return valueMap;\n        }, {});\n    };\n    RawSqlResultsToEntityTransformer.prototype.extractEntityPrimaryIds = function (relation, relationIdRawResult) {\n        var columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n        }\n        return columns.reduce(function (data, column) {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {});\n    };\n    return RawSqlResultsToEntityTransformer;\n}());\nexports.RawSqlResultsToEntityTransformer = RawSqlResultsToEntityTransformer;\n\n//# sourceMappingURL=RawSqlResultsToEntityTransformer.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}}],"sources":{"../node_modules/typeorm/query-builder/transformer/RawSqlResultsToEntityTransformer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\nvar EntityMetadata_1 = require(\"../../metadata/EntityMetadata\");\nvar StringUtils_1 = require(\"../../util/StringUtils\");\nvar OracleDriver_1 = require(\"../../driver/oracle/OracleDriver\");\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nvar RawSqlResultsToEntityTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RawSqlResultsToEntityTransformer(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {\n        this.expressionMap = expressionMap;\n        this.driver = driver;\n        this.rawRelationIdResults = rawRelationIdResults;\n        this.rawRelationCountResults = rawRelationCountResults;\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    RawSqlResultsToEntityTransformer.prototype.transform = function (rawResults, alias) {\n        var _this = this;\n        var group = this.group(rawResults, alias);\n        var entities = [];\n        group.forEach(function (results) {\n            var entity = _this.transformRawResultsGroup(results, alias);\n            if (entity !== undefined)\n                entities.push(entity);\n        });\n        return entities;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    RawSqlResultsToEntityTransformer.prototype.group = function (rawResults, alias) {\n        var _this = this;\n        var map = new Map();\n        var keys = alias.metadata.primaryColumns.map(function (column) { return _this.buildColumnAlias(alias.name, column.databaseName); });\n        rawResults.forEach(function (rawResult) {\n            var id = keys.map(function (key) { return rawResult[key]; }).join(\"_\"); // todo: check partial\n            if (!id)\n                return;\n            var items = map.get(id);\n            if (!items) {\n                map.set(id, [rawResult]);\n            }\n            else {\n                items.push(rawResult);\n            }\n        });\n        return map;\n    };\n    /**\n     * Transforms set of data results into single entity.\n     */\n    RawSqlResultsToEntityTransformer.prototype.transformRawResultsGroup = function (rawResults, alias) {\n        var _this = this;\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\n        var metadata = alias.metadata;\n        if (metadata.discriminatorColumn) {\n            var discriminatorValues_1 = rawResults.map(function (result) { return result[_this.buildColumnAlias(alias.name, alias.metadata.discriminatorColumn.databaseName)]; });\n            var discriminatorMetadata = metadata.childEntityMetadatas.find(function (childEntityMetadata) {\n                return !!discriminatorValues_1.find(function (value) { return value === childEntityMetadata.discriminatorValue; });\n            });\n            if (discriminatorMetadata)\n                metadata = discriminatorMetadata;\n        }\n        var entity = this.expressionMap.options.indexOf(\"create-pojo\") !== -1 ? {} : metadata.create(this.queryRunner);\n        // get value from columns selections and put them into newly created entity\n        var hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\n        var hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\n        var hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\n        var hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n        // if we have at least one selected column then return this entity\n        // since entity must have at least primary columns to be really selected and transformed into entity\n        if (hasColumns)\n            return entity;\n        // if we don't have any selected column we should not return entity,\n        // except for the case when entity only contain a primary column as a relation to another entity\n        // in this case its absolutely possible our entity to not have any columns except a single relation\n        var hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(function (column) { return column.isVirtual === false; }).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\n        if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))\n            return entity;\n        return undefined;\n    };\n    // get value from columns selections and put them into object\n    RawSqlResultsToEntityTransformer.prototype.transformColumns = function (rawResults, alias, entity, metadata) {\n        var _this = this;\n        var hasData = false;\n        metadata.columns.forEach(function (column) {\n            // if table inheritance is used make sure this column is not child's column\n            if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(function (metadata) { return metadata.target; }).indexOf(column.target) !== -1)\n                return;\n            var value = rawResults[0][_this.buildColumnAlias(alias.name, column.databaseName)];\n            if (value === undefined || column.isVirtual)\n                return;\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\n            // then we don't add this column and its value into the entity\n            if (!_this.expressionMap.selects.find(function (select) { return select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyPath; }))\n                return;\n            column.setEntityValue(entity, _this.driver.prepareHydratedValue(value, column));\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\n                hasData = true;\n        });\n        return hasData;\n    };\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    RawSqlResultsToEntityTransformer.prototype.transformJoins = function (rawResults, entity, alias, metadata) {\n        var _this = this;\n        var hasData = false;\n        // let discriminatorValue: string = \"\";\n        // if (metadata.discriminatorColumn)\n        //     discriminatorValue = rawResults[0][this.buildColumnAlias(alias.name, alias.metadata.discriminatorColumn!.databaseName)];\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n            // if simple left or inner join was performed without selection then we don't need to do anything\n            if (!join.isSelected)\n                return;\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (join.relation && !metadata.relations.find(function (relation) { return relation === join.relation; }))\n                return;\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            }\n            else {\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation.propertyPath)\n                    return;\n            }\n            // transform joined data into entities\n            var result = _this.transform(rawResults, join.alias);\n            result = !join.isMany ? result[0] : result;\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\n            if (result === undefined) // if nothing was joined then simply return\n                return;\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n            }\n            else { // otherwise set to relation\n                join.relation.setEntityValue(entity, result);\n            }\n            hasData = true;\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.transformRelationIds = function (rawSqlResults, alias, entity, metadata) {\n        var _this = this;\n        var hasData = false;\n        this.rawRelationIdResults.forEach(function (rawRelationIdResult) {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\n                return;\n            var relation = rawRelationIdResult.relationIdAttribute.relation;\n            var valueMap = _this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null)\n                return;\n            var idMaps = rawRelationIdResult.results.map(function (result) {\n                var entityPrimaryIds = _this.extractEntityPrimaryIds(relation, result);\n                if (EntityMetadata_1.EntityMetadata.compareIds(entityPrimaryIds, valueMap) === false)\n                    return;\n                var columns;\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n                }\n                else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n                    // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                }\n                else { // ManyToMany\n                    if (relation.isOwning) {\n                        columns = relation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n                    }\n                    else {\n                        columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n                    }\n                }\n                var idMap = columns.reduce(function (idMap, column) {\n                    var value = result[column.databaseName];\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        if (column.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.createValueMap(value);\n                        return OrmUtils_1.OrmUtils.mergeDeep(idMap, column.createValueMap(value));\n                    }\n                    else {\n                        if (column.referencedColumn.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.referencedColumn.createValueMap(value);\n                        return OrmUtils_1.OrmUtils.mergeDeep(idMap, column.referencedColumn.createValueMap(value));\n                    }\n                }, {});\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return columns[0].getEntityValue(idMap);\n                    }\n                    else {\n                        return columns[0].referencedColumn.getEntityValue(idMap);\n                    }\n                }\n                return idMap;\n            }).filter(function (result) { return result; });\n            var properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            var mapToProperty = function (properties, map, value) {\n                var property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                }\n                else if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                }\n                else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                if (idMaps[0] !== undefined) {\n                    mapToProperty(properties, entity, idMaps[0]);\n                    hasData = true;\n                }\n            }\n            else {\n                mapToProperty(properties, entity, idMaps);\n                if (idMaps.length > 0) {\n                    hasData = true;\n                }\n            }\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.transformRelationCounts = function (rawSqlResults, alias, entity) {\n        var _this = this;\n        var hasData = false;\n        this.rawRelationCountResults\n            .filter(function (rawRelationCountResult) { return rawRelationCountResult.relationCountAttribute.parentAlias === alias.name; })\n            .forEach(function (rawRelationCountResult) {\n            var relation = rawRelationCountResult.relationCountAttribute.relation;\n            var referenceColumnName;\n            if (relation.isOneToMany) {\n                referenceColumnName = relation.inverseRelation.joinColumns[0].referencedColumn.databaseName; // todo: fix joinColumns[0]\n            }\n            else {\n                referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn.databaseName : relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;\n            }\n            var referenceColumnValue = rawSqlResults[0][_this.buildColumnAlias(alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n            if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\n                entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                rawRelationCountResult.results\n                    .filter(function (result) { return result[\"parentId\"] === referenceColumnValue; })\n                    .forEach(function (result) {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                    hasData = true;\n                });\n            }\n        });\n        return hasData;\n    };\n    /**\n     * Builds column alias from given alias name and column name,\n     * If alias length is more than 29, abbreviates column name.\n     */\n    RawSqlResultsToEntityTransformer.prototype.buildColumnAlias = function (aliasName, columnName) {\n        var columnAliasName = aliasName + \"_\" + columnName;\n        if (columnAliasName.length > 29 && this.driver instanceof OracleDriver_1.OracleDriver)\n            return aliasName + \"_\" + StringUtils_1.abbreviate(columnName, 2);\n        return columnAliasName;\n    };\n    RawSqlResultsToEntityTransformer.prototype.createValueMapFromJoinColumns = function (relation, parentAlias, rawSqlResults) {\n        var _this = this;\n        var columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n        }\n        return columns.reduce(function (valueMap, column) {\n            rawSqlResults.forEach(function (rawSqlResult) {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] = rawSqlResult[_this.buildColumnAlias(parentAlias, column.databaseName)];\n                }\n                else {\n                    valueMap[column.databaseName] = rawSqlResult[_this.buildColumnAlias(parentAlias, column.referencedColumn.databaseName)];\n                }\n            });\n            return valueMap;\n        }, {});\n    };\n    RawSqlResultsToEntityTransformer.prototype.extractEntityPrimaryIds = function (relation, relationIdRawResult) {\n        var columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n        }\n        return columns.reduce(function (data, column) {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {});\n    };\n    return RawSqlResultsToEntityTransformer;\n}());\nexports.RawSqlResultsToEntityTransformer = RawSqlResultsToEntityTransformer;\n\n//# sourceMappingURL=RawSqlResultsToEntityTransformer.js.map\n"},"lineCount":338}},"hash":"58ca5934f643757d8569d900b88f048a","cacheData":{"env":{}}}