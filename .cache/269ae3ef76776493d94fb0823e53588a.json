{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../../","loc":{"line":3,"column":17}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"../../\");\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nfunction ManyToMany(typeFunction, inverseSideOrOptions, options) {\n    // normalize parameters\n    var inverseSideProperty;\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var isLazy = options.lazy === true;\n        if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination\n            var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        _1.getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        });\n    };\n}\nexports.ManyToMany = ManyToMany;\n\n//# sourceMappingURL=ManyToMany.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/decorator/relations/ManyToMany.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"../node_modules/typeorm/decorator/relations/ManyToMany.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"../../\");\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nfunction ManyToMany(typeFunction, inverseSideOrOptions, options) {\n    // normalize parameters\n    var inverseSideProperty;\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var isLazy = options.lazy === true;\n        if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination\n            var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        _1.getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        });\n    };\n}\nexports.ManyToMany = ManyToMany;\n\n//# sourceMappingURL=ManyToMany.js.map\n"},"lineCount":43}},"hash":"b4a43b463e1bc264b0a4a41f7c3fcd6d","cacheData":{"env":{}}}