{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../Subject","loc":{"line":3,"column":24}},{"name":"../../util/OrmUtils","loc":{"line":4,"column":25}},{"name":"../../metadata/EntityMetadata","loc":{"line":5,"column":31}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\nvar EntityMetadata_1 = require(\"../../metadata/EntityMetadata\");\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nvar ManyToManySubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ManyToManySubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    ManyToManySubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach(function (relation) {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    ManyToManySubjectBuilder.prototype.buildForAllRemoval = function (subject) {\n        var _this = this;\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach(function (relation) {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            var relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach(function (relationId) {\n                var junctionSubject = new Subject_1.Subject({\n                    metadata: relation.junctionEntityMetadata,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: _this.buildJunctionIdentifier(subject, relation, relationId)\n                });\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                _this.subjects.push(junctionSubject);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    ManyToManySubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        var _this = this;\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        var databaseRelatedEntityIds = [];\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        var relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!(relatedEntities instanceof Array))\n            return;\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach(function (relatedEntity) {\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n            // extract only relation id from the related entities, since we only need it for comparision\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            var relatedEntityExistInDatabase = databaseRelatedEntityIds.find(function (databaseRelatedEntityRelationId) {\n                return EntityMetadata_1.EntityMetadata.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n            var ownerValue = relation.isOwning ? subject : (relatedEntitySubject || relatedEntity); // by example: ownerEntityMap is post from subject here\n            var inverseValue = relation.isOwning ? (relatedEntitySubject || relatedEntity) : subject; // by example: inverseEntityMap is category from categories array here\n            // create a new subject for insert operation of junction rows\n            var junctionSubject = new Subject_1.Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            _this.subjects.push(junctionSubject);\n            relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                });\n            });\n            relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                });\n            });\n        });\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        var changedInverseEntityRelationIds = [];\n        relatedEntities.forEach(function (relatedEntity) {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        var removedJunctionEntityIds = databaseRelatedEntityIds.filter(function (existRelationId) {\n            return !changedInverseEntityRelationIds.find(function (changedRelationId) {\n                return EntityMetadata_1.EntityMetadata.compareIds(changedRelationId, existRelationId);\n            });\n        });\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach(function (removedEntityRelationId) {\n            var junctionSubject = new Subject_1.Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: _this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n            });\n            _this.subjects.push(junctionSubject);\n        });\n    };\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    ManyToManySubjectBuilder.prototype.buildJunctionIdentifier = function (subject, relation, relationId) {\n        var ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n        var inverseEntityMap = relation.isOwning ? relationId : subject.entity;\n        var identifier = {};\n        relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {\n            OrmUtils_1.OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {\n            OrmUtils_1.OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    };\n    return ManyToManySubjectBuilder;\n}());\nexports.ManyToManySubjectBuilder = ManyToManySubjectBuilder;\n\n//# sourceMappingURL=ManyToManySubjectBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}}],"sources":{"../node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = require(\"../Subject\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\nvar EntityMetadata_1 = require(\"../../metadata/EntityMetadata\");\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nvar ManyToManySubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ManyToManySubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    ManyToManySubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach(function (relation) {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    ManyToManySubjectBuilder.prototype.buildForAllRemoval = function (subject) {\n        var _this = this;\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach(function (relation) {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            var relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach(function (relationId) {\n                var junctionSubject = new Subject_1.Subject({\n                    metadata: relation.junctionEntityMetadata,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: _this.buildJunctionIdentifier(subject, relation, relationId)\n                });\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                _this.subjects.push(junctionSubject);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    ManyToManySubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        var _this = this;\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        var databaseRelatedEntityIds = [];\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        var relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!(relatedEntities instanceof Array))\n            return;\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach(function (relatedEntity) {\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n            // extract only relation id from the related entities, since we only need it for comparision\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            var relatedEntityExistInDatabase = databaseRelatedEntityIds.find(function (databaseRelatedEntityRelationId) {\n                return EntityMetadata_1.EntityMetadata.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n            var ownerValue = relation.isOwning ? subject : (relatedEntitySubject || relatedEntity); // by example: ownerEntityMap is post from subject here\n            var inverseValue = relation.isOwning ? (relatedEntitySubject || relatedEntity) : subject; // by example: inverseEntityMap is category from categories array here\n            // create a new subject for insert operation of junction rows\n            var junctionSubject = new Subject_1.Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            _this.subjects.push(junctionSubject);\n            relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                });\n            });\n            relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                });\n            });\n        });\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        var changedInverseEntityRelationIds = [];\n        relatedEntities.forEach(function (relatedEntity) {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        var removedJunctionEntityIds = databaseRelatedEntityIds.filter(function (existRelationId) {\n            return !changedInverseEntityRelationIds.find(function (changedRelationId) {\n                return EntityMetadata_1.EntityMetadata.compareIds(changedRelationId, existRelationId);\n            });\n        });\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach(function (removedEntityRelationId) {\n            var junctionSubject = new Subject_1.Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: _this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n            });\n            _this.subjects.push(junctionSubject);\n        });\n    };\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    ManyToManySubjectBuilder.prototype.buildJunctionIdentifier = function (subject, relation, relationId) {\n        var ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n        var inverseEntityMap = relation.isOwning ? relationId : subject.entity;\n        var identifier = {};\n        relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {\n            OrmUtils_1.OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {\n            OrmUtils_1.OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    };\n    return ManyToManySubjectBuilder;\n}());\nexports.ManyToManySubjectBuilder = ManyToManySubjectBuilder;\n\n//# sourceMappingURL=ManyToManySubjectBuilder.js.map\n"},"lineCount":208}},"hash":"7b23c9d07b61537004b3cf5b33214361","cacheData":{"env":{}}}