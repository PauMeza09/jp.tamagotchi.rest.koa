{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../metadata/EntityMetadata","loc":{"line":3,"column":31}},{"name":"../metadata/ColumnMetadata","loc":{"line":4,"column":31}},{"name":"../metadata/IndexMetadata","loc":{"line":5,"column":30}},{"name":"../metadata/RelationMetadata","loc":{"line":6,"column":33}},{"name":"../metadata/EmbeddedMetadata","loc":{"line":7,"column":33}},{"name":"../metadata/RelationIdMetadata","loc":{"line":8,"column":35}},{"name":"../metadata/RelationCountMetadata","loc":{"line":9,"column":38}},{"name":"./MetadataUtils","loc":{"line":10,"column":30}},{"name":"./JunctionEntityMetadataBuilder","loc":{"line":11,"column":46}},{"name":"./ClosureJunctionEntityMetadataBuilder","loc":{"line":12,"column":53}},{"name":"./RelationJoinColumnBuilder","loc":{"line":13,"column":42}},{"name":"../metadata/EntityListenerMetadata","loc":{"line":14,"column":39}},{"name":"../metadata/UniqueMetadata","loc":{"line":15,"column":31}},{"name":"../driver/mysql/MysqlDriver","loc":{"line":16,"column":28}},{"name":"../metadata/CheckMetadata","loc":{"line":17,"column":30}},{"name":"../driver/sqlserver/SqlServerDriver","loc":{"line":18,"column":32}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityMetadata_1 = require(\"../metadata/EntityMetadata\");\nvar ColumnMetadata_1 = require(\"../metadata/ColumnMetadata\");\nvar IndexMetadata_1 = require(\"../metadata/IndexMetadata\");\nvar RelationMetadata_1 = require(\"../metadata/RelationMetadata\");\nvar EmbeddedMetadata_1 = require(\"../metadata/EmbeddedMetadata\");\nvar RelationIdMetadata_1 = require(\"../metadata/RelationIdMetadata\");\nvar RelationCountMetadata_1 = require(\"../metadata/RelationCountMetadata\");\nvar MetadataUtils_1 = require(\"./MetadataUtils\");\nvar JunctionEntityMetadataBuilder_1 = require(\"./JunctionEntityMetadataBuilder\");\nvar ClosureJunctionEntityMetadataBuilder_1 = require(\"./ClosureJunctionEntityMetadataBuilder\");\nvar RelationJoinColumnBuilder_1 = require(\"./RelationJoinColumnBuilder\");\nvar EntityListenerMetadata_1 = require(\"../metadata/EntityListenerMetadata\");\nvar UniqueMetadata_1 = require(\"../metadata/UniqueMetadata\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar CheckMetadata_1 = require(\"../metadata/CheckMetadata\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nvar EntityMetadataBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityMetadataBuilder(connection, metadataArgsStorage) {\n        this.connection = connection;\n        this.metadataArgsStorage = metadataArgsStorage;\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder_1.JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder_1.ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder_1.RelationJoinColumnBuilder(connection);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    EntityMetadataBuilder.prototype.build = function (entityClasses) {\n        var _this = this;\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        var allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        var realTables = allTables.filter(function (table) { return table.type === \"regular\" || table.type === \"closure\" || table.type === \"entity-child\"; });\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        var entityMetadatas = realTables.map(function (tableArgs) { return _this.createEntityMetadata(tableArgs); });\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeParentEntityMetadata(entityMetadatas, entityMetadata); });\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach(function (metadata) {\n            metadata.childEntityMetadatas = entityMetadatas.filter(function (childMetadata) {\n                return metadata.target instanceof Function\n                    && childMetadata.target instanceof Function\n                    && MetadataUtils_1.MetadataUtils.isInherited(childMetadata.target, metadata.target);\n            });\n        });\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) { return entityMetadata.build(); });\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType === \"entity-child\"; })\n            .forEach(function (entityMetadata) { return entityMetadata.build(); });\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) { return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata); });\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType === \"entity-child\"; })\n            .forEach(function (entityMetadata) { return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata); });\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeEntityMetadataStep2(entityMetadata); });\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeInverseProperties(entityMetadata, entityMetadatas); });\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) {\n            // create entity's relations join columns (for many-to-one and one-to-one owner)\n            entityMetadata.relations.filter(function (relation) { return relation.isOneToOne || relation.isManyToOne; }).forEach(function (relation) {\n                var joinColumns = _this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                var _a = _this.relationJoinColumnBuilder.build(joinColumns, relation), foreignKey = _a.foreignKey, uniqueConstraint = _a.uniqueConstraint; // create a foreign key based on its metadata args\n                if (foreignKey) {\n                    relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                    entityMetadata.foreignKeys.push(foreignKey);\n                }\n                if (uniqueConstraint) {\n                    if (_this.connection.driver instanceof MysqlDriver_1.MysqlDriver || _this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                        var index = new IndexMetadata_1.IndexMetadata({\n                            entityMetadata: uniqueConstraint.entityMetadata,\n                            columns: uniqueConstraint.columns,\n                            args: {\n                                target: uniqueConstraint.target,\n                                name: uniqueConstraint.name,\n                                unique: true,\n                                synchronize: true\n                            }\n                        });\n                        if (_this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                            index.where = index.columns.map(function (column) {\n                                return _this.connection.driver.escape(column.databaseName) + \" IS NOT NULL\";\n                            }).join(\" AND \");\n                        }\n                        entityMetadata.indices.push(index);\n                    }\n                    else {\n                        entityMetadata.uniques.push(uniqueConstraint);\n                    }\n                }\n            });\n            // create junction entity metadatas for entity many-to-many relations\n            entityMetadata.relations.filter(function (relation) { return relation.isManyToMany; }).forEach(function (relation) {\n                var joinTable = _this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\n                if (!joinTable)\n                    return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n                // here we create a junction entity metadata for a new junction table of many-to-many relation\n                var junctionEntityMetadata = _this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                relation.registerForeignKeys.apply(relation, junctionEntityMetadata.foreignKeys);\n                relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n                // compute new entity metadata properties and push it to entity metadatas pool\n                _this.computeEntityMetadataStep2(junctionEntityMetadata);\n                _this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(junctionEntityMetadata);\n            });\n        });\n        // update entity metadata depend properties\n        entityMetadatas\n            .forEach(function (entityMetadata) {\n            entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(function (relation) { return relation.isWithJoinColumn; });\n            entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(function (relation) { return !relation.isNullable || relation.isPrimary; });\n        });\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter(function (metadata) { return metadata.treeType === \"closure-table\"; })\n            .forEach(function (entityMetadata) {\n            var closureJunctionEntityMetadata = _this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n            entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n            _this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n            _this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n            entityMetadatas.push(closureJunctionEntityMetadata);\n        });\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(function (metadata) { return metadata.inheritancePattern === \"STI\" && metadata.discriminatorColumn; })\n            .forEach(function (entityMetadata) { return _this.createKeysForTableInheritance(entityMetadata); });\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.indices.forEach(function (index) { return index.build(_this.connection.namingStrategy); });\n        });\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.uniques.forEach(function (unique) { return unique.build(_this.connection.namingStrategy); });\n        });\n        // build all check constraints\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.checks.forEach(function (check) { return check.build(_this.connection.namingStrategy); });\n        });\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter(function (metadata) { return metadata.target instanceof Function; })\n            .forEach(function (entityMetadata) {\n            entityMetadata.relations\n                .filter(function (relation) { return relation.isLazy; })\n                .forEach(function (relation) {\n                _this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);\n            });\n        });\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.columns.forEach(function (column) {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                var generated = _this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n                if (generated) {\n                    column.isGenerated = true;\n                    column.generationStrategy = generated.strategy;\n                    column.type = generated.strategy === \"increment\" ? (column.type || Number) : \"uuid\";\n                    column.build(_this.connection);\n                    _this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n        });\n        return entityMetadatas;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    EntityMetadataBuilder.prototype.createEntityMetadata = function (tableArgs) {\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        var inheritanceTree = tableArgs.target instanceof Function\n            ? MetadataUtils_1.MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n        var tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        var tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        var singleTableChildrenTargets;\n        if ((tableInheritance && tableInheritance.pattern === \"STI\") || tableArgs.type === \"entity-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map(function (args) { return args.target; })\n                .filter(function (target) { return target instanceof Function; });\n            inheritanceTree.push.apply(inheritanceTree, singleTableChildrenTargets);\n        }\n        return new EntityMetadata_1.EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined\n        });\n    };\n    EntityMetadataBuilder.prototype.computeParentEntityMetadata = function (allEntityMetadatas, entityMetadata) {\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(function (allEntityMetadata) {\n                return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 && allEntityMetadata.inheritancePattern === \"STI\";\n            });\n        }\n    };\n    EntityMetadataBuilder.prototype.computeEntityMetadataStep1 = function (allEntityMetadatas, entityMetadata) {\n        var _this = this;\n        var entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n        var discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n        entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : entityMetadata.target.name; // todo: pass this to naming strategy to generate a name\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree));\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map(function (args) {\n            // for single table children we reuse columns created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownColumns.find(function (column) { return column.propertyName === args.propertyName; });\n            var column = new ColumnMetadata_1.ColumnMetadata({ connection: _this.connection, entityMetadata: entityMetadata, args: args });\n            // if single table inheritance used, we need to mark all inherit table columns as nullable\n            var columnInSingleTableInheritedChild = allEntityMetadatas.find(function (otherEntityMetadata) { return otherEntityMetadata.tableType === \"entity-child\" && otherEntityMetadata.target === args.target; });\n            if (columnInSingleTableInheritedChild)\n                column.isNullable = true;\n            return column;\n        });\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            var discriminatorColumnName_1 = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : \"type\";\n            var discriminatorColumn = entityMetadata.ownColumns.find(function (column) { return column.propertyName === discriminatorColumnName_1; });\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata_1.ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName_1,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName_1,\n                            type: \"varchar\",\n                            nullable: false\n                        }\n                    }\n                });\n                discriminatorColumn.isVirtual = true;\n                discriminatorColumn.isDiscriminator = true;\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n            else {\n                discriminatorColumn.isDiscriminator = true;\n            }\n        }\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            var discriminatorColumn_1 = entityMetadata.parentEntityMetadata.ownColumns.find(function (column) { return column.isDiscriminator; });\n            if (discriminatorColumn_1 && !entityMetadata.ownColumns.find(function (column) { return column === discriminatorColumn_1; })) {\n                entityMetadata.ownColumns.push(discriminatorColumn_1);\n            }\n        }\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata_1.ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                materializedPath: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"mpath\",\n                    options: /*tree.column || */ {\n                        name: \"mpath\",\n                        type: \"varchar\",\n                        nullable: true,\n                        default: \"\"\n                    }\n                }\n            }));\n        }\n        else if (entityMetadata.treeType === \"nested-set\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata_1.ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetLeft: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"nsleft\",\n                    options: /*tree.column || */ {\n                        name: \"nsleft\",\n                        type: \"integer\",\n                        nullable: false,\n                        default: 1\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata_1.ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetRight: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"nsright\",\n                    options: /*tree.column || */ {\n                        name: \"nsright\",\n                        type: \"integer\",\n                        nullable: false,\n                        default: 2\n                    }\n                }\n            }));\n        }\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relations created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownRelations.find(function (relation) { return relation.propertyName === args.propertyName; });\n            return new RelationMetadata_1.RelationMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relation ids created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationIds.find(function (relationId) { return relationId.propertyName === args.propertyName; });\n            return new RelationIdMetadata_1.RelationIdMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relation counts created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationCounts.find(function (relationCount) { return relationCount.propertyName === args.propertyName; });\n            return new RelationCountMetadata_1.RelationCountMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(function (args) {\n            return new IndexMetadata_1.IndexMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(function (args) {\n            return new EntityListenerMetadata_1.EntityListenerMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(function (args) {\n            return new CheckMetadata_1.CheckMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        // Mysql stores unique constraints as unique indices.\n        if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver) {\n            var indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {\n                return new IndexMetadata_1.IndexMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                        unique: true,\n                        synchronize: true\n                    }\n                });\n            });\n            (_a = entityMetadata.ownIndices).push.apply(_a, indices);\n        }\n        else {\n            entityMetadata.uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {\n                return new UniqueMetadata_1.UniqueMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n        }\n        var _a;\n    };\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    EntityMetadataBuilder.prototype.createEmbeddedsRecursively = function (entityMetadata, embeddedArgs) {\n        var _this = this;\n        return embeddedArgs.map(function (embeddedArgs) {\n            var embeddedMetadata = new EmbeddedMetadata_1.EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\n            var targets = MetadataUtils_1.MetadataUtils.getInheritanceTree(embeddedMetadata.type);\n            embeddedMetadata.columns = _this.metadataArgsStorage.filterColumns(targets).map(function (args) {\n                return new ColumnMetadata_1.ColumnMetadata({ connection: _this.connection, entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.relations = _this.metadataArgsStorage.filterRelations(targets).map(function (args) {\n                return new RelationMetadata_1.RelationMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.listeners = _this.metadataArgsStorage.filterListeners(targets).map(function (args) {\n                return new EntityListenerMetadata_1.EntityListenerMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.indices = _this.metadataArgsStorage.filterIndices(targets).map(function (args) {\n                return new IndexMetadata_1.IndexMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.relationIds = _this.metadataArgsStorage.filterRelationIds(targets).map(function (args) {\n                return new RelationIdMetadata_1.RelationIdMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            embeddedMetadata.relationCounts = _this.metadataArgsStorage.filterRelationCounts(targets).map(function (args) {\n                return new RelationCountMetadata_1.RelationCountMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            embeddedMetadata.embeddeds = _this.createEmbeddedsRecursively(entityMetadata, _this.metadataArgsStorage.filterEmbeddeds(targets));\n            embeddedMetadata.embeddeds.forEach(function (subEmbedded) { return subEmbedded.parentEmbeddedMetadata = embeddedMetadata; });\n            entityMetadata.allEmbeddeds.push(embeddedMetadata);\n            return embeddedMetadata;\n        });\n    };\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    EntityMetadataBuilder.prototype.computeEntityMetadataStep2 = function (entityMetadata) {\n        var _this = this;\n        entityMetadata.embeddeds.forEach(function (embedded) { return embedded.build(_this.connection); });\n        entityMetadata.embeddeds.forEach(function (embedded) {\n            embedded.columnsFromTree.forEach(function (column) { return column.build(_this.connection); });\n            embedded.relationsFromTree.forEach(function (relation) { return relation.build(); });\n        });\n        entityMetadata.ownColumns.forEach(function (column) { return column.build(_this.connection); });\n        entityMetadata.ownRelations.forEach(function (relation) { return relation.build(); });\n        entityMetadata.relations = entityMetadata.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.relationsFromTree); }, entityMetadata.ownRelations);\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(function (relation) { return relation.isEager; });\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(function (relation) { return relation.isLazy; });\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToOne; });\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToMany; });\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToOne; });\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToMany; });\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToOneOwner; });\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToManyOwner; });\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(function (relation) { return relation.isTreeParent; });\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(function (relation) { return relation.isTreeChildren; });\n        entityMetadata.columns = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.columnsFromTree); }, entityMetadata.ownColumns);\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.listenersFromTree); }, entityMetadata.ownListeners);\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-load\"; });\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-insert\"; });\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-update\"; });\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-remove\"; });\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-insert\"; });\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-update\"; });\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-remove\"; });\n        entityMetadata.indices = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.indicesFromTree); }, entityMetadata.ownIndices);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(function (column) { return column.isPrimary; });\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(function (column) { return !column.isVirtual; });\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(function (column) { return column.closureType === \"ancestor\"; });\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(function (column) { return column.closureType === \"descendant\"; });\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated || column.isObjectId; });\n        entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated || column.generationStrategy === \"uuid\"; }).length > 0;\n        entityMetadata.createDateColumn = entityMetadata.columns.find(function (column) { return column.isCreateDate; });\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(function (column) { return column.isUpdateDate; });\n        entityMetadata.versionColumn = entityMetadata.columns.find(function (column) { return column.isVersion; });\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(function (column) { return column.isDiscriminator; });\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(function (column) { return column.isTreeLevel; });\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(function (column) { return column.isNestedSetLeft; });\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(function (column) { return column.isNestedSetRight; });\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(function (column) { return column.isMaterializedPath; });\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(function (column) { return column.isObjectId; });\n        entityMetadata.foreignKeys.forEach(function (foreignKey) { return foreignKey.build(_this.connection.namingStrategy); });\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach(function (relationId) { return relationId.build(); });\n        entityMetadata.relationCounts.forEach(function (relationCount) { return relationCount.build(); });\n        entityMetadata.embeddeds.forEach(function (embedded) {\n            embedded.relationIdsFromTree.forEach(function (relationId) { return relationId.build(); });\n            embedded.relationCountsFromTree.forEach(function (relationCount) { return relationCount.build(); });\n        });\n    };\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    EntityMetadataBuilder.prototype.computeInverseProperties = function (entityMetadata, entityMetadatas) {\n        entityMetadata.relations.forEach(function (relation) {\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            var inverseEntityMetadata = entityMetadatas.find(function (m) { return m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type); });\n            if (!inverseEntityMetadata)\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(function (foundRelation) { return foundRelation.propertyPath === relation.inverseSidePropertyPath; });\n        });\n    };\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    EntityMetadataBuilder.prototype.createKeysForTableInheritance = function (entityMetadata) {\n        entityMetadata.indices.push(new IndexMetadata_1.IndexMetadata({\n            entityMetadata: entityMetadata,\n            columns: [entityMetadata.discriminatorColumn],\n            args: {\n                target: entityMetadata.target,\n                unique: false\n            }\n        }), new IndexMetadata_1.IndexMetadata({\n            entityMetadata: entityMetadata,\n            columns: entityMetadata.primaryColumns.concat([entityMetadata.discriminatorColumn]),\n            args: {\n                target: entityMetadata.target,\n                unique: false\n            }\n        }));\n    };\n    return EntityMetadataBuilder;\n}());\nexports.EntityMetadataBuilder = EntityMetadataBuilder;\n\n//# sourceMappingURL=EntityMetadataBuilder.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}}],"sources":{"../node_modules/typeorm/metadata-builder/EntityMetadataBuilder.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityMetadata_1 = require(\"../metadata/EntityMetadata\");\nvar ColumnMetadata_1 = require(\"../metadata/ColumnMetadata\");\nvar IndexMetadata_1 = require(\"../metadata/IndexMetadata\");\nvar RelationMetadata_1 = require(\"../metadata/RelationMetadata\");\nvar EmbeddedMetadata_1 = require(\"../metadata/EmbeddedMetadata\");\nvar RelationIdMetadata_1 = require(\"../metadata/RelationIdMetadata\");\nvar RelationCountMetadata_1 = require(\"../metadata/RelationCountMetadata\");\nvar MetadataUtils_1 = require(\"./MetadataUtils\");\nvar JunctionEntityMetadataBuilder_1 = require(\"./JunctionEntityMetadataBuilder\");\nvar ClosureJunctionEntityMetadataBuilder_1 = require(\"./ClosureJunctionEntityMetadataBuilder\");\nvar RelationJoinColumnBuilder_1 = require(\"./RelationJoinColumnBuilder\");\nvar EntityListenerMetadata_1 = require(\"../metadata/EntityListenerMetadata\");\nvar UniqueMetadata_1 = require(\"../metadata/UniqueMetadata\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar CheckMetadata_1 = require(\"../metadata/CheckMetadata\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nvar EntityMetadataBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityMetadataBuilder(connection, metadataArgsStorage) {\n        this.connection = connection;\n        this.metadataArgsStorage = metadataArgsStorage;\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder_1.JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder_1.ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder_1.RelationJoinColumnBuilder(connection);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    EntityMetadataBuilder.prototype.build = function (entityClasses) {\n        var _this = this;\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        var allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        var realTables = allTables.filter(function (table) { return table.type === \"regular\" || table.type === \"closure\" || table.type === \"entity-child\"; });\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        var entityMetadatas = realTables.map(function (tableArgs) { return _this.createEntityMetadata(tableArgs); });\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeParentEntityMetadata(entityMetadatas, entityMetadata); });\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach(function (metadata) {\n            metadata.childEntityMetadatas = entityMetadatas.filter(function (childMetadata) {\n                return metadata.target instanceof Function\n                    && childMetadata.target instanceof Function\n                    && MetadataUtils_1.MetadataUtils.isInherited(childMetadata.target, metadata.target);\n            });\n        });\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) { return entityMetadata.build(); });\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType === \"entity-child\"; })\n            .forEach(function (entityMetadata) { return entityMetadata.build(); });\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) { return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata); });\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType === \"entity-child\"; })\n            .forEach(function (entityMetadata) { return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata); });\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeEntityMetadataStep2(entityMetadata); });\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeInverseProperties(entityMetadata, entityMetadatas); });\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) {\n            // create entity's relations join columns (for many-to-one and one-to-one owner)\n            entityMetadata.relations.filter(function (relation) { return relation.isOneToOne || relation.isManyToOne; }).forEach(function (relation) {\n                var joinColumns = _this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                var _a = _this.relationJoinColumnBuilder.build(joinColumns, relation), foreignKey = _a.foreignKey, uniqueConstraint = _a.uniqueConstraint; // create a foreign key based on its metadata args\n                if (foreignKey) {\n                    relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                    entityMetadata.foreignKeys.push(foreignKey);\n                }\n                if (uniqueConstraint) {\n                    if (_this.connection.driver instanceof MysqlDriver_1.MysqlDriver || _this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                        var index = new IndexMetadata_1.IndexMetadata({\n                            entityMetadata: uniqueConstraint.entityMetadata,\n                            columns: uniqueConstraint.columns,\n                            args: {\n                                target: uniqueConstraint.target,\n                                name: uniqueConstraint.name,\n                                unique: true,\n                                synchronize: true\n                            }\n                        });\n                        if (_this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                            index.where = index.columns.map(function (column) {\n                                return _this.connection.driver.escape(column.databaseName) + \" IS NOT NULL\";\n                            }).join(\" AND \");\n                        }\n                        entityMetadata.indices.push(index);\n                    }\n                    else {\n                        entityMetadata.uniques.push(uniqueConstraint);\n                    }\n                }\n            });\n            // create junction entity metadatas for entity many-to-many relations\n            entityMetadata.relations.filter(function (relation) { return relation.isManyToMany; }).forEach(function (relation) {\n                var joinTable = _this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\n                if (!joinTable)\n                    return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n                // here we create a junction entity metadata for a new junction table of many-to-many relation\n                var junctionEntityMetadata = _this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                relation.registerForeignKeys.apply(relation, junctionEntityMetadata.foreignKeys);\n                relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n                // compute new entity metadata properties and push it to entity metadatas pool\n                _this.computeEntityMetadataStep2(junctionEntityMetadata);\n                _this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(junctionEntityMetadata);\n            });\n        });\n        // update entity metadata depend properties\n        entityMetadatas\n            .forEach(function (entityMetadata) {\n            entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(function (relation) { return relation.isWithJoinColumn; });\n            entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(function (relation) { return !relation.isNullable || relation.isPrimary; });\n        });\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter(function (metadata) { return metadata.treeType === \"closure-table\"; })\n            .forEach(function (entityMetadata) {\n            var closureJunctionEntityMetadata = _this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n            entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n            _this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n            _this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n            entityMetadatas.push(closureJunctionEntityMetadata);\n        });\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(function (metadata) { return metadata.inheritancePattern === \"STI\" && metadata.discriminatorColumn; })\n            .forEach(function (entityMetadata) { return _this.createKeysForTableInheritance(entityMetadata); });\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.indices.forEach(function (index) { return index.build(_this.connection.namingStrategy); });\n        });\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.uniques.forEach(function (unique) { return unique.build(_this.connection.namingStrategy); });\n        });\n        // build all check constraints\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.checks.forEach(function (check) { return check.build(_this.connection.namingStrategy); });\n        });\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter(function (metadata) { return metadata.target instanceof Function; })\n            .forEach(function (entityMetadata) {\n            entityMetadata.relations\n                .filter(function (relation) { return relation.isLazy; })\n                .forEach(function (relation) {\n                _this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);\n            });\n        });\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.columns.forEach(function (column) {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                var generated = _this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n                if (generated) {\n                    column.isGenerated = true;\n                    column.generationStrategy = generated.strategy;\n                    column.type = generated.strategy === \"increment\" ? (column.type || Number) : \"uuid\";\n                    column.build(_this.connection);\n                    _this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n        });\n        return entityMetadatas;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    EntityMetadataBuilder.prototype.createEntityMetadata = function (tableArgs) {\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        var inheritanceTree = tableArgs.target instanceof Function\n            ? MetadataUtils_1.MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n        var tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        var tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        var singleTableChildrenTargets;\n        if ((tableInheritance && tableInheritance.pattern === \"STI\") || tableArgs.type === \"entity-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map(function (args) { return args.target; })\n                .filter(function (target) { return target instanceof Function; });\n            inheritanceTree.push.apply(inheritanceTree, singleTableChildrenTargets);\n        }\n        return new EntityMetadata_1.EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined\n        });\n    };\n    EntityMetadataBuilder.prototype.computeParentEntityMetadata = function (allEntityMetadatas, entityMetadata) {\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(function (allEntityMetadata) {\n                return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 && allEntityMetadata.inheritancePattern === \"STI\";\n            });\n        }\n    };\n    EntityMetadataBuilder.prototype.computeEntityMetadataStep1 = function (allEntityMetadatas, entityMetadata) {\n        var _this = this;\n        var entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n        var discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n        entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : entityMetadata.target.name; // todo: pass this to naming strategy to generate a name\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree));\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map(function (args) {\n            // for single table children we reuse columns created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownColumns.find(function (column) { return column.propertyName === args.propertyName; });\n            var column = new ColumnMetadata_1.ColumnMetadata({ connection: _this.connection, entityMetadata: entityMetadata, args: args });\n            // if single table inheritance used, we need to mark all inherit table columns as nullable\n            var columnInSingleTableInheritedChild = allEntityMetadatas.find(function (otherEntityMetadata) { return otherEntityMetadata.tableType === \"entity-child\" && otherEntityMetadata.target === args.target; });\n            if (columnInSingleTableInheritedChild)\n                column.isNullable = true;\n            return column;\n        });\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            var discriminatorColumnName_1 = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : \"type\";\n            var discriminatorColumn = entityMetadata.ownColumns.find(function (column) { return column.propertyName === discriminatorColumnName_1; });\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata_1.ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName_1,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName_1,\n                            type: \"varchar\",\n                            nullable: false\n                        }\n                    }\n                });\n                discriminatorColumn.isVirtual = true;\n                discriminatorColumn.isDiscriminator = true;\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n            else {\n                discriminatorColumn.isDiscriminator = true;\n            }\n        }\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            var discriminatorColumn_1 = entityMetadata.parentEntityMetadata.ownColumns.find(function (column) { return column.isDiscriminator; });\n            if (discriminatorColumn_1 && !entityMetadata.ownColumns.find(function (column) { return column === discriminatorColumn_1; })) {\n                entityMetadata.ownColumns.push(discriminatorColumn_1);\n            }\n        }\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata_1.ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                materializedPath: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"mpath\",\n                    options: /*tree.column || */ {\n                        name: \"mpath\",\n                        type: \"varchar\",\n                        nullable: true,\n                        default: \"\"\n                    }\n                }\n            }));\n        }\n        else if (entityMetadata.treeType === \"nested-set\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata_1.ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetLeft: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"nsleft\",\n                    options: /*tree.column || */ {\n                        name: \"nsleft\",\n                        type: \"integer\",\n                        nullable: false,\n                        default: 1\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata_1.ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetRight: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"nsright\",\n                    options: /*tree.column || */ {\n                        name: \"nsright\",\n                        type: \"integer\",\n                        nullable: false,\n                        default: 2\n                    }\n                }\n            }));\n        }\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relations created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownRelations.find(function (relation) { return relation.propertyName === args.propertyName; });\n            return new RelationMetadata_1.RelationMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relation ids created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationIds.find(function (relationId) { return relationId.propertyName === args.propertyName; });\n            return new RelationIdMetadata_1.RelationIdMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relation counts created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationCounts.find(function (relationCount) { return relationCount.propertyName === args.propertyName; });\n            return new RelationCountMetadata_1.RelationCountMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(function (args) {\n            return new IndexMetadata_1.IndexMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(function (args) {\n            return new EntityListenerMetadata_1.EntityListenerMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(function (args) {\n            return new CheckMetadata_1.CheckMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        // Mysql stores unique constraints as unique indices.\n        if (this.connection.driver instanceof MysqlDriver_1.MysqlDriver) {\n            var indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {\n                return new IndexMetadata_1.IndexMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                        unique: true,\n                        synchronize: true\n                    }\n                });\n            });\n            (_a = entityMetadata.ownIndices).push.apply(_a, indices);\n        }\n        else {\n            entityMetadata.uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {\n                return new UniqueMetadata_1.UniqueMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n        }\n        var _a;\n    };\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    EntityMetadataBuilder.prototype.createEmbeddedsRecursively = function (entityMetadata, embeddedArgs) {\n        var _this = this;\n        return embeddedArgs.map(function (embeddedArgs) {\n            var embeddedMetadata = new EmbeddedMetadata_1.EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\n            var targets = MetadataUtils_1.MetadataUtils.getInheritanceTree(embeddedMetadata.type);\n            embeddedMetadata.columns = _this.metadataArgsStorage.filterColumns(targets).map(function (args) {\n                return new ColumnMetadata_1.ColumnMetadata({ connection: _this.connection, entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.relations = _this.metadataArgsStorage.filterRelations(targets).map(function (args) {\n                return new RelationMetadata_1.RelationMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.listeners = _this.metadataArgsStorage.filterListeners(targets).map(function (args) {\n                return new EntityListenerMetadata_1.EntityListenerMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.indices = _this.metadataArgsStorage.filterIndices(targets).map(function (args) {\n                return new IndexMetadata_1.IndexMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.relationIds = _this.metadataArgsStorage.filterRelationIds(targets).map(function (args) {\n                return new RelationIdMetadata_1.RelationIdMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            embeddedMetadata.relationCounts = _this.metadataArgsStorage.filterRelationCounts(targets).map(function (args) {\n                return new RelationCountMetadata_1.RelationCountMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            embeddedMetadata.embeddeds = _this.createEmbeddedsRecursively(entityMetadata, _this.metadataArgsStorage.filterEmbeddeds(targets));\n            embeddedMetadata.embeddeds.forEach(function (subEmbedded) { return subEmbedded.parentEmbeddedMetadata = embeddedMetadata; });\n            entityMetadata.allEmbeddeds.push(embeddedMetadata);\n            return embeddedMetadata;\n        });\n    };\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    EntityMetadataBuilder.prototype.computeEntityMetadataStep2 = function (entityMetadata) {\n        var _this = this;\n        entityMetadata.embeddeds.forEach(function (embedded) { return embedded.build(_this.connection); });\n        entityMetadata.embeddeds.forEach(function (embedded) {\n            embedded.columnsFromTree.forEach(function (column) { return column.build(_this.connection); });\n            embedded.relationsFromTree.forEach(function (relation) { return relation.build(); });\n        });\n        entityMetadata.ownColumns.forEach(function (column) { return column.build(_this.connection); });\n        entityMetadata.ownRelations.forEach(function (relation) { return relation.build(); });\n        entityMetadata.relations = entityMetadata.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.relationsFromTree); }, entityMetadata.ownRelations);\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(function (relation) { return relation.isEager; });\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(function (relation) { return relation.isLazy; });\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToOne; });\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToMany; });\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToOne; });\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToMany; });\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToOneOwner; });\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToManyOwner; });\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(function (relation) { return relation.isTreeParent; });\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(function (relation) { return relation.isTreeChildren; });\n        entityMetadata.columns = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.columnsFromTree); }, entityMetadata.ownColumns);\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.listenersFromTree); }, entityMetadata.ownListeners);\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-load\"; });\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-insert\"; });\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-update\"; });\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-remove\"; });\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-insert\"; });\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-update\"; });\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-remove\"; });\n        entityMetadata.indices = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.indicesFromTree); }, entityMetadata.ownIndices);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(function (column) { return column.isPrimary; });\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(function (column) { return !column.isVirtual; });\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(function (column) { return column.closureType === \"ancestor\"; });\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(function (column) { return column.closureType === \"descendant\"; });\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated || column.isObjectId; });\n        entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated || column.generationStrategy === \"uuid\"; }).length > 0;\n        entityMetadata.createDateColumn = entityMetadata.columns.find(function (column) { return column.isCreateDate; });\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(function (column) { return column.isUpdateDate; });\n        entityMetadata.versionColumn = entityMetadata.columns.find(function (column) { return column.isVersion; });\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(function (column) { return column.isDiscriminator; });\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(function (column) { return column.isTreeLevel; });\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(function (column) { return column.isNestedSetLeft; });\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(function (column) { return column.isNestedSetRight; });\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(function (column) { return column.isMaterializedPath; });\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(function (column) { return column.isObjectId; });\n        entityMetadata.foreignKeys.forEach(function (foreignKey) { return foreignKey.build(_this.connection.namingStrategy); });\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach(function (relationId) { return relationId.build(); });\n        entityMetadata.relationCounts.forEach(function (relationCount) { return relationCount.build(); });\n        entityMetadata.embeddeds.forEach(function (embedded) {\n            embedded.relationIdsFromTree.forEach(function (relationId) { return relationId.build(); });\n            embedded.relationCountsFromTree.forEach(function (relationCount) { return relationCount.build(); });\n        });\n    };\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    EntityMetadataBuilder.prototype.computeInverseProperties = function (entityMetadata, entityMetadatas) {\n        entityMetadata.relations.forEach(function (relation) {\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            var inverseEntityMetadata = entityMetadatas.find(function (m) { return m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type); });\n            if (!inverseEntityMetadata)\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(function (foundRelation) { return foundRelation.propertyPath === relation.inverseSidePropertyPath; });\n        });\n    };\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    EntityMetadataBuilder.prototype.createKeysForTableInheritance = function (entityMetadata) {\n        entityMetadata.indices.push(new IndexMetadata_1.IndexMetadata({\n            entityMetadata: entityMetadata,\n            columns: [entityMetadata.discriminatorColumn],\n            args: {\n                target: entityMetadata.target,\n                unique: false\n            }\n        }), new IndexMetadata_1.IndexMetadata({\n            entityMetadata: entityMetadata,\n            columns: entityMetadata.primaryColumns.concat([entityMetadata.discriminatorColumn]),\n            args: {\n                target: entityMetadata.target,\n                unique: false\n            }\n        }));\n    };\n    return EntityMetadataBuilder;\n}());\nexports.EntityMetadataBuilder = EntityMetadataBuilder;\n\n//# sourceMappingURL=EntityMetadataBuilder.js.map\n"},"lineCount":515}},"hash":"24b76773985182b9053fcdd71686aee7","cacheData":{"env":{}}}