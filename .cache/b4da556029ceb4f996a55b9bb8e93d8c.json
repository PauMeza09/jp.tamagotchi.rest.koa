{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../../","loc":{"line":3,"column":17}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"../../\");\n/**\n * Wraps some method into the transaction.\n *\n * Method result will return a promise if this decorator applied.\n * All database operations in the wrapped method should be executed using entity managed passed\n * as a first parameter into the wrapped method.\n *\n * If you want to control at what position in your method parameters entity manager should be injected,\n * then use @TransactionEntityManager() decorator.\n *\n * If you want to use repositories instead of bare entity manager,\n * then use @TransactionRepository() decorator.\n */\nfunction Transaction(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return function (target, methodName, descriptor) {\n        // save original method - we gonna need it\n        var originalMethod = descriptor.value;\n        // override method descriptor with proxy method\n        descriptor.value = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return _1.getConnection(connectionName).manager.transaction(function (entityManager) {\n                var argsWithInjectedTransactionManagerAndRepositories;\n                // filter all @TransactionEntityManager() and @TransactionRepository() decorator usages for this method\n                var transactionEntityManagerMetadatas = _1.getMetadataArgsStorage()\n                    .filterTransactionEntityManagers(target.constructor, methodName)\n                    .reverse();\n                var transactionRepositoryMetadatas = _1.getMetadataArgsStorage()\n                    .filterTransactionRepository(target.constructor, methodName)\n                    .reverse();\n                // if there are @TransactionEntityManager() decorator usages the inject them\n                if (transactionEntityManagerMetadatas.length > 0) {\n                    argsWithInjectedTransactionManagerAndRepositories = args.slice();\n                    // replace method params with injection of transactionEntityManager\n                    transactionEntityManagerMetadatas.forEach(function (metadata) {\n                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);\n                    });\n                }\n                else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter\n                    argsWithInjectedTransactionManagerAndRepositories = [entityManager].concat(args);\n                }\n                else {\n                    argsWithInjectedTransactionManagerAndRepositories = args.slice();\n                }\n                // for every usage of @TransactionRepository decorator\n                transactionRepositoryMetadatas.forEach(function (metadata) {\n                    var repositoryInstance;\n                    // detect type of the repository and get instance from transaction entity manager\n                    switch (metadata.repositoryType) {\n                        case _1.Repository:\n                            repositoryInstance = entityManager.getRepository(metadata.entityType);\n                            break;\n                        case _1.MongoRepository:\n                            repositoryInstance = entityManager.getMongoRepository(metadata.entityType);\n                            break;\n                        case _1.TreeRepository:\n                            repositoryInstance = entityManager.getTreeRepository(metadata.entityType);\n                            break;\n                        // if not the TypeORM's ones, there must be custom repository classes\n                        default:\n                            repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);\n                    }\n                    // replace method param with injection of repository instance\n                    argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);\n                });\n                return originalMethod.apply(_this, argsWithInjectedTransactionManagerAndRepositories);\n            });\n        };\n    };\n}\nexports.Transaction = Transaction;\n\n//# sourceMappingURL=Transaction.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/Transaction.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}}],"sources":{"../node_modules/typeorm/decorator/transaction/Transaction.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"../../\");\n/**\n * Wraps some method into the transaction.\n *\n * Method result will return a promise if this decorator applied.\n * All database operations in the wrapped method should be executed using entity managed passed\n * as a first parameter into the wrapped method.\n *\n * If you want to control at what position in your method parameters entity manager should be injected,\n * then use @TransactionEntityManager() decorator.\n *\n * If you want to use repositories instead of bare entity manager,\n * then use @TransactionRepository() decorator.\n */\nfunction Transaction(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return function (target, methodName, descriptor) {\n        // save original method - we gonna need it\n        var originalMethod = descriptor.value;\n        // override method descriptor with proxy method\n        descriptor.value = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return _1.getConnection(connectionName).manager.transaction(function (entityManager) {\n                var argsWithInjectedTransactionManagerAndRepositories;\n                // filter all @TransactionEntityManager() and @TransactionRepository() decorator usages for this method\n                var transactionEntityManagerMetadatas = _1.getMetadataArgsStorage()\n                    .filterTransactionEntityManagers(target.constructor, methodName)\n                    .reverse();\n                var transactionRepositoryMetadatas = _1.getMetadataArgsStorage()\n                    .filterTransactionRepository(target.constructor, methodName)\n                    .reverse();\n                // if there are @TransactionEntityManager() decorator usages the inject them\n                if (transactionEntityManagerMetadatas.length > 0) {\n                    argsWithInjectedTransactionManagerAndRepositories = args.slice();\n                    // replace method params with injection of transactionEntityManager\n                    transactionEntityManagerMetadatas.forEach(function (metadata) {\n                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);\n                    });\n                }\n                else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter\n                    argsWithInjectedTransactionManagerAndRepositories = [entityManager].concat(args);\n                }\n                else {\n                    argsWithInjectedTransactionManagerAndRepositories = args.slice();\n                }\n                // for every usage of @TransactionRepository decorator\n                transactionRepositoryMetadatas.forEach(function (metadata) {\n                    var repositoryInstance;\n                    // detect type of the repository and get instance from transaction entity manager\n                    switch (metadata.repositoryType) {\n                        case _1.Repository:\n                            repositoryInstance = entityManager.getRepository(metadata.entityType);\n                            break;\n                        case _1.MongoRepository:\n                            repositoryInstance = entityManager.getMongoRepository(metadata.entityType);\n                            break;\n                        case _1.TreeRepository:\n                            repositoryInstance = entityManager.getTreeRepository(metadata.entityType);\n                            break;\n                        // if not the TypeORM's ones, there must be custom repository classes\n                        default:\n                            repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);\n                    }\n                    // replace method param with injection of repository instance\n                    argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);\n                });\n                return originalMethod.apply(_this, argsWithInjectedTransactionManagerAndRepositories);\n            });\n        };\n    };\n}\nexports.Transaction = Transaction;\n\n//# sourceMappingURL=Transaction.js.map\n"},"lineCount":81}},"hash":"f0c03d26016f987d18be3adb138a0259","cacheData":{"env":{}}}