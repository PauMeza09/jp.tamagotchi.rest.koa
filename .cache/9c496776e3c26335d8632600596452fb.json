{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../../error/ConnectionIsNotSetError","loc":{"line":38,"column":40}},{"name":"../../error/DriverPackageNotInstalledError","loc":{"line":39,"column":47}},{"name":"../DriverUtils","loc":{"line":40,"column":28}},{"name":"./PostgresQueryRunner","loc":{"line":41,"column":36}},{"name":"../../util/DateUtils","loc":{"line":42,"column":26}},{"name":"../../platform/PlatformTools","loc":{"line":43,"column":30}},{"name":"../../schema-builder/RdbmsSchemaBuilder","loc":{"line":44,"column":35}},{"name":"../../util/OrmUtils","loc":{"line":45,"column":25}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ConnectionIsNotSetError_1 = require(\"../../error/ConnectionIsNotSetError\");\nvar DriverPackageNotInstalledError_1 = require(\"../../error/DriverPackageNotInstalledError\");\nvar DriverUtils_1 = require(\"../DriverUtils\");\nvar PostgresQueryRunner_1 = require(\"./PostgresQueryRunner\");\nvar DateUtils_1 = require(\"../../util/DateUtils\");\nvar PlatformTools_1 = require(\"../../platform/PlatformTools\");\nvar RdbmsSchemaBuilder_1 = require(\"../../schema-builder/RdbmsSchemaBuilder\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\n/**\n * Organizes communication with PostgreSQL DBMS.\n */\nvar PostgresDriver = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function PostgresDriver(connection) {\n        /**\n         * Pool for slave databases.\n         * Used in replication.\n         */\n        this.slaves = [];\n        /**\n         * We store all created query runners because we need to release them.\n         */\n        this.connectedQueryRunners = [];\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/postgresql/postgresql_data_types.htm\n         * @see https://www.postgresql.org/docs/9.2/static/datatype.html\n         */\n        this.supportedDataTypes = [\n            \"int\",\n            \"int2\",\n            \"int4\",\n            \"int8\",\n            \"smallint\",\n            \"integer\",\n            \"bigint\",\n            \"decimal\",\n            \"numeric\",\n            \"real\",\n            \"float\",\n            \"float4\",\n            \"float8\",\n            \"double precision\",\n            \"money\",\n            \"character varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"text\",\n            \"citext\",\n            \"hstore\",\n            \"bytea\",\n            \"bit\",\n            \"varbit\",\n            \"bit varying\",\n            \"timetz\",\n            \"timestamptz\",\n            \"timestamp\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\",\n            \"date\",\n            \"time\",\n            \"time without time zone\",\n            \"time with time zone\",\n            \"interval\",\n            \"bool\",\n            \"boolean\",\n            \"enum\",\n            \"point\",\n            \"line\",\n            \"lseg\",\n            \"box\",\n            \"path\",\n            \"polygon\",\n            \"circle\",\n            \"cidr\",\n            \"inet\",\n            \"macaddr\",\n            \"tsvector\",\n            \"tsquery\",\n            \"uuid\",\n            \"xml\",\n            \"json\",\n            \"jsonb\",\n            \"int4range\",\n            \"int8range\",\n            \"numrange\",\n            \"tsrange\",\n            \"tstzrange\",\n            \"daterange\"\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"bit\",\n            \"varbit\",\n            \"bit varying\"\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"numeric\",\n            \"decimal\",\n            \"interval\",\n            \"time without time zone\",\n            \"time with time zone\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\"\n        ];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"numeric\",\n            \"decimal\"\n        ];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"timestamp\",\n            createDateDefault: \"now()\",\n            updateDate: \"timestamp\",\n            updateDateDefault: \"now()\",\n            version: \"int4\",\n            treeLevel: \"int4\",\n            migrationId: \"int4\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"int8\",\n            cacheId: \"int4\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"int8\",\n            cacheDuration: \"int4\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n        };\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            \"character\": { length: 1 },\n            \"bit\": { length: 1 },\n            \"interval\": { precision: 6 },\n            \"time without time zone\": { precision: 6 },\n            \"time with time zone\": { precision: 6 },\n            \"timestamp without time zone\": { precision: 6 },\n            \"timestamp with time zone\": { precision: 6 },\n        };\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = this.options.replication ? true : false;\n        // load postgres package\n        this.loadDependencies();\n        // Object.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    PostgresDriver.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.options.replication) return [3 /*break*/, 3];\n                        _a = this;\n                        return [4 /*yield*/, Promise.all(this.options.replication.slaves.map(function (slave) {\n                                return _this.createPool(_this.options, slave);\n                            }))];\n                    case 1:\n                        _a.slaves = _d.sent();\n                        _b = this;\n                        return [4 /*yield*/, this.createPool(this.options, this.options.replication.master)];\n                    case 2:\n                        _b.master = _d.sent();\n                        this.database = this.options.replication.master.database;\n                        return [3 /*break*/, 5];\n                    case 3:\n                        _c = this;\n                        return [4 /*yield*/, this.createPool(this.options, this.options)];\n                    case 4:\n                        _c.master = _d.sent();\n                        this.database = this.options.database;\n                        _d.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    PostgresDriver.prototype.afterConnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var hasUuidColumns, hasCitextColumns, hasHstoreColumns;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        hasUuidColumns = this.connection.entityMetadatas.some(function (metadata) {\n                            return metadata.generatedColumns.filter(function (column) { return column.generationStrategy === \"uuid\"; }).length > 0;\n                        });\n                        hasCitextColumns = this.connection.entityMetadatas.some(function (metadata) {\n                            return metadata.columns.filter(function (column) { return column.type === \"citext\"; }).length > 0;\n                        });\n                        hasHstoreColumns = this.connection.entityMetadatas.some(function (metadata) {\n                            return metadata.columns.filter(function (column) { return column.type === \"hstore\"; }).length > 0;\n                        });\n                        if (!(hasUuidColumns || hasCitextColumns || hasHstoreColumns)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all([this.master].concat(this.slaves).map(function (pool) {\n                                return new Promise(function (ok, fail) {\n                                    pool.connect(function (err, connection, release) { return __awaiter(_this, void 0, void 0, function () {\n                                        var logger, _1, _2, _3;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    logger = this.connection.logger;\n                                                    if (err)\n                                                        return [2 /*return*/, fail(err)];\n                                                    if (!hasUuidColumns) return [3 /*break*/, 4];\n                                                    _a.label = 1;\n                                                case 1:\n                                                    _a.trys.push([1, 3, , 4]);\n                                                    return [4 /*yield*/, this.executeQuery(connection, \"CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\"\")];\n                                                case 2:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 4];\n                                                case 3:\n                                                    _1 = _a.sent();\n                                                    logger.log(\"warn\", \"At least one of the entities has uuid column, but the 'uuid-ossp' extension cannot be installed automatically. Please install it manually using superuser rights\");\n                                                    return [3 /*break*/, 4];\n                                                case 4:\n                                                    if (!hasCitextColumns) return [3 /*break*/, 8];\n                                                    _a.label = 5;\n                                                case 5:\n                                                    _a.trys.push([5, 7, , 8]);\n                                                    return [4 /*yield*/, this.executeQuery(connection, \"CREATE EXTENSION IF NOT EXISTS \\\"citext\\\"\")];\n                                                case 6:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 8];\n                                                case 7:\n                                                    _2 = _a.sent();\n                                                    logger.log(\"warn\", \"At least one of the entities has citext column, but the 'citext' extension cannot be installed automatically. Please install it manually using superuser rights\");\n                                                    return [3 /*break*/, 8];\n                                                case 8:\n                                                    if (!hasHstoreColumns) return [3 /*break*/, 12];\n                                                    _a.label = 9;\n                                                case 9:\n                                                    _a.trys.push([9, 11, , 12]);\n                                                    return [4 /*yield*/, this.executeQuery(connection, \"CREATE EXTENSION IF NOT EXISTS \\\"hstore\\\"\")];\n                                                case 10:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 12];\n                                                case 11:\n                                                    _3 = _a.sent();\n                                                    logger.log(\"warn\", \"At least one of the entities has hstore column, but the 'hstore' extension cannot be installed automatically. Please install it manually using superuser rights\");\n                                                    return [3 /*break*/, 12];\n                                                case 12:\n                                                    release();\n                                                    ok();\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    }); });\n                                });\n                            }))];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, Promise.resolve()];\n                }\n            });\n        });\n    };\n    /**\n     * Closes connection with database.\n     */\n    PostgresDriver.prototype.disconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.master)\n                            return [2 /*return*/, Promise.reject(new ConnectionIsNotSetError_1.ConnectionIsNotSetError(\"postgres\"))];\n                        return [4 /*yield*/, this.closePool(this.master)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, Promise.all(this.slaves.map(function (slave) { return _this.closePool(slave); }))];\n                    case 2:\n                        _a.sent();\n                        this.master = undefined;\n                        this.slaves = [];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    PostgresDriver.prototype.createSchemaBuilder = function () {\n        return new RdbmsSchemaBuilder_1.RdbmsSchemaBuilder(this.connection);\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    PostgresDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        return new PostgresQueryRunner_1.PostgresQueryRunner(this, mode);\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    PostgresDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = columnMetadata.transformer.to(value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils_1.DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils_1.DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils_1.DateUtils.mixedDateToDate(value);\n        }\n        else if (columnMetadata.type === \"json\" || columnMetadata.type === \"jsonb\") {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"hstore\") {\n            if (typeof value === \"string\") {\n                return value;\n            }\n            else {\n                return Object.keys(value).map(function (key) {\n                    return \"\\\"\" + key + \"\\\"=>\\\"\" + value[key] + \"\\\"\";\n                }).join(\", \");\n            }\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils_1.DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils_1.DateUtils.simpleJsonToString(value);\n        }\n        return value;\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    PostgresDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            value = DateUtils_1.DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils_1.DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils_1.DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"hstore\") {\n            if (columnMetadata.hstoreType === \"object\") {\n                var regexp = /\"(.*?)\"=>\"(.*?[^\\\\\"])\"/gi;\n                var matchValue = value.match(regexp);\n                var object = {};\n                var match = void 0;\n                while (match = regexp.exec(matchValue)) {\n                    object[match[1].replace(\"\\\\\\\"\", \"\\\"\")] = match[2].replace(\"\\\\\\\"\", \"\\\"\");\n                }\n                return object;\n            }\n            else {\n                return value;\n            }\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils_1.DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils_1.DateUtils.stringToSimpleJson(value);\n        }\n        // manually convert enum array to array of values (pg does not support, see https://github.com/brianc/node-pg-types/issues/56)\n        if (columnMetadata.enum && columnMetadata.isArray)\n            value = value.substr(1).substr(0, value.length - 2).split(\",\");\n        if (columnMetadata.transformer)\n            value = columnMetadata.transformer.from(value);\n        return value;\n    };\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    PostgresDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {\n        var builtParameters = Object.keys(nativeParameters).map(function (key) { return nativeParameters[key]; });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n        var keys = Object.keys(parameters).map(function (parameter) { return \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\"; }).join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), function (key) {\n            var value;\n            var isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            }\n            else {\n                value = parameters[key.substr(1)];\n            }\n            if (isArray) {\n                return value.map(function (v) {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            }\n            else if (value instanceof Function) {\n                return value();\n            }\n            else {\n                builtParameters.push(value);\n                return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    };\n    /**\n     * Escapes a column name.\n     */\n    PostgresDriver.prototype.escape = function (columnName) {\n        return \"\\\"\" + columnName + \"\\\"\";\n    };\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    PostgresDriver.prototype.buildTableName = function (tableName, schema) {\n        return schema ? schema + \".\" + tableName : tableName;\n    };\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    PostgresDriver.prototype.normalizeType = function (column) {\n        if (column.type === Number || column.type === \"int\" || column.type === \"int4\") {\n            return \"integer\";\n        }\n        else if (column.type === String || column.type === \"varchar\") {\n            return \"character varying\";\n        }\n        else if (column.type === Date || column.type === \"timestamp\") {\n            return \"timestamp without time zone\";\n        }\n        else if (column.type === \"timestamptz\") {\n            return \"timestamp with time zone\";\n        }\n        else if (column.type === \"time\") {\n            return \"time without time zone\";\n        }\n        else if (column.type === \"timetz\") {\n            return \"time with time zone\";\n        }\n        else if (column.type === Boolean || column.type === \"bool\") {\n            return \"boolean\";\n        }\n        else if (column.type === \"simple-array\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"int2\") {\n            return \"smallint\";\n        }\n        else if (column.type === \"int8\") {\n            return \"bigint\";\n        }\n        else if (column.type === \"decimal\") {\n            return \"numeric\";\n        }\n        else if (column.type === \"float8\") {\n            return \"double precision\";\n        }\n        else if (column.type === \"float4\") {\n            return \"real\";\n        }\n        else if (column.type === \"char\") {\n            return \"character\";\n        }\n        else if (column.type === \"varbit\") {\n            return \"bit varying\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    };\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    PostgresDriver.prototype.normalizeDefault = function (columnMetadata) {\n        var defaultValue = columnMetadata.default;\n        var arrayCast = columnMetadata.isArray ? \"::\" + columnMetadata.type + \"[]\" : \"\";\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n        }\n        else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        else if (typeof defaultValue === \"string\") {\n            return \"'\" + defaultValue + \"'\" + arrayCast;\n        }\n        else if (typeof defaultValue === \"object\") {\n            return \"'\" + JSON.stringify(defaultValue) + \"'\";\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    PostgresDriver.prototype.normalizeIsUnique = function (column) {\n        return column.entityMetadata.uniques.some(function (uq) { return uq.columns.length === 1 && uq.columns[0] === column; });\n    };\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    PostgresDriver.prototype.getColumnLength = function (column) {\n        return column.length ? column.length.toString() : \"\";\n    };\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    PostgresDriver.prototype.createFullType = function (column) {\n        var type = column.type;\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.type === \"time without time zone\") {\n            type = \"TIME\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\");\n        }\n        else if (column.type === \"time with time zone\") {\n            type = \"TIME\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH TIME ZONE\";\n        }\n        else if (column.type === \"timestamp without time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\");\n        }\n        else if (column.type === \"timestamp with time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH TIME ZONE\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    };\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    PostgresDriver.prototype.obtainMasterConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            _this.master.connect(function (err, connection, release) {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    };\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    PostgresDriver.prototype.obtainSlaveConnection = function () {\n        var _this = this;\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n        return new Promise(function (ok, fail) {\n            var random = Math.floor(Math.random() * _this.slaves.length);\n            _this.slaves[random].connect(function (err, connection, release) {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    };\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     *\n     * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts\n     */\n    PostgresDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n        if (!insertResult)\n            return undefined;\n        return Object.keys(insertResult).reduce(function (map, key) {\n            var column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils_1.OrmUtils.mergeDeep(map, column.createValueMap(insertResult[key]));\n            }\n            return map;\n        }, {});\n    };\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    PostgresDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {\n        var _this = this;\n        return columnMetadatas.filter(function (columnMetadata) {\n            var tableColumn = tableColumns.find(function (c) { return c.name === columnMetadata.databaseName; });\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== _this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || (!tableColumn.isGenerated && _this.normalizeDefault(columnMetadata) !== tableColumn.default) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata)\n                || (tableColumn.enum && columnMetadata.enum && !OrmUtils_1.OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum))\n                || tableColumn.isGenerated !== columnMetadata.isGenerated;\n        });\n    };\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    PostgresDriver.prototype.isReturningSqlSupported = function () {\n        return true;\n    };\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    PostgresDriver.prototype.isUUIDGenerationSupported = function () {\n        return true;\n    };\n    /**\n     * Creates an escaped parameter.\n     */\n    PostgresDriver.prototype.createParameter = function (parameterName, index) {\n        return \"$\" + (index + 1);\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads postgres query stream package.\n     */\n    PostgresDriver.prototype.loadStreamDependency = function () {\n        try {\n            return PlatformTools_1.PlatformTools.load(\"pg-query-stream\");\n        }\n        catch (e) { // todo: better error for browser env\n            throw new Error(\"To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.\");\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    PostgresDriver.prototype.loadDependencies = function () {\n        try {\n            this.postgres = PlatformTools_1.PlatformTools.load(\"pg\");\n            try {\n                var pgNative = PlatformTools_1.PlatformTools.load(\"pg-native\");\n                if (pgNative && this.postgres.native)\n                    this.postgres = this.postgres.native;\n            }\n            catch (e) { }\n        }\n        catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    };\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    PostgresDriver.prototype.createPool = function (options, credentials) {\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionOptions, pool, logger;\n            return __generator(this, function (_a) {\n                credentials = Object.assign(credentials, DriverUtils_1.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n                connectionOptions = Object.assign({}, {\n                    host: credentials.host,\n                    user: credentials.username,\n                    password: credentials.password,\n                    database: credentials.database,\n                    port: credentials.port,\n                    ssl: credentials.ssl\n                }, options.extra || {});\n                pool = new this.postgres.Pool(connectionOptions);\n                logger = this.connection.logger;\n                /*\n                  Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n                  cause the hosting app to crash.\n                 */\n                pool.on(\"error\", function (error) { return logger.log(\"warn\", \"Postgres pool raised an error. \" + error); });\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        pool.connect(function (err, connection, release) {\n                            if (err)\n                                return fail(err);\n                            release();\n                            ok(pool);\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Closes connection pool.\n     */\n    PostgresDriver.prototype.closePool = function (pool) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, new Promise(function (ok, fail) {\n                                pool.end(function (err) { return err ? fail(err) : ok(); });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Executes given query.\n     */\n    PostgresDriver.prototype.executeQuery = function (connection, query) {\n        return new Promise(function (ok, fail) {\n            connection.query(query, function (err, result) {\n                if (err)\n                    return fail(err);\n                ok(result);\n            });\n        });\n    };\n    return PostgresDriver;\n}());\nexports.PostgresDriver = PostgresDriver;\n\n//# sourceMappingURL=PostgresDriver.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/typeorm/driver/postgres/PostgresDriver.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}}],"sources":{"../node_modules/typeorm/driver/postgres/PostgresDriver.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ConnectionIsNotSetError_1 = require(\"../../error/ConnectionIsNotSetError\");\nvar DriverPackageNotInstalledError_1 = require(\"../../error/DriverPackageNotInstalledError\");\nvar DriverUtils_1 = require(\"../DriverUtils\");\nvar PostgresQueryRunner_1 = require(\"./PostgresQueryRunner\");\nvar DateUtils_1 = require(\"../../util/DateUtils\");\nvar PlatformTools_1 = require(\"../../platform/PlatformTools\");\nvar RdbmsSchemaBuilder_1 = require(\"../../schema-builder/RdbmsSchemaBuilder\");\nvar OrmUtils_1 = require(\"../../util/OrmUtils\");\n/**\n * Organizes communication with PostgreSQL DBMS.\n */\nvar PostgresDriver = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function PostgresDriver(connection) {\n        /**\n         * Pool for slave databases.\n         * Used in replication.\n         */\n        this.slaves = [];\n        /**\n         * We store all created query runners because we need to release them.\n         */\n        this.connectedQueryRunners = [];\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/postgresql/postgresql_data_types.htm\n         * @see https://www.postgresql.org/docs/9.2/static/datatype.html\n         */\n        this.supportedDataTypes = [\n            \"int\",\n            \"int2\",\n            \"int4\",\n            \"int8\",\n            \"smallint\",\n            \"integer\",\n            \"bigint\",\n            \"decimal\",\n            \"numeric\",\n            \"real\",\n            \"float\",\n            \"float4\",\n            \"float8\",\n            \"double precision\",\n            \"money\",\n            \"character varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"text\",\n            \"citext\",\n            \"hstore\",\n            \"bytea\",\n            \"bit\",\n            \"varbit\",\n            \"bit varying\",\n            \"timetz\",\n            \"timestamptz\",\n            \"timestamp\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\",\n            \"date\",\n            \"time\",\n            \"time without time zone\",\n            \"time with time zone\",\n            \"interval\",\n            \"bool\",\n            \"boolean\",\n            \"enum\",\n            \"point\",\n            \"line\",\n            \"lseg\",\n            \"box\",\n            \"path\",\n            \"polygon\",\n            \"circle\",\n            \"cidr\",\n            \"inet\",\n            \"macaddr\",\n            \"tsvector\",\n            \"tsquery\",\n            \"uuid\",\n            \"xml\",\n            \"json\",\n            \"jsonb\",\n            \"int4range\",\n            \"int8range\",\n            \"numrange\",\n            \"tsrange\",\n            \"tstzrange\",\n            \"daterange\"\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"bit\",\n            \"varbit\",\n            \"bit varying\"\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"numeric\",\n            \"decimal\",\n            \"interval\",\n            \"time without time zone\",\n            \"time with time zone\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\"\n        ];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"numeric\",\n            \"decimal\"\n        ];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"timestamp\",\n            createDateDefault: \"now()\",\n            updateDate: \"timestamp\",\n            updateDateDefault: \"now()\",\n            version: \"int4\",\n            treeLevel: \"int4\",\n            migrationId: \"int4\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"int8\",\n            cacheId: \"int4\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"int8\",\n            cacheDuration: \"int4\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n        };\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            \"character\": { length: 1 },\n            \"bit\": { length: 1 },\n            \"interval\": { precision: 6 },\n            \"time without time zone\": { precision: 6 },\n            \"time with time zone\": { precision: 6 },\n            \"timestamp without time zone\": { precision: 6 },\n            \"timestamp with time zone\": { precision: 6 },\n        };\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = this.options.replication ? true : false;\n        // load postgres package\n        this.loadDependencies();\n        // Object.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    PostgresDriver.prototype.connect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.options.replication) return [3 /*break*/, 3];\n                        _a = this;\n                        return [4 /*yield*/, Promise.all(this.options.replication.slaves.map(function (slave) {\n                                return _this.createPool(_this.options, slave);\n                            }))];\n                    case 1:\n                        _a.slaves = _d.sent();\n                        _b = this;\n                        return [4 /*yield*/, this.createPool(this.options, this.options.replication.master)];\n                    case 2:\n                        _b.master = _d.sent();\n                        this.database = this.options.replication.master.database;\n                        return [3 /*break*/, 5];\n                    case 3:\n                        _c = this;\n                        return [4 /*yield*/, this.createPool(this.options, this.options)];\n                    case 4:\n                        _c.master = _d.sent();\n                        this.database = this.options.database;\n                        _d.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    PostgresDriver.prototype.afterConnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var hasUuidColumns, hasCitextColumns, hasHstoreColumns;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        hasUuidColumns = this.connection.entityMetadatas.some(function (metadata) {\n                            return metadata.generatedColumns.filter(function (column) { return column.generationStrategy === \"uuid\"; }).length > 0;\n                        });\n                        hasCitextColumns = this.connection.entityMetadatas.some(function (metadata) {\n                            return metadata.columns.filter(function (column) { return column.type === \"citext\"; }).length > 0;\n                        });\n                        hasHstoreColumns = this.connection.entityMetadatas.some(function (metadata) {\n                            return metadata.columns.filter(function (column) { return column.type === \"hstore\"; }).length > 0;\n                        });\n                        if (!(hasUuidColumns || hasCitextColumns || hasHstoreColumns)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all([this.master].concat(this.slaves).map(function (pool) {\n                                return new Promise(function (ok, fail) {\n                                    pool.connect(function (err, connection, release) { return __awaiter(_this, void 0, void 0, function () {\n                                        var logger, _1, _2, _3;\n                                        return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                                case 0:\n                                                    logger = this.connection.logger;\n                                                    if (err)\n                                                        return [2 /*return*/, fail(err)];\n                                                    if (!hasUuidColumns) return [3 /*break*/, 4];\n                                                    _a.label = 1;\n                                                case 1:\n                                                    _a.trys.push([1, 3, , 4]);\n                                                    return [4 /*yield*/, this.executeQuery(connection, \"CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\"\")];\n                                                case 2:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 4];\n                                                case 3:\n                                                    _1 = _a.sent();\n                                                    logger.log(\"warn\", \"At least one of the entities has uuid column, but the 'uuid-ossp' extension cannot be installed automatically. Please install it manually using superuser rights\");\n                                                    return [3 /*break*/, 4];\n                                                case 4:\n                                                    if (!hasCitextColumns) return [3 /*break*/, 8];\n                                                    _a.label = 5;\n                                                case 5:\n                                                    _a.trys.push([5, 7, , 8]);\n                                                    return [4 /*yield*/, this.executeQuery(connection, \"CREATE EXTENSION IF NOT EXISTS \\\"citext\\\"\")];\n                                                case 6:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 8];\n                                                case 7:\n                                                    _2 = _a.sent();\n                                                    logger.log(\"warn\", \"At least one of the entities has citext column, but the 'citext' extension cannot be installed automatically. Please install it manually using superuser rights\");\n                                                    return [3 /*break*/, 8];\n                                                case 8:\n                                                    if (!hasHstoreColumns) return [3 /*break*/, 12];\n                                                    _a.label = 9;\n                                                case 9:\n                                                    _a.trys.push([9, 11, , 12]);\n                                                    return [4 /*yield*/, this.executeQuery(connection, \"CREATE EXTENSION IF NOT EXISTS \\\"hstore\\\"\")];\n                                                case 10:\n                                                    _a.sent();\n                                                    return [3 /*break*/, 12];\n                                                case 11:\n                                                    _3 = _a.sent();\n                                                    logger.log(\"warn\", \"At least one of the entities has hstore column, but the 'hstore' extension cannot be installed automatically. Please install it manually using superuser rights\");\n                                                    return [3 /*break*/, 12];\n                                                case 12:\n                                                    release();\n                                                    ok();\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    }); });\n                                });\n                            }))];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, Promise.resolve()];\n                }\n            });\n        });\n    };\n    /**\n     * Closes connection with database.\n     */\n    PostgresDriver.prototype.disconnect = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.master)\n                            return [2 /*return*/, Promise.reject(new ConnectionIsNotSetError_1.ConnectionIsNotSetError(\"postgres\"))];\n                        return [4 /*yield*/, this.closePool(this.master)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, Promise.all(this.slaves.map(function (slave) { return _this.closePool(slave); }))];\n                    case 2:\n                        _a.sent();\n                        this.master = undefined;\n                        this.slaves = [];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    PostgresDriver.prototype.createSchemaBuilder = function () {\n        return new RdbmsSchemaBuilder_1.RdbmsSchemaBuilder(this.connection);\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    PostgresDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        return new PostgresQueryRunner_1.PostgresQueryRunner(this, mode);\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    PostgresDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = columnMetadata.transformer.to(value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils_1.DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils_1.DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils_1.DateUtils.mixedDateToDate(value);\n        }\n        else if (columnMetadata.type === \"json\" || columnMetadata.type === \"jsonb\") {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"hstore\") {\n            if (typeof value === \"string\") {\n                return value;\n            }\n            else {\n                return Object.keys(value).map(function (key) {\n                    return \"\\\"\" + key + \"\\\"=>\\\"\" + value[key] + \"\\\"\";\n                }).join(\", \");\n            }\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils_1.DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils_1.DateUtils.simpleJsonToString(value);\n        }\n        return value;\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    PostgresDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            value = DateUtils_1.DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils_1.DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils_1.DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"hstore\") {\n            if (columnMetadata.hstoreType === \"object\") {\n                var regexp = /\"(.*?)\"=>\"(.*?[^\\\\\"])\"/gi;\n                var matchValue = value.match(regexp);\n                var object = {};\n                var match = void 0;\n                while (match = regexp.exec(matchValue)) {\n                    object[match[1].replace(\"\\\\\\\"\", \"\\\"\")] = match[2].replace(\"\\\\\\\"\", \"\\\"\");\n                }\n                return object;\n            }\n            else {\n                return value;\n            }\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils_1.DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils_1.DateUtils.stringToSimpleJson(value);\n        }\n        // manually convert enum array to array of values (pg does not support, see https://github.com/brianc/node-pg-types/issues/56)\n        if (columnMetadata.enum && columnMetadata.isArray)\n            value = value.substr(1).substr(0, value.length - 2).split(\",\");\n        if (columnMetadata.transformer)\n            value = columnMetadata.transformer.from(value);\n        return value;\n    };\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    PostgresDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {\n        var builtParameters = Object.keys(nativeParameters).map(function (key) { return nativeParameters[key]; });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n        var keys = Object.keys(parameters).map(function (parameter) { return \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\"; }).join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), function (key) {\n            var value;\n            var isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            }\n            else {\n                value = parameters[key.substr(1)];\n            }\n            if (isArray) {\n                return value.map(function (v) {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            }\n            else if (value instanceof Function) {\n                return value();\n            }\n            else {\n                builtParameters.push(value);\n                return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    };\n    /**\n     * Escapes a column name.\n     */\n    PostgresDriver.prototype.escape = function (columnName) {\n        return \"\\\"\" + columnName + \"\\\"\";\n    };\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    PostgresDriver.prototype.buildTableName = function (tableName, schema) {\n        return schema ? schema + \".\" + tableName : tableName;\n    };\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    PostgresDriver.prototype.normalizeType = function (column) {\n        if (column.type === Number || column.type === \"int\" || column.type === \"int4\") {\n            return \"integer\";\n        }\n        else if (column.type === String || column.type === \"varchar\") {\n            return \"character varying\";\n        }\n        else if (column.type === Date || column.type === \"timestamp\") {\n            return \"timestamp without time zone\";\n        }\n        else if (column.type === \"timestamptz\") {\n            return \"timestamp with time zone\";\n        }\n        else if (column.type === \"time\") {\n            return \"time without time zone\";\n        }\n        else if (column.type === \"timetz\") {\n            return \"time with time zone\";\n        }\n        else if (column.type === Boolean || column.type === \"bool\") {\n            return \"boolean\";\n        }\n        else if (column.type === \"simple-array\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"int2\") {\n            return \"smallint\";\n        }\n        else if (column.type === \"int8\") {\n            return \"bigint\";\n        }\n        else if (column.type === \"decimal\") {\n            return \"numeric\";\n        }\n        else if (column.type === \"float8\") {\n            return \"double precision\";\n        }\n        else if (column.type === \"float4\") {\n            return \"real\";\n        }\n        else if (column.type === \"char\") {\n            return \"character\";\n        }\n        else if (column.type === \"varbit\") {\n            return \"bit varying\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    };\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    PostgresDriver.prototype.normalizeDefault = function (columnMetadata) {\n        var defaultValue = columnMetadata.default;\n        var arrayCast = columnMetadata.isArray ? \"::\" + columnMetadata.type + \"[]\" : \"\";\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n        }\n        else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        else if (typeof defaultValue === \"string\") {\n            return \"'\" + defaultValue + \"'\" + arrayCast;\n        }\n        else if (typeof defaultValue === \"object\") {\n            return \"'\" + JSON.stringify(defaultValue) + \"'\";\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    PostgresDriver.prototype.normalizeIsUnique = function (column) {\n        return column.entityMetadata.uniques.some(function (uq) { return uq.columns.length === 1 && uq.columns[0] === column; });\n    };\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    PostgresDriver.prototype.getColumnLength = function (column) {\n        return column.length ? column.length.toString() : \"\";\n    };\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    PostgresDriver.prototype.createFullType = function (column) {\n        var type = column.type;\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.type === \"time without time zone\") {\n            type = \"TIME\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\");\n        }\n        else if (column.type === \"time with time zone\") {\n            type = \"TIME\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH TIME ZONE\";\n        }\n        else if (column.type === \"timestamp without time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\");\n        }\n        else if (column.type === \"timestamp with time zone\") {\n            type = \"TIMESTAMP\" + (column.precision !== null && column.precision !== undefined ? \"(\" + column.precision + \")\" : \"\") + \" WITH TIME ZONE\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    };\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    PostgresDriver.prototype.obtainMasterConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            _this.master.connect(function (err, connection, release) {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    };\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    PostgresDriver.prototype.obtainSlaveConnection = function () {\n        var _this = this;\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n        return new Promise(function (ok, fail) {\n            var random = Math.floor(Math.random() * _this.slaves.length);\n            _this.slaves[random].connect(function (err, connection, release) {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    };\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     *\n     * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts\n     */\n    PostgresDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n        if (!insertResult)\n            return undefined;\n        return Object.keys(insertResult).reduce(function (map, key) {\n            var column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils_1.OrmUtils.mergeDeep(map, column.createValueMap(insertResult[key]));\n            }\n            return map;\n        }, {});\n    };\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    PostgresDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {\n        var _this = this;\n        return columnMetadatas.filter(function (columnMetadata) {\n            var tableColumn = tableColumns.find(function (c) { return c.name === columnMetadata.databaseName; });\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== _this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || (!tableColumn.isGenerated && _this.normalizeDefault(columnMetadata) !== tableColumn.default) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata)\n                || (tableColumn.enum && columnMetadata.enum && !OrmUtils_1.OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum))\n                || tableColumn.isGenerated !== columnMetadata.isGenerated;\n        });\n    };\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    PostgresDriver.prototype.isReturningSqlSupported = function () {\n        return true;\n    };\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    PostgresDriver.prototype.isUUIDGenerationSupported = function () {\n        return true;\n    };\n    /**\n     * Creates an escaped parameter.\n     */\n    PostgresDriver.prototype.createParameter = function (parameterName, index) {\n        return \"$\" + (index + 1);\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads postgres query stream package.\n     */\n    PostgresDriver.prototype.loadStreamDependency = function () {\n        try {\n            return PlatformTools_1.PlatformTools.load(\"pg-query-stream\");\n        }\n        catch (e) { // todo: better error for browser env\n            throw new Error(\"To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.\");\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    PostgresDriver.prototype.loadDependencies = function () {\n        try {\n            this.postgres = PlatformTools_1.PlatformTools.load(\"pg\");\n            try {\n                var pgNative = PlatformTools_1.PlatformTools.load(\"pg-native\");\n                if (pgNative && this.postgres.native)\n                    this.postgres = this.postgres.native;\n            }\n            catch (e) { }\n        }\n        catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    };\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    PostgresDriver.prototype.createPool = function (options, credentials) {\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionOptions, pool, logger;\n            return __generator(this, function (_a) {\n                credentials = Object.assign(credentials, DriverUtils_1.DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n                connectionOptions = Object.assign({}, {\n                    host: credentials.host,\n                    user: credentials.username,\n                    password: credentials.password,\n                    database: credentials.database,\n                    port: credentials.port,\n                    ssl: credentials.ssl\n                }, options.extra || {});\n                pool = new this.postgres.Pool(connectionOptions);\n                logger = this.connection.logger;\n                /*\n                  Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n                  cause the hosting app to crash.\n                 */\n                pool.on(\"error\", function (error) { return logger.log(\"warn\", \"Postgres pool raised an error. \" + error); });\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        pool.connect(function (err, connection, release) {\n                            if (err)\n                                return fail(err);\n                            release();\n                            ok(pool);\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Closes connection pool.\n     */\n    PostgresDriver.prototype.closePool = function (pool) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, new Promise(function (ok, fail) {\n                                pool.end(function (err) { return err ? fail(err) : ok(); });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Executes given query.\n     */\n    PostgresDriver.prototype.executeQuery = function (connection, query) {\n        return new Promise(function (ok, fail) {\n            connection.query(query, function (err, result) {\n                if (err)\n                    return fail(err);\n                ok(result);\n            });\n        });\n    };\n    return PostgresDriver;\n}());\nexports.PostgresDriver = PostgresDriver;\n\n//# sourceMappingURL=PostgresDriver.js.map\n"},"lineCount":841}},"hash":"0d79e14c426f658d29214f5f83fe5eba","cacheData":{"env":{}}}