{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./Repository","loc":{"line":13,"column":27}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Repository_1 = require(\"./Repository\");\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nvar MongoRepository = /** @class */ (function (_super) {\n    __extends(MongoRepository, _super);\n    function MongoRepository() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    MongoRepository.prototype.query = function (query, parameters) {\n        throw new Error(\"Queries aren't supported by MongoDB.\");\n    };\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {\n        throw new Error(\"Query Builder is not supported by MongoDB.\");\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    MongoRepository.prototype.find = function (optionsOrConditions) {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    MongoRepository.prototype.findAndCount = function (optionsOrConditions) {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    MongoRepository.prototype.findByIds = function (ids, optionsOrConditions) {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    };\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    MongoRepository.prototype.findOne = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    MongoRepository.prototype.createCursor = function (query) {\n        return this.manager.createCursor(this.metadata.target, query);\n    };\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    MongoRepository.prototype.createEntityCursor = function (query) {\n        return this.manager.createEntityCursor(this.metadata.target, query);\n    };\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    MongoRepository.prototype.aggregate = function (pipeline, options) {\n        return this.manager.aggregate(this.metadata.target, pipeline, options);\n    };\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    MongoRepository.prototype.aggregateEntity = function (pipeline, options) {\n        return this.manager.aggregateEntity(this.metadata.target, pipeline, options);\n    };\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    MongoRepository.prototype.bulkWrite = function (operations, options) {\n        return this.manager.bulkWrite(this.metadata.target, operations, options);\n    };\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    MongoRepository.prototype.count = function (query, options) {\n        return this.manager.count(this.metadata.target, query || {}, options);\n    };\n    /**\n     * Creates an index on the db and collection.\n     */\n    MongoRepository.prototype.createCollectionIndex = function (fieldOrSpec, options) {\n        return this.manager.createCollectionIndex(this.metadata.target, fieldOrSpec, options);\n    };\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    MongoRepository.prototype.createCollectionIndexes = function (indexSpecs) {\n        return this.manager.createCollectionIndexes(this.metadata.target, indexSpecs);\n    };\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    MongoRepository.prototype.deleteMany = function (query, options) {\n        return this.manager.deleteMany(this.metadata.tableName, query, options);\n    };\n    /**\n     * Delete a document on MongoDB.\n     */\n    MongoRepository.prototype.deleteOne = function (query, options) {\n        return this.manager.deleteOne(this.metadata.tableName, query, options);\n    };\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    MongoRepository.prototype.distinct = function (key, query, options) {\n        return this.manager.distinct(this.metadata.tableName, key, query, options);\n    };\n    /**\n     * Drops an index from this collection.\n     */\n    MongoRepository.prototype.dropCollectionIndex = function (indexName, options) {\n        return this.manager.dropCollectionIndex(this.metadata.tableName, indexName, options);\n    };\n    /**\n     * Drops all indexes from the collection.\n     */\n    MongoRepository.prototype.dropCollectionIndexes = function () {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName);\n    };\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    MongoRepository.prototype.findOneAndDelete = function (query, options) {\n        return this.manager.findOneAndDelete(this.metadata.tableName, query, options);\n    };\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    MongoRepository.prototype.findOneAndReplace = function (query, replacement, options) {\n        return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);\n    };\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    MongoRepository.prototype.findOneAndUpdate = function (query, update, options) {\n        return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);\n    };\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    MongoRepository.prototype.geoHaystackSearch = function (x, y, options) {\n        return this.manager.geoHaystackSearch(this.metadata.tableName, x, y, options);\n    };\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    MongoRepository.prototype.geoNear = function (x, y, options) {\n        return this.manager.geoNear(this.metadata.tableName, x, y, options);\n    };\n    /**\n     * Run a group command across a collection.\n     */\n    MongoRepository.prototype.group = function (keys, condition, initial, reduce, finalize, command, options) {\n        return this.manager.group(this.metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    };\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    MongoRepository.prototype.collectionIndexes = function () {\n        return this.manager.collectionIndexes(this.metadata.tableName);\n    };\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    MongoRepository.prototype.collectionIndexExists = function (indexes) {\n        return this.manager.collectionIndexExists(this.metadata.tableName, indexes);\n    };\n    /**\n     * Retrieves this collections index info.\n     */\n    MongoRepository.prototype.collectionIndexInformation = function (options) {\n        return this.manager.collectionIndexInformation(this.metadata.tableName, options);\n    };\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    MongoRepository.prototype.initializeOrderedBulkOp = function (options) {\n        return this.manager.initializeOrderedBulkOp(this.metadata.tableName, options);\n    };\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    MongoRepository.prototype.initializeUnorderedBulkOp = function (options) {\n        return this.manager.initializeUnorderedBulkOp(this.metadata.tableName, options);\n    };\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    MongoRepository.prototype.insertMany = function (docs, options) {\n        return this.manager.insertMany(this.metadata.tableName, docs, options);\n    };\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    MongoRepository.prototype.insertOne = function (doc, options) {\n        return this.manager.insertOne(this.metadata.tableName, doc, options);\n    };\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    MongoRepository.prototype.isCapped = function () {\n        return this.manager.isCapped(this.metadata.tableName);\n    };\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    MongoRepository.prototype.listCollectionIndexes = function (options) {\n        return this.manager.listCollectionIndexes(this.metadata.tableName, options);\n    };\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    MongoRepository.prototype.mapReduce = function (map, reduce, options) {\n        return this.manager.mapReduce(this.metadata.tableName, map, reduce, options);\n    };\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    MongoRepository.prototype.parallelCollectionScan = function (options) {\n        return this.manager.parallelCollectionScan(this.metadata.tableName, options);\n    };\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    MongoRepository.prototype.reIndex = function () {\n        return this.manager.reIndex(this.metadata.tableName);\n    };\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    MongoRepository.prototype.rename = function (newName, options) {\n        return this.manager.rename(this.metadata.tableName, newName, options);\n    };\n    /**\n     * Replace a document on MongoDB.\n     */\n    MongoRepository.prototype.replaceOne = function (query, doc, options) {\n        return this.manager.replaceOne(this.metadata.tableName, query, doc, options);\n    };\n    /**\n     * Get all the collection statistics.\n     */\n    MongoRepository.prototype.stats = function (options) {\n        return this.manager.stats(this.metadata.tableName, options);\n    };\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    MongoRepository.prototype.updateMany = function (query, update, options) {\n        return this.manager.updateMany(this.metadata.tableName, query, update, options);\n    };\n    /**\n     * Update a single document on MongoDB.\n     */\n    MongoRepository.prototype.updateOne = function (query, update, options) {\n        return this.manager.updateOne(this.metadata.tableName, query, update, options);\n    };\n    return MongoRepository;\n}(Repository_1.Repository));\nexports.MongoRepository = MongoRepository;\n\n//# sourceMappingURL=MongoRepository.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/repository/MongoRepository.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}}],"sources":{"../node_modules/typeorm/repository/MongoRepository.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Repository_1 = require(\"./Repository\");\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nvar MongoRepository = /** @class */ (function (_super) {\n    __extends(MongoRepository, _super);\n    function MongoRepository() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    MongoRepository.prototype.query = function (query, parameters) {\n        throw new Error(\"Queries aren't supported by MongoDB.\");\n    };\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    MongoRepository.prototype.createQueryBuilder = function (alias, queryRunner) {\n        throw new Error(\"Query Builder is not supported by MongoDB.\");\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    MongoRepository.prototype.find = function (optionsOrConditions) {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    MongoRepository.prototype.findAndCount = function (optionsOrConditions) {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    MongoRepository.prototype.findByIds = function (ids, optionsOrConditions) {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    };\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    MongoRepository.prototype.findOne = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    MongoRepository.prototype.createCursor = function (query) {\n        return this.manager.createCursor(this.metadata.target, query);\n    };\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    MongoRepository.prototype.createEntityCursor = function (query) {\n        return this.manager.createEntityCursor(this.metadata.target, query);\n    };\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    MongoRepository.prototype.aggregate = function (pipeline, options) {\n        return this.manager.aggregate(this.metadata.target, pipeline, options);\n    };\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    MongoRepository.prototype.aggregateEntity = function (pipeline, options) {\n        return this.manager.aggregateEntity(this.metadata.target, pipeline, options);\n    };\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    MongoRepository.prototype.bulkWrite = function (operations, options) {\n        return this.manager.bulkWrite(this.metadata.target, operations, options);\n    };\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    MongoRepository.prototype.count = function (query, options) {\n        return this.manager.count(this.metadata.target, query || {}, options);\n    };\n    /**\n     * Creates an index on the db and collection.\n     */\n    MongoRepository.prototype.createCollectionIndex = function (fieldOrSpec, options) {\n        return this.manager.createCollectionIndex(this.metadata.target, fieldOrSpec, options);\n    };\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    MongoRepository.prototype.createCollectionIndexes = function (indexSpecs) {\n        return this.manager.createCollectionIndexes(this.metadata.target, indexSpecs);\n    };\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    MongoRepository.prototype.deleteMany = function (query, options) {\n        return this.manager.deleteMany(this.metadata.tableName, query, options);\n    };\n    /**\n     * Delete a document on MongoDB.\n     */\n    MongoRepository.prototype.deleteOne = function (query, options) {\n        return this.manager.deleteOne(this.metadata.tableName, query, options);\n    };\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    MongoRepository.prototype.distinct = function (key, query, options) {\n        return this.manager.distinct(this.metadata.tableName, key, query, options);\n    };\n    /**\n     * Drops an index from this collection.\n     */\n    MongoRepository.prototype.dropCollectionIndex = function (indexName, options) {\n        return this.manager.dropCollectionIndex(this.metadata.tableName, indexName, options);\n    };\n    /**\n     * Drops all indexes from the collection.\n     */\n    MongoRepository.prototype.dropCollectionIndexes = function () {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName);\n    };\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    MongoRepository.prototype.findOneAndDelete = function (query, options) {\n        return this.manager.findOneAndDelete(this.metadata.tableName, query, options);\n    };\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    MongoRepository.prototype.findOneAndReplace = function (query, replacement, options) {\n        return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);\n    };\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    MongoRepository.prototype.findOneAndUpdate = function (query, update, options) {\n        return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);\n    };\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    MongoRepository.prototype.geoHaystackSearch = function (x, y, options) {\n        return this.manager.geoHaystackSearch(this.metadata.tableName, x, y, options);\n    };\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    MongoRepository.prototype.geoNear = function (x, y, options) {\n        return this.manager.geoNear(this.metadata.tableName, x, y, options);\n    };\n    /**\n     * Run a group command across a collection.\n     */\n    MongoRepository.prototype.group = function (keys, condition, initial, reduce, finalize, command, options) {\n        return this.manager.group(this.metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    };\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    MongoRepository.prototype.collectionIndexes = function () {\n        return this.manager.collectionIndexes(this.metadata.tableName);\n    };\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    MongoRepository.prototype.collectionIndexExists = function (indexes) {\n        return this.manager.collectionIndexExists(this.metadata.tableName, indexes);\n    };\n    /**\n     * Retrieves this collections index info.\n     */\n    MongoRepository.prototype.collectionIndexInformation = function (options) {\n        return this.manager.collectionIndexInformation(this.metadata.tableName, options);\n    };\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    MongoRepository.prototype.initializeOrderedBulkOp = function (options) {\n        return this.manager.initializeOrderedBulkOp(this.metadata.tableName, options);\n    };\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    MongoRepository.prototype.initializeUnorderedBulkOp = function (options) {\n        return this.manager.initializeUnorderedBulkOp(this.metadata.tableName, options);\n    };\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    MongoRepository.prototype.insertMany = function (docs, options) {\n        return this.manager.insertMany(this.metadata.tableName, docs, options);\n    };\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    MongoRepository.prototype.insertOne = function (doc, options) {\n        return this.manager.insertOne(this.metadata.tableName, doc, options);\n    };\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    MongoRepository.prototype.isCapped = function () {\n        return this.manager.isCapped(this.metadata.tableName);\n    };\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    MongoRepository.prototype.listCollectionIndexes = function (options) {\n        return this.manager.listCollectionIndexes(this.metadata.tableName, options);\n    };\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    MongoRepository.prototype.mapReduce = function (map, reduce, options) {\n        return this.manager.mapReduce(this.metadata.tableName, map, reduce, options);\n    };\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    MongoRepository.prototype.parallelCollectionScan = function (options) {\n        return this.manager.parallelCollectionScan(this.metadata.tableName, options);\n    };\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    MongoRepository.prototype.reIndex = function () {\n        return this.manager.reIndex(this.metadata.tableName);\n    };\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    MongoRepository.prototype.rename = function (newName, options) {\n        return this.manager.rename(this.metadata.tableName, newName, options);\n    };\n    /**\n     * Replace a document on MongoDB.\n     */\n    MongoRepository.prototype.replaceOne = function (query, doc, options) {\n        return this.manager.replaceOne(this.metadata.tableName, query, doc, options);\n    };\n    /**\n     * Get all the collection statistics.\n     */\n    MongoRepository.prototype.stats = function (options) {\n        return this.manager.stats(this.metadata.tableName, options);\n    };\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    MongoRepository.prototype.updateMany = function (query, update, options) {\n        return this.manager.updateMany(this.metadata.tableName, query, update, options);\n    };\n    /**\n     * Update a single document on MongoDB.\n     */\n    MongoRepository.prototype.updateOne = function (query, update, options) {\n        return this.manager.updateOne(this.metadata.tableName, query, update, options);\n    };\n    return MongoRepository;\n}(Repository_1.Repository));\nexports.MongoRepository = MongoRepository;\n\n//# sourceMappingURL=MongoRepository.js.map\n"},"lineCount":292}},"hash":"81548062e9b43f8df8c374ca232062a9","cacheData":{"env":{}}}