{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../../","loc":{"line":3,"column":17}},{"name":"../../error/CannotReflectMethodParameterTypeError","loc":{"line":4,"column":54}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"../../\");\nvar CannotReflectMethodParameterTypeError_1 = require(\"../../error/CannotReflectMethodParameterTypeError\");\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\nfunction TransactionRepository(entityType) {\n    return function (object, methodName, index) {\n        // get repository type\n        var repositoryType;\n        try {\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n        }\n        catch (err) {\n            throw new CannotReflectMethodParameterTypeError_1.CannotReflectMethodParameterTypeError(object.constructor, methodName);\n        }\n        _1.getMetadataArgsStorage().transactionRepositories.push({\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n            repositoryType: repositoryType,\n            entityType: entityType,\n        });\n    };\n}\nexports.TransactionRepository = TransactionRepository;\n\n//# sourceMappingURL=TransactionRepository.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/decorator/transaction/TransactionRepository.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"../node_modules/typeorm/decorator/transaction/TransactionRepository.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"../../\");\nvar CannotReflectMethodParameterTypeError_1 = require(\"../../error/CannotReflectMethodParameterTypeError\");\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\nfunction TransactionRepository(entityType) {\n    return function (object, methodName, index) {\n        // get repository type\n        var repositoryType;\n        try {\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n        }\n        catch (err) {\n            throw new CannotReflectMethodParameterTypeError_1.CannotReflectMethodParameterTypeError(object.constructor, methodName);\n        }\n        _1.getMetadataArgsStorage().transactionRepositories.push({\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n            repositoryType: repositoryType,\n            entityType: entityType,\n        });\n    };\n}\nexports.TransactionRepository = TransactionRepository;\n\n//# sourceMappingURL=TransactionRepository.js.map\n"},"lineCount":30}},"hash":"8d1aec7d57f220e2404012a06fa32c95","cacheData":{"env":{}}}