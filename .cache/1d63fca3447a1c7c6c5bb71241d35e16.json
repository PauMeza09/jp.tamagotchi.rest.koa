{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../util/DateUtils","loc":{"line":3,"column":26}},{"name":"../metadata/EntityMetadata","loc":{"line":4,"column":31}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DateUtils_1 = require(\"../util/DateUtils\");\nvar EntityMetadata_1 = require(\"../metadata/EntityMetadata\");\n/**\n * Finds what columns are changed in the subject entities.\n */\nvar SubjectChangedColumnsComputer = /** @class */ (function () {\n    function SubjectChangedColumnsComputer() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    SubjectChangedColumnsComputer.prototype.compute = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            _this.computeDiffColumns(subject);\n            _this.computeDiffRelationalColumns(subjects, subject);\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    SubjectChangedColumnsComputer.prototype.computeDiffColumns = function (subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.columns.forEach(function (column) {\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isDiscriminator ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isCreateDate)\n                return;\n            // get user provided value - column value from the user provided persisted entity\n            var entityValue = column.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // get database value of the column\n                var databaseValue = column.getEntityValue(subject.databaseEntity);\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    var value = column.relationMetadata.getEntityValue(subject.entity);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n                var normalizedValue = entityValue;\n                // normalize special values to make proper comparision\n                if (entityValue !== null && entityValue !== undefined) {\n                    if (column.type === \"date\") {\n                        normalizedValue = DateUtils_1.DateUtils.mixedDateToDateString(entityValue);\n                    }\n                    else if (column.type === \"time\") {\n                        normalizedValue = DateUtils_1.DateUtils.mixedDateToTimeString(entityValue);\n                    }\n                    else if (column.type === \"datetime\" || column.type === Date) {\n                        normalizedValue = DateUtils_1.DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                        databaseValue = DateUtils_1.DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n                    }\n                    else if (column.type === \"json\" || column.type === \"jsonb\") {\n                        normalizedValue = JSON.stringify(entityValue);\n                        if (databaseValue !== null && databaseValue !== undefined)\n                            databaseValue = JSON.stringify(databaseValue);\n                    }\n                    else if (column.type === \"sample-array\") {\n                        normalizedValue = DateUtils_1.DateUtils.simpleArrayToString(entityValue);\n                        databaseValue = DateUtils_1.DateUtils.simpleArrayToString(databaseValue);\n                    }\n                }\n                // if value is not changed - then do nothing\n                if (normalizedValue === databaseValue)\n                    return;\n            }\n            // find if there is already a column to be changed\n            var changeMap = subject.changeMaps.find(function (changeMap) { return changeMap.column === column; });\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = entityValue;\n            }\n            else { // if it wasn't found add a new column for change\n                subject.changeMaps.push({\n                    column: column,\n                    value: entityValue\n                });\n            }\n        });\n    };\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    SubjectChangedColumnsComputer.prototype.computeDiffRelationalColumns = function (allSubjects, subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.relationsWithJoinColumns.forEach(function (relation) {\n            // get the related entity from the persisted entity\n            var relatedEntity = relation.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                var relatedEntityRelationIdMap = relatedEntity;\n                if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap);\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                var databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n                // if relation ids are equal then we don't need to update anything\n                var areRelatedIdsEqual = EntityMetadata_1.EntityMetadata.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual)\n                    return;\n            }\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            var valueSubject = allSubjects.find(function (subject) { return subject.mustBeInserted && subject.entity === relatedEntity; });\n            if (valueSubject)\n                relatedEntity = valueSubject;\n            // find if there is already a relation to be changed\n            var changeMap = subject.changeMaps.find(function (changeMap) { return changeMap.relation === relation; });\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = relatedEntity;\n            }\n            else { // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity\n                });\n            }\n        });\n    };\n    return SubjectChangedColumnsComputer;\n}());\nexports.SubjectChangedColumnsComputer = SubjectChangedColumnsComputer;\n\n//# sourceMappingURL=SubjectChangedColumnsComputer.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}}],"sources":{"../node_modules/typeorm/persistence/SubjectChangedColumnsComputer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DateUtils_1 = require(\"../util/DateUtils\");\nvar EntityMetadata_1 = require(\"../metadata/EntityMetadata\");\n/**\n * Finds what columns are changed in the subject entities.\n */\nvar SubjectChangedColumnsComputer = /** @class */ (function () {\n    function SubjectChangedColumnsComputer() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    SubjectChangedColumnsComputer.prototype.compute = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            _this.computeDiffColumns(subject);\n            _this.computeDiffRelationalColumns(subjects, subject);\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    SubjectChangedColumnsComputer.prototype.computeDiffColumns = function (subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.columns.forEach(function (column) {\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isDiscriminator ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isCreateDate)\n                return;\n            // get user provided value - column value from the user provided persisted entity\n            var entityValue = column.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // get database value of the column\n                var databaseValue = column.getEntityValue(subject.databaseEntity);\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    var value = column.relationMetadata.getEntityValue(subject.entity);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n                var normalizedValue = entityValue;\n                // normalize special values to make proper comparision\n                if (entityValue !== null && entityValue !== undefined) {\n                    if (column.type === \"date\") {\n                        normalizedValue = DateUtils_1.DateUtils.mixedDateToDateString(entityValue);\n                    }\n                    else if (column.type === \"time\") {\n                        normalizedValue = DateUtils_1.DateUtils.mixedDateToTimeString(entityValue);\n                    }\n                    else if (column.type === \"datetime\" || column.type === Date) {\n                        normalizedValue = DateUtils_1.DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                        databaseValue = DateUtils_1.DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n                    }\n                    else if (column.type === \"json\" || column.type === \"jsonb\") {\n                        normalizedValue = JSON.stringify(entityValue);\n                        if (databaseValue !== null && databaseValue !== undefined)\n                            databaseValue = JSON.stringify(databaseValue);\n                    }\n                    else if (column.type === \"sample-array\") {\n                        normalizedValue = DateUtils_1.DateUtils.simpleArrayToString(entityValue);\n                        databaseValue = DateUtils_1.DateUtils.simpleArrayToString(databaseValue);\n                    }\n                }\n                // if value is not changed - then do nothing\n                if (normalizedValue === databaseValue)\n                    return;\n            }\n            // find if there is already a column to be changed\n            var changeMap = subject.changeMaps.find(function (changeMap) { return changeMap.column === column; });\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = entityValue;\n            }\n            else { // if it wasn't found add a new column for change\n                subject.changeMaps.push({\n                    column: column,\n                    value: entityValue\n                });\n            }\n        });\n    };\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    SubjectChangedColumnsComputer.prototype.computeDiffRelationalColumns = function (allSubjects, subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.relationsWithJoinColumns.forEach(function (relation) {\n            // get the related entity from the persisted entity\n            var relatedEntity = relation.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                var relatedEntityRelationIdMap = relatedEntity;\n                if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap);\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                var databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n                // if relation ids are equal then we don't need to update anything\n                var areRelatedIdsEqual = EntityMetadata_1.EntityMetadata.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual)\n                    return;\n            }\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            var valueSubject = allSubjects.find(function (subject) { return subject.mustBeInserted && subject.entity === relatedEntity; });\n            if (valueSubject)\n                relatedEntity = valueSubject;\n            // find if there is already a relation to be changed\n            var changeMap = subject.changeMaps.find(function (changeMap) { return changeMap.relation === relation; });\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = relatedEntity;\n            }\n            else { // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity\n                });\n            }\n        });\n    };\n    return SubjectChangedColumnsComputer;\n}());\nexports.SubjectChangedColumnsComputer = SubjectChangedColumnsComputer;\n\n//# sourceMappingURL=SubjectChangedColumnsComputer.js.map\n"},"lineCount":151}},"hash":"a59b34d252659b376ac04a928db6c21d","cacheData":{"env":{}}}