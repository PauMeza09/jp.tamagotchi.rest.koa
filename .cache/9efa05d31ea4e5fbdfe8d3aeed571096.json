{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Orders insert or remove subjects in proper order (using topological sorting)\n * to make sure insert or remove operations are executed in a proper order.\n */\nvar SubjectTopoligicalSorter = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SubjectTopoligicalSorter(subjects) {\n        this.subjects = subjects.slice(); // copy subjects to prevent changing of sent array\n        this.metadatas = this.getUniqueMetadatas(this.subjects);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sorts (orders) subjects in their topological order.\n     */\n    SubjectTopoligicalSorter.prototype.sort = function (direction) {\n        var _this = this;\n        // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here\n        if (!this.metadatas.length)\n            return this.subjects;\n        var sortedSubjects = [];\n        // first if we sort for deletion all junction subjects\n        // junction subjects are subjects without entity and database entity set\n        if (direction === \"delete\") {\n            var junctionSubjects = this.subjects.filter(function (subject) { return !subject.entity && !subject.databaseEntity; });\n            sortedSubjects.push.apply(sortedSubjects, junctionSubjects);\n            this.removeAlreadySorted(junctionSubjects);\n        }\n        // next we always insert entities with non-nullable relations, sort them first\n        var nonNullableDependencies = this.getNonNullableDependencies();\n        var sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);\n        if (direction === \"insert\")\n            sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse();\n        // so we have a sorted entity targets\n        // go thought each of them and find all subjects with sorted entity target\n        // add those sorted targets and remove them from original array of targets\n        sortedNonNullableEntityTargets.forEach(function (sortedEntityTarget) {\n            var entityTargetSubjects = _this.subjects.filter(function (subject) { return subject.metadata.targetName === sortedEntityTarget; });\n            sortedSubjects.push.apply(sortedSubjects, entityTargetSubjects);\n            _this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // next sort all other entities\n        // same process as in above but with other entities\n        var otherDependencies = this.getDependencies();\n        var sortedOtherEntityTargets = this.toposort(otherDependencies);\n        if (direction === \"insert\")\n            sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();\n        sortedOtherEntityTargets.forEach(function (sortedEntityTarget) {\n            var entityTargetSubjects = _this.subjects.filter(function (subject) { return subject.metadata.targetName === sortedEntityTarget; });\n            sortedSubjects.push.apply(sortedSubjects, entityTargetSubjects);\n            _this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // if we have something left in the subjects add them as well\n        sortedSubjects.push.apply(sortedSubjects, this.subjects);\n        return sortedSubjects;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes already sorted subjects from this.subjects list of subjects.\n     */\n    SubjectTopoligicalSorter.prototype.removeAlreadySorted = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            _this.subjects.splice(_this.subjects.indexOf(subject), 1);\n        });\n    };\n    /**\n     * Extracts all unique metadatas from the given subjects.\n     */\n    SubjectTopoligicalSorter.prototype.getUniqueMetadatas = function (subjects) {\n        var metadatas = [];\n        subjects.forEach(function (subject) {\n            if (metadatas.indexOf(subject.metadata) === -1)\n                metadatas.push(subject.metadata);\n        });\n        return metadatas;\n    };\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    SubjectTopoligicalSorter.prototype.getNonNullableDependencies = function () {\n        return this.metadatas.reduce(function (dependencies, metadata) {\n            metadata.relationsWithJoinColumns.forEach(function (relation) {\n                if (relation.isNullable)\n                    return;\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, []);\n    };\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    SubjectTopoligicalSorter.prototype.getDependencies = function () {\n        return this.metadatas.reduce(function (dependencies, metadata) {\n            metadata.relationsWithJoinColumns.forEach(function (relation) {\n                // if relation is self-referenced we skip it\n                if (relation.inverseEntityMetadata === metadata)\n                    return;\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, []);\n    };\n    /**\n     * Sorts given graph using topological sorting algorithm.\n     *\n     * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.\n     */\n    SubjectTopoligicalSorter.prototype.toposort = function (edges) {\n        function uniqueNodes(arr) {\n            var res = [];\n            for (var i_1 = 0, len = arr.length; i_1 < len; i_1++) {\n                var edge = arr[i_1];\n                if (res.indexOf(edge[0]) < 0)\n                    res.push(edge[0]);\n                if (res.indexOf(edge[1]) < 0)\n                    res.push(edge[1]);\n            }\n            return res;\n        }\n        var nodes = uniqueNodes(edges);\n        var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor;\n        while (i--) {\n            if (!visited[i])\n                visit(nodes[i], i, []);\n        }\n        function visit(node, i, predecessors) {\n            if (predecessors.indexOf(node) >= 0) {\n                throw new Error(\"Cyclic dependency: \" + JSON.stringify(node)); // todo: better error\n            }\n            if (!~nodes.indexOf(node)) {\n                throw new Error(\"Found unknown node. Make sure to provided all involved nodes. Unknown node: \" + JSON.stringify(node));\n            }\n            if (visited[i])\n                return;\n            visited[i] = true;\n            // outgoing edges\n            var outgoing = edges.filter(function (edge) {\n                return edge[0] === node;\n            });\n            if (i = outgoing.length) {\n                var preds = predecessors.concat(node);\n                do {\n                    var child = outgoing[--i][1];\n                    visit(child, nodes.indexOf(child), preds);\n                } while (i);\n            }\n            sorted[--cursor] = node;\n        }\n        return sorted;\n    };\n    return SubjectTopoligicalSorter;\n}());\nexports.SubjectTopoligicalSorter = SubjectTopoligicalSorter;\n\n//# sourceMappingURL=SubjectTopoligicalSorter.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}}],"sources":{"../node_modules/typeorm/persistence/SubjectTopoligicalSorter.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Orders insert or remove subjects in proper order (using topological sorting)\n * to make sure insert or remove operations are executed in a proper order.\n */\nvar SubjectTopoligicalSorter = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SubjectTopoligicalSorter(subjects) {\n        this.subjects = subjects.slice(); // copy subjects to prevent changing of sent array\n        this.metadatas = this.getUniqueMetadatas(this.subjects);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sorts (orders) subjects in their topological order.\n     */\n    SubjectTopoligicalSorter.prototype.sort = function (direction) {\n        var _this = this;\n        // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here\n        if (!this.metadatas.length)\n            return this.subjects;\n        var sortedSubjects = [];\n        // first if we sort for deletion all junction subjects\n        // junction subjects are subjects without entity and database entity set\n        if (direction === \"delete\") {\n            var junctionSubjects = this.subjects.filter(function (subject) { return !subject.entity && !subject.databaseEntity; });\n            sortedSubjects.push.apply(sortedSubjects, junctionSubjects);\n            this.removeAlreadySorted(junctionSubjects);\n        }\n        // next we always insert entities with non-nullable relations, sort them first\n        var nonNullableDependencies = this.getNonNullableDependencies();\n        var sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);\n        if (direction === \"insert\")\n            sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse();\n        // so we have a sorted entity targets\n        // go thought each of them and find all subjects with sorted entity target\n        // add those sorted targets and remove them from original array of targets\n        sortedNonNullableEntityTargets.forEach(function (sortedEntityTarget) {\n            var entityTargetSubjects = _this.subjects.filter(function (subject) { return subject.metadata.targetName === sortedEntityTarget; });\n            sortedSubjects.push.apply(sortedSubjects, entityTargetSubjects);\n            _this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // next sort all other entities\n        // same process as in above but with other entities\n        var otherDependencies = this.getDependencies();\n        var sortedOtherEntityTargets = this.toposort(otherDependencies);\n        if (direction === \"insert\")\n            sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();\n        sortedOtherEntityTargets.forEach(function (sortedEntityTarget) {\n            var entityTargetSubjects = _this.subjects.filter(function (subject) { return subject.metadata.targetName === sortedEntityTarget; });\n            sortedSubjects.push.apply(sortedSubjects, entityTargetSubjects);\n            _this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // if we have something left in the subjects add them as well\n        sortedSubjects.push.apply(sortedSubjects, this.subjects);\n        return sortedSubjects;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes already sorted subjects from this.subjects list of subjects.\n     */\n    SubjectTopoligicalSorter.prototype.removeAlreadySorted = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            _this.subjects.splice(_this.subjects.indexOf(subject), 1);\n        });\n    };\n    /**\n     * Extracts all unique metadatas from the given subjects.\n     */\n    SubjectTopoligicalSorter.prototype.getUniqueMetadatas = function (subjects) {\n        var metadatas = [];\n        subjects.forEach(function (subject) {\n            if (metadatas.indexOf(subject.metadata) === -1)\n                metadatas.push(subject.metadata);\n        });\n        return metadatas;\n    };\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    SubjectTopoligicalSorter.prototype.getNonNullableDependencies = function () {\n        return this.metadatas.reduce(function (dependencies, metadata) {\n            metadata.relationsWithJoinColumns.forEach(function (relation) {\n                if (relation.isNullable)\n                    return;\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, []);\n    };\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    SubjectTopoligicalSorter.prototype.getDependencies = function () {\n        return this.metadatas.reduce(function (dependencies, metadata) {\n            metadata.relationsWithJoinColumns.forEach(function (relation) {\n                // if relation is self-referenced we skip it\n                if (relation.inverseEntityMetadata === metadata)\n                    return;\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, []);\n    };\n    /**\n     * Sorts given graph using topological sorting algorithm.\n     *\n     * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.\n     */\n    SubjectTopoligicalSorter.prototype.toposort = function (edges) {\n        function uniqueNodes(arr) {\n            var res = [];\n            for (var i_1 = 0, len = arr.length; i_1 < len; i_1++) {\n                var edge = arr[i_1];\n                if (res.indexOf(edge[0]) < 0)\n                    res.push(edge[0]);\n                if (res.indexOf(edge[1]) < 0)\n                    res.push(edge[1]);\n            }\n            return res;\n        }\n        var nodes = uniqueNodes(edges);\n        var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor;\n        while (i--) {\n            if (!visited[i])\n                visit(nodes[i], i, []);\n        }\n        function visit(node, i, predecessors) {\n            if (predecessors.indexOf(node) >= 0) {\n                throw new Error(\"Cyclic dependency: \" + JSON.stringify(node)); // todo: better error\n            }\n            if (!~nodes.indexOf(node)) {\n                throw new Error(\"Found unknown node. Make sure to provided all involved nodes. Unknown node: \" + JSON.stringify(node));\n            }\n            if (visited[i])\n                return;\n            visited[i] = true;\n            // outgoing edges\n            var outgoing = edges.filter(function (edge) {\n                return edge[0] === node;\n            });\n            if (i = outgoing.length) {\n                var preds = predecessors.concat(node);\n                do {\n                    var child = outgoing[--i][1];\n                    visit(child, nodes.indexOf(child), preds);\n                } while (i);\n            }\n            sorted[--cursor] = node;\n        }\n        return sorted;\n    };\n    return SubjectTopoligicalSorter;\n}());\nexports.SubjectTopoligicalSorter = SubjectTopoligicalSorter;\n\n//# sourceMappingURL=SubjectTopoligicalSorter.js.map\n"},"lineCount":167}},"hash":"86adc5b21396718fb0ce7f7622483ed7","cacheData":{"env":{}}}