{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../error/MissingPrimaryColumnError","loc":{"line":3,"column":42}},{"name":"../error/CircularRelationsError","loc":{"line":4,"column":39}},{"name":"../util/DepGraph","loc":{"line":5,"column":25}},{"name":"../error/DataTypeNotSupportedError","loc":{"line":6,"column":42}},{"name":"../driver/mongodb/MongoDriver","loc":{"line":7,"column":28}},{"name":"../driver/sqlserver/SqlServerDriver","loc":{"line":8,"column":32}},{"name":"../driver/mysql/MysqlDriver","loc":{"line":9,"column":28}},{"name":"../error/NoConnectionOptionError","loc":{"line":10,"column":40}},{"name":"../error/InitializedRelationError","loc":{"line":11,"column":41}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MissingPrimaryColumnError_1 = require(\"../error/MissingPrimaryColumnError\");\nvar CircularRelationsError_1 = require(\"../error/CircularRelationsError\");\nvar DepGraph_1 = require(\"../util/DepGraph\");\nvar DataTypeNotSupportedError_1 = require(\"../error/DataTypeNotSupportedError\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar NoConnectionOptionError_1 = require(\"../error/NoConnectionOptionError\");\nvar InitializedRelationError_1 = require(\"../error/InitializedRelationError\");\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n/**\n * Validates built entity metadatas.\n */\nvar EntityMetadataValidator = /** @class */ (function () {\n    function EntityMetadataValidator() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given entity metadatas.\n     */\n    EntityMetadataValidator.prototype.validateMany = function (entityMetadatas, driver) {\n        var _this = this;\n        entityMetadatas.forEach(function (entityMetadata) { return _this.validate(entityMetadata, entityMetadatas, driver); });\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    };\n    /**\n     * Validates given entity metadata.\n     */\n    EntityMetadataValidator.prototype.validate = function (entityMetadata, allEntityMetadatas, driver) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError_1.MissingPrimaryColumnError(entityMetadata);\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new Error(\"Entity \" + entityMetadata.name + \" using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?\");\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(\"Entity \" + entityMetadata.name + \" has empty discriminator value. Discriminator value should not be empty.\");\n            var sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(function (metadata) {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(\"Entities \" + entityMetadata.name + \" and \" + sameDiscriminatorValueEntityMetadata.name + \" as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.\");\n        }\n        entityMetadata.relationCounts.forEach(function (relationCount) {\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\n                throw new Error(\"Relation count can not be implemented on ManyToOne or OneToOne relations.\");\n        });\n        if (!(driver instanceof MongoDriver_1.MongoDriver)) {\n            entityMetadata.columns.forEach(function (column) {\n                var normalizedColumn = driver.normalizeType(column);\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)\n                    throw new DataTypeNotSupportedError_1.DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new Error(\"Column \" + column.propertyName + \" of Entity \" + entityMetadata.name + \" does not support length property.\");\n            });\n        }\n        if (driver instanceof MysqlDriver_1.MysqlDriver) {\n            var generatedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated && column.generationStrategy !== \"uuid\"; });\n            if (generatedColumns.length > 1)\n                throw new Error(\"Error in \" + entityMetadata.name + \" entity. There can be only one auto-increment column in MySql table.\");\n        }\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (driver instanceof MysqlDriver_1.MysqlDriver) {\n            var metadatasWithDatabase = allEntityMetadatas.filter(function (metadata) { return metadata.database; });\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError_1.NoConnectionOptionError(\"database\");\n        }\n        if (driver instanceof SqlServerDriver_1.SqlServerDriver) {\n            var charsetColumns = entityMetadata.columns.filter(function (column) { return column.charset; });\n            if (charsetColumns.length > 1)\n                throw new Error(\"Character set specifying is not supported in Sql Server\");\n        }\n        // check if relations are all without initialized properties\n        var entityInstance = entityMetadata.create();\n        entityMetadata.relations.forEach(function (relation) {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n                // get entity relation value and check if its an array\n                var relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (relationInitializedValue instanceof Array)\n                    throw new InitializedRelationError_1.InitializedRelationError(relation);\n            }\n        });\n        // validate relations\n        entityMetadata.relations.forEach(function (relation) {\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        });\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(function (relation) {\n            var isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(\"Relation \" + entityMetadata.name + \"#\" + relation.propertyName + \" and \" + relation.inverseRelation.entityMetadata.name + \"#\" + relation.inverseRelation.propertyName + \" both has cascade remove set. \" +\n                    \"This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.\");\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n        entityMetadata.eagerRelations.forEach(function (relation) {\n        });\n    };\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    EntityMetadataValidator.prototype.validateDependencies = function (entityMetadatas) {\n        var graph = new DepGraph_1.DepGraph();\n        entityMetadatas.forEach(function (entityMetadata) {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.relationsWithJoinColumns\n                .filter(function (relation) { return !relation.isNullable; })\n                .forEach(function (relation) {\n                graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n            });\n        });\n        try {\n            graph.overallOrder();\n        }\n        catch (err) {\n            throw new CircularRelationsError_1.CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    };\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    EntityMetadataValidator.prototype.validateEagerRelations = function (entityMetadatas) {\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.eagerRelations.forEach(function (relation) {\n                if (relation.inverseRelation && relation.inverseRelation.isEager)\n                    throw new Error(\"Circular eager relations are disallowed. \" +\n                        (entityMetadata.targetName + \"#\" + relation.propertyPath + \" contains \\\"eager: true\\\", and its inverse side \") +\n                        (relation.inverseEntityMetadata.targetName + \"#\" + relation.inverseRelation.propertyPath + \" contains \\\"eager: true\\\" as well.\") +\n                        \" Remove \\\"eager: true\\\" from one side of the relation.\");\n            });\n        });\n    };\n    return EntityMetadataValidator;\n}());\nexports.EntityMetadataValidator = EntityMetadataValidator;\n\n//# sourceMappingURL=EntityMetadataValidator.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}}],"sources":{"../node_modules/typeorm/metadata-builder/EntityMetadataValidator.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MissingPrimaryColumnError_1 = require(\"../error/MissingPrimaryColumnError\");\nvar CircularRelationsError_1 = require(\"../error/CircularRelationsError\");\nvar DepGraph_1 = require(\"../util/DepGraph\");\nvar DataTypeNotSupportedError_1 = require(\"../error/DataTypeNotSupportedError\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar MysqlDriver_1 = require(\"../driver/mysql/MysqlDriver\");\nvar NoConnectionOptionError_1 = require(\"../error/NoConnectionOptionError\");\nvar InitializedRelationError_1 = require(\"../error/InitializedRelationError\");\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n/**\n * Validates built entity metadatas.\n */\nvar EntityMetadataValidator = /** @class */ (function () {\n    function EntityMetadataValidator() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given entity metadatas.\n     */\n    EntityMetadataValidator.prototype.validateMany = function (entityMetadatas, driver) {\n        var _this = this;\n        entityMetadatas.forEach(function (entityMetadata) { return _this.validate(entityMetadata, entityMetadatas, driver); });\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    };\n    /**\n     * Validates given entity metadata.\n     */\n    EntityMetadataValidator.prototype.validate = function (entityMetadata, allEntityMetadatas, driver) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError_1.MissingPrimaryColumnError(entityMetadata);\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new Error(\"Entity \" + entityMetadata.name + \" using single-table inheritance, it should also have a discriminator column. Did you forget to put @DiscriminatorColumn decorator?\");\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(\"Entity \" + entityMetadata.name + \" has empty discriminator value. Discriminator value should not be empty.\");\n            var sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(function (metadata) {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(\"Entities \" + entityMetadata.name + \" and \" + sameDiscriminatorValueEntityMetadata.name + \" as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.\");\n        }\n        entityMetadata.relationCounts.forEach(function (relationCount) {\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\n                throw new Error(\"Relation count can not be implemented on ManyToOne or OneToOne relations.\");\n        });\n        if (!(driver instanceof MongoDriver_1.MongoDriver)) {\n            entityMetadata.columns.forEach(function (column) {\n                var normalizedColumn = driver.normalizeType(column);\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)\n                    throw new DataTypeNotSupportedError_1.DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new Error(\"Column \" + column.propertyName + \" of Entity \" + entityMetadata.name + \" does not support length property.\");\n            });\n        }\n        if (driver instanceof MysqlDriver_1.MysqlDriver) {\n            var generatedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated && column.generationStrategy !== \"uuid\"; });\n            if (generatedColumns.length > 1)\n                throw new Error(\"Error in \" + entityMetadata.name + \" entity. There can be only one auto-increment column in MySql table.\");\n        }\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (driver instanceof MysqlDriver_1.MysqlDriver) {\n            var metadatasWithDatabase = allEntityMetadatas.filter(function (metadata) { return metadata.database; });\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError_1.NoConnectionOptionError(\"database\");\n        }\n        if (driver instanceof SqlServerDriver_1.SqlServerDriver) {\n            var charsetColumns = entityMetadata.columns.filter(function (column) { return column.charset; });\n            if (charsetColumns.length > 1)\n                throw new Error(\"Character set specifying is not supported in Sql Server\");\n        }\n        // check if relations are all without initialized properties\n        var entityInstance = entityMetadata.create();\n        entityMetadata.relations.forEach(function (relation) {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n                // get entity relation value and check if its an array\n                var relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (relationInitializedValue instanceof Array)\n                    throw new InitializedRelationError_1.InitializedRelationError(relation);\n            }\n        });\n        // validate relations\n        entityMetadata.relations.forEach(function (relation) {\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        });\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(function (relation) {\n            var isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(\"Relation \" + entityMetadata.name + \"#\" + relation.propertyName + \" and \" + relation.inverseRelation.entityMetadata.name + \"#\" + relation.inverseRelation.propertyName + \" both has cascade remove set. \" +\n                    \"This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.\");\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n        entityMetadata.eagerRelations.forEach(function (relation) {\n        });\n    };\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    EntityMetadataValidator.prototype.validateDependencies = function (entityMetadatas) {\n        var graph = new DepGraph_1.DepGraph();\n        entityMetadatas.forEach(function (entityMetadata) {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.relationsWithJoinColumns\n                .filter(function (relation) { return !relation.isNullable; })\n                .forEach(function (relation) {\n                graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n            });\n        });\n        try {\n            graph.overallOrder();\n        }\n        catch (err) {\n            throw new CircularRelationsError_1.CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    };\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    EntityMetadataValidator.prototype.validateEagerRelations = function (entityMetadatas) {\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.eagerRelations.forEach(function (relation) {\n                if (relation.inverseRelation && relation.inverseRelation.isEager)\n                    throw new Error(\"Circular eager relations are disallowed. \" +\n                        (entityMetadata.targetName + \"#\" + relation.propertyPath + \" contains \\\"eager: true\\\", and its inverse side \") +\n                        (relation.inverseEntityMetadata.targetName + \"#\" + relation.inverseRelation.propertyPath + \" contains \\\"eager: true\\\" as well.\") +\n                        \" Remove \\\"eager: true\\\" from one side of the relation.\");\n            });\n        });\n    };\n    return EntityMetadataValidator;\n}());\nexports.EntityMetadataValidator = EntityMetadataValidator;\n\n//# sourceMappingURL=EntityMetadataValidator.js.map\n"},"lineCount":213}},"hash":"1cea96e748966414a8b9e0e024fa1e18","cacheData":{"env":{}}}