{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"./Connection","loc":{"line":3,"column":27}},{"name":"../error/ConnectionNotFoundError","loc":{"line":4,"column":40}},{"name":"../error/AlreadyHasActiveConnectionError","loc":{"line":5,"column":48}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Connection_1 = require(\"./Connection\");\nvar ConnectionNotFoundError_1 = require(\"../error/ConnectionNotFoundError\");\nvar AlreadyHasActiveConnectionError_1 = require(\"../error/AlreadyHasActiveConnectionError\");\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nvar ConnectionManager = /** @class */ (function () {\n    function ConnectionManager() {\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * List of connections registered in this connection manager.\n         */\n        this.connections = [];\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    ConnectionManager.prototype.has = function (name) {\n        return !!this.connections.find(function (connection) { return connection.name === name; });\n    };\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    ConnectionManager.prototype.get = function (name) {\n        if (name === void 0) { name = \"default\"; }\n        var connection = this.connections.find(function (connection) { return connection.name === name; });\n        if (!connection)\n            throw new ConnectionNotFoundError_1.ConnectionNotFoundError(name);\n        return connection;\n    };\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    ConnectionManager.prototype.create = function (options) {\n        // check if such connection is already registered\n        var existConnection = this.connections.find(function (connection) { return connection.name === (options.name || \"default\"); });\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError_1.AlreadyHasActiveConnectionError(options.name || \"default\");\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n        // create a new connection\n        var connection = new Connection_1.Connection(options);\n        this.connections.push(connection);\n        return connection;\n    };\n    return ConnectionManager;\n}());\nexports.ConnectionManager = ConnectionManager;\n\n//# sourceMappingURL=ConnectionManager.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/connection/ConnectionManager.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"../node_modules/typeorm/connection/ConnectionManager.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Connection_1 = require(\"./Connection\");\nvar ConnectionNotFoundError_1 = require(\"../error/ConnectionNotFoundError\");\nvar AlreadyHasActiveConnectionError_1 = require(\"../error/AlreadyHasActiveConnectionError\");\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nvar ConnectionManager = /** @class */ (function () {\n    function ConnectionManager() {\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * List of connections registered in this connection manager.\n         */\n        this.connections = [];\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    ConnectionManager.prototype.has = function (name) {\n        return !!this.connections.find(function (connection) { return connection.name === name; });\n    };\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    ConnectionManager.prototype.get = function (name) {\n        if (name === void 0) { name = \"default\"; }\n        var connection = this.connections.find(function (connection) { return connection.name === name; });\n        if (!connection)\n            throw new ConnectionNotFoundError_1.ConnectionNotFoundError(name);\n        return connection;\n    };\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    ConnectionManager.prototype.create = function (options) {\n        // check if such connection is already registered\n        var existConnection = this.connections.find(function (connection) { return connection.name === (options.name || \"default\"); });\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError_1.AlreadyHasActiveConnectionError(options.name || \"default\");\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n        // create a new connection\n        var connection = new Connection_1.Connection(options);\n        this.connections.push(connection);\n        return connection;\n    };\n    return ConnectionManager;\n}());\nexports.ConnectionManager = ConnectionManager;\n\n//# sourceMappingURL=ConnectionManager.js.map\n"},"lineCount":65}},"hash":"89cd32037f80aac7b3911e350689614d","cacheData":{"env":{}}}