{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../util/PromiseUtils","loc":{"line":38,"column":29}},{"name":"./SubjectTopoligicalSorter","loc":{"line":39,"column":41}},{"name":"./SubjectChangedColumnsComputer","loc":{"line":40,"column":46}},{"name":"../error/SubjectWithoutIdentifierError","loc":{"line":41,"column":46}},{"name":"../error/SubjectRemovedAndUpdatedError","loc":{"line":42,"column":46}},{"name":"../driver/mongodb/MongoQueryRunner","loc":{"line":43,"column":33}},{"name":"../driver/mongodb/MongoDriver","loc":{"line":44,"column":28}},{"name":"../subscriber/BroadcasterResult","loc":{"line":45,"column":34}},{"name":"../driver/oracle/OracleDriver","loc":{"line":46,"column":29}},{"name":"./tree/NestedSetSubjectExecutor","loc":{"line":47,"column":41}},{"name":"./tree/ClosureSubjectExecutor","loc":{"line":48,"column":39}},{"name":"./tree/MaterializedPathSubjectExecutor","loc":{"line":49,"column":48}}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar SubjectTopoligicalSorter_1 = require(\"./SubjectTopoligicalSorter\");\nvar SubjectChangedColumnsComputer_1 = require(\"./SubjectChangedColumnsComputer\");\nvar SubjectWithoutIdentifierError_1 = require(\"../error/SubjectWithoutIdentifierError\");\nvar SubjectRemovedAndUpdatedError_1 = require(\"../error/SubjectRemovedAndUpdatedError\");\nvar MongoQueryRunner_1 = require(\"../driver/mongodb/MongoQueryRunner\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar BroadcasterResult_1 = require(\"../subscriber/BroadcasterResult\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\nvar NestedSetSubjectExecutor_1 = require(\"./tree/NestedSetSubjectExecutor\");\nvar ClosureSubjectExecutor_1 = require(\"./tree/ClosureSubjectExecutor\");\nvar MaterializedPathSubjectExecutor_1 = require(\"./tree/MaterializedPathSubjectExecutor\");\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nvar SubjectExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SubjectExecutor(queryRunner, subjects, options) {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\n         */\n        this.hasExecutableOperations = false;\n        /**\n         * Subjects that must be inserted.\n         */\n        this.insertSubjects = [];\n        /**\n         * Subjects that must be updated.\n         */\n        this.updateSubjects = [];\n        /**\n         * Subjects that must be removed.\n         */\n        this.removeSubjects = [];\n        this.queryRunner = queryRunner;\n        this.allSubjects = subjects;\n        this.options = options;\n        this.validate();\n        this.recompute();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    SubjectExecutor.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var broadcasterResult;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        broadcasterResult = undefined;\n                        if (!(!this.options || this.options.listeners !== false)) return [3 /*break*/, 2];\n                        // console.time(\".broadcastBeforeEventsForAll\");\n                        broadcasterResult = this.broadcastBeforeEventsForAll();\n                        if (!(broadcasterResult.promises.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(broadcasterResult.promises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\n                        // recompute only in the case if any listener or subscriber was really executed\n                        if (broadcasterResult && broadcasterResult.count > 0) {\n                            // console.time(\".recompute\");\n                            this.recompute();\n                            // console.timeEnd(\".recompute\");\n                        }\n                        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\n                        // console.timeEnd(\"prepare\");\n                        // execute all insert operations\n                        // console.time(\".insertion\");\n                        this.insertSubjects = new SubjectTopoligicalSorter_1.SubjectTopoligicalSorter(this.insertSubjects).sort(\"insert\");\n                        return [4 /*yield*/, this.executeInsertOperations()];\n                    case 3:\n                        _a.sent();\n                        // console.timeEnd(\".insertion\");\n                        // recompute update operations since insertion can create updation operations for the\n                        // properties it wasn't able to handle on its own (referenced columns)\n                        this.updateSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeUpdated; });\n                        // execute update operations\n                        // console.time(\".updation\");\n                        return [4 /*yield*/, this.executeUpdateOperations()];\n                    case 4:\n                        // execute update operations\n                        // console.time(\".updation\");\n                        _a.sent();\n                        // console.timeEnd(\".updation\");\n                        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\n                        // console.time(\".removal\");\n                        this.removeSubjects = new SubjectTopoligicalSorter_1.SubjectTopoligicalSorter(this.removeSubjects).sort(\"delete\");\n                        return [4 /*yield*/, this.executeRemoveOperations()];\n                    case 5:\n                        _a.sent();\n                        // console.timeEnd(\".removal\");\n                        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n                        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n                        return [4 /*yield*/, this.updateSpecialColumnsInPersistedEntities()];\n                    case 6:\n                        // console.timeEnd(\".removal\");\n                        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n                        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n                        _a.sent();\n                        if (!(!this.options || this.options.listeners !== false)) return [3 /*break*/, 8];\n                        // console.time(\".broadcastAfterEventsForAll\");\n                        broadcasterResult = this.broadcastAfterEventsForAll();\n                        if (!(broadcasterResult.promises.length > 0)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, Promise.all(broadcasterResult.promises)];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given subjects.\n     */\n    SubjectExecutor.prototype.validate = function () {\n        this.allSubjects.forEach(function (subject) {\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\n                throw new SubjectRemovedAndUpdatedError_1.SubjectRemovedAndUpdatedError(subject);\n        });\n    };\n    /**\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\n     */\n    SubjectExecutor.prototype.recompute = function () {\n        new SubjectChangedColumnsComputer_1.SubjectChangedColumnsComputer().compute(this.allSubjects);\n        this.insertSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeInserted; });\n        this.updateSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeUpdated; });\n        this.removeSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeRemoved; });\n        this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0;\n    };\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    SubjectExecutor.prototype.broadcastBeforeEventsForAll = function () {\n        var _this = this;\n        var result = new BroadcasterResult_1.BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity); });\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        return result;\n    };\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     * Returns void if there wasn't any listener or subscriber executed.\n     * Note: this method has a performance-optimized code organization.\n     */\n    SubjectExecutor.prototype.broadcastAfterEventsForAll = function () {\n        var _this = this;\n        var result = new BroadcasterResult_1.BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity); });\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        return result;\n    };\n    /**\n     * Executes insert operations.\n     */\n    SubjectExecutor.prototype.executeInsertOperations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _a, groupedInsertSubjects, groupedInsertSubjectKeys;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.groupBulkSubjects(this.insertSubjects, \"insert\"), groupedInsertSubjects = _a[0], groupedInsertSubjectKeys = _a[1];\n                        // then we run insertion in the sequential order which is important since we have an ordered subjects\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(groupedInsertSubjectKeys, function (groupName) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var subjects, bulkInsertMaps, bulkInsertSubjects, singleInsertSubjects, manager, insertResult_1, insertResult_2;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = groupedInsertSubjects[groupName];\n                                            bulkInsertMaps = [];\n                                            bulkInsertSubjects = [];\n                                            singleInsertSubjects = [];\n                                            if (this.queryRunner.connection.driver instanceof MongoDriver_1.MongoDriver) {\n                                                subjects.forEach(function (subject) {\n                                                    bulkInsertSubjects.push(subject);\n                                                    bulkInsertMaps.push(subject.entity);\n                                                });\n                                            }\n                                            else if (this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver) {\n                                                subjects.forEach(function (subject) {\n                                                    singleInsertSubjects.push(subject);\n                                                });\n                                            }\n                                            else {\n                                                subjects.forEach(function (subject) {\n                                                    // we do not insert in bulk in following cases:\n                                                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\n                                                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\n                                                    // - when oracle is used, since oracle's bulk insertion is very bad\n                                                    if (subject.changeMaps.length === 0 ||\n                                                        subject.metadata.treeType ||\n                                                        _this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver) {\n                                                        singleInsertSubjects.push(subject);\n                                                    }\n                                                    else {\n                                                        bulkInsertSubjects.push(subject);\n                                                        bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());\n                                                    }\n                                                });\n                                            }\n                                            if (!(this.queryRunner instanceof MongoQueryRunner_1.MongoQueryRunner)) return [3 /*break*/, 2];\n                                            manager = this.queryRunner.manager;\n                                            return [4 /*yield*/, manager.insert(subjects[0].metadata.target, bulkInsertMaps)];\n                                        case 1:\n                                            insertResult_1 = _a.sent();\n                                            subjects.forEach(function (subject, index) {\n                                                subject.identifier = insertResult_1.identifiers[index];\n                                                subject.generatedMap = insertResult_1.generatedMaps[index];\n                                                subject.insertedValueSet = bulkInsertMaps[index];\n                                            });\n                                            return [3 /*break*/, 6];\n                                        case 2:\n                                            if (!(bulkInsertMaps.length > 0)) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.queryRunner\n                                                    .manager\n                                                    .createQueryBuilder()\n                                                    .insert()\n                                                    .into(subjects[0].metadata.target)\n                                                    .values(bulkInsertMaps)\n                                                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                                                    .callListeners(false)\n                                                    .execute()];\n                                        case 3:\n                                            insertResult_2 = _a.sent();\n                                            bulkInsertSubjects.forEach(function (subject, index) {\n                                                subject.identifier = insertResult_2.identifiers[index];\n                                                subject.generatedMap = insertResult_2.generatedMaps[index];\n                                                subject.insertedValueSet = bulkInsertMaps[index];\n                                            });\n                                            _a.label = 4;\n                                        case 4:\n                                            if (!(singleInsertSubjects.length > 0)) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(singleInsertSubjects, function (subject) { return __awaiter(_this, void 0, void 0, function () {\n                                                    return __generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it\n                                                                if (!(subject.metadata.treeType === \"nested-set\")) return [3 /*break*/, 2];\n                                                                return [4 /*yield*/, new NestedSetSubjectExecutor_1.NestedSetSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 1:\n                                                                _a.sent();\n                                                                _a.label = 2;\n                                                            case 2: return [4 /*yield*/, this.queryRunner\n                                                                    .manager\n                                                                    .createQueryBuilder()\n                                                                    .insert()\n                                                                    .into(subject.metadata.target)\n                                                                    .values(subject.insertedValueSet)\n                                                                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                                                                    .callListeners(false)\n                                                                    .execute()\n                                                                    .then(function (insertResult) {\n                                                                    subject.identifier = insertResult.identifiers[0];\n                                                                    subject.generatedMap = insertResult.generatedMaps[0];\n                                                                })];\n                                                            case 3:\n                                                                _a.sent();\n                                                                if (!(subject.metadata.treeType === \"closure-table\")) return [3 /*break*/, 5];\n                                                                return [4 /*yield*/, new ClosureSubjectExecutor_1.ClosureSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 4:\n                                                                _a.sent();\n                                                                return [3 /*break*/, 7];\n                                                            case 5:\n                                                                if (!(subject.metadata.treeType === \"materialized-path\")) return [3 /*break*/, 7];\n                                                                return [4 /*yield*/, new MaterializedPathSubjectExecutor_1.MaterializedPathSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 6:\n                                                                _a.sent();\n                                                                _a.label = 7;\n                                                            case 7: return [2 /*return*/];\n                                                        }\n                                                    });\n                                                }); })];\n                                        case 5:\n                                            _a.sent();\n                                            _a.label = 6;\n                                        case 6:\n                                            subjects.forEach(function (subject) {\n                                                if (subject.generatedMap) {\n                                                    subject.metadata.columns.forEach(function (column) {\n                                                        var value = column.getEntityValue(subject.generatedMap);\n                                                        if (value !== undefined && value !== null) {\n                                                            var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                            column.setEntityValue(subject.generatedMap, preparedValue);\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        // then we run insertion in the sequential order which is important since we have an ordered subjects\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates all given subjects in the database.\n     */\n    SubjectExecutor.prototype.executeUpdateOperations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.updateSubjects.map(function (subject) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var updateMap, manager, updateQueryBuilder, updateResult;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!subject.identifier)\n                                            throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);\n                                        updateMap = this.queryRunner.connection.driver instanceof MongoDriver_1.MongoDriver ? subject.entity : subject.createValueSetAndPopChangeMap();\n                                        if (!(this.queryRunner instanceof MongoQueryRunner_1.MongoQueryRunner)) return [3 /*break*/, 2];\n                                        manager = this.queryRunner.manager;\n                                        return [4 /*yield*/, manager.update(subject.metadata.target, subject.identifier, updateMap)];\n                                    case 1:\n                                        _a.sent();\n                                        return [3 /*break*/, 4];\n                                    case 2:\n                                        updateQueryBuilder = this.queryRunner\n                                            .manager\n                                            .createQueryBuilder()\n                                            .update(subject.metadata.target)\n                                            .set(updateMap)\n                                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                                            .callListeners(false);\n                                        if (subject.entity) {\n                                            updateQueryBuilder.whereEntity(subject.identifier);\n                                        }\n                                        else { // in this case identifier is just conditions object to update by\n                                            updateQueryBuilder.where(subject.identifier);\n                                        }\n                                        return [4 /*yield*/, updateQueryBuilder.execute()];\n                                    case 3:\n                                        updateResult = _a.sent();\n                                        subject.generatedMap = updateResult.generatedMaps[0];\n                                        if (subject.generatedMap) {\n                                            subject.metadata.columns.forEach(function (column) {\n                                                var value = column.getEntityValue(subject.generatedMap);\n                                                if (value !== undefined && value !== null) {\n                                                    var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                    column.setEntityValue(subject.generatedMap, preparedValue);\n                                                }\n                                            });\n                                        }\n                                        _a.label = 4;\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all given subjects from the database.\n     *\n     * todo: we need to apply topological sort here as well\n     */\n    SubjectExecutor.prototype.executeRemoveOperations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _a, groupedRemoveSubjects, groupedRemoveSubjectKeys;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.groupBulkSubjects(this.removeSubjects, \"delete\"), groupedRemoveSubjects = _a[0], groupedRemoveSubjectKeys = _a[1];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(groupedRemoveSubjectKeys, function (groupName) { return __awaiter(_this, void 0, void 0, function () {\n                                var subjects, deleteMaps, manager;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = groupedRemoveSubjects[groupName];\n                                            deleteMaps = subjects.map(function (subject) {\n                                                if (!subject.identifier)\n                                                    throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);\n                                                return subject.identifier;\n                                            });\n                                            if (!(this.queryRunner instanceof MongoQueryRunner_1.MongoQueryRunner)) return [3 /*break*/, 2];\n                                            manager = this.queryRunner.manager;\n                                            return [4 /*yield*/, manager.delete(subjects[0].metadata.target, deleteMaps)];\n                                        case 1:\n                                            _a.sent();\n                                            return [3 /*break*/, 4];\n                                        case 2: \n                                        // here we execute our deletion query\n                                        // we don't need to specify entities and set update entity to true since the only thing query builder\n                                        // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                                        // also, we disable listeners because we call them on our own in persistence layer\n                                        return [4 /*yield*/, this.queryRunner\n                                                .manager\n                                                .createQueryBuilder()\n                                                .delete()\n                                                .from(subjects[0].metadata.target)\n                                                .where(deleteMaps)\n                                                .callListeners(false)\n                                                .execute()];\n                                        case 3:\n                                            // here we execute our deletion query\n                                            // we don't need to specify entities and set update entity to true since the only thing query builder\n                                            // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                                            // also, we disable listeners because we call them on our own in persistence layer\n                                            _a.sent();\n                                            _a.label = 4;\n                                        case 4: return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    SubjectExecutor.prototype.updateSpecialColumnsInPersistedEntities = function () {\n        // update inserted entity properties\n        if (this.insertSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);\n        // update updated entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);\n        // remove ids from the entities that were removed\n        if (this.removeSubjects.length) {\n            this.removeSubjects.forEach(function (subject) {\n                if (!subject.entity)\n                    return;\n                subject.metadata.primaryColumns.forEach(function (primaryColumn) {\n                    primaryColumn.setEntityValue(subject.entity, undefined);\n                });\n            });\n        }\n        // other post-persist updations\n        this.allSubjects.forEach(function (subject) {\n            if (!subject.entity)\n                return;\n            subject.metadata.relationIds.forEach(function (relationId) {\n                relationId.setValue(subject.entity);\n            });\n        });\n    };\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    SubjectExecutor.prototype.updateSpecialColumnsInInsertedAndUpdatedEntities = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            if (!subject.entity)\n                return;\n            // set values to \"null\" for nullable columns that did not have values\n            subject.metadata.columns.forEach(function (column) {\n                // if table inheritance is used make sure this column is not child's column\n                if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(function (metadata) { return metadata.target; }).indexOf(column.target) !== -1)\n                    return;\n                // entities does not have virtual columns\n                if (column.isVirtual)\n                    return;\n                // update nullable columns\n                if (column.isNullable) {\n                    var columnValue = column.getEntityValue(subject.entity);\n                    if (columnValue === undefined)\n                        column.setEntityValue(subject.entity, null);\n                }\n                // update relational columns\n                if (subject.updatedRelationMaps.length > 0) {\n                    subject.updatedRelationMaps.forEach(function (updatedRelationMap) {\n                        updatedRelationMap.relation.joinColumns.forEach(function (column) {\n                            if (column.isVirtual === true)\n                                return;\n                            column.setEntityValue(subject.entity, updatedRelationMap.value instanceof Object ? column.referencedColumn.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);\n                        });\n                    });\n                }\n            });\n            // merge into entity all generated values returned by a database\n            if (subject.generatedMap)\n                _this.queryRunner.manager.merge(subject.metadata.target, subject.entity, subject.generatedMap);\n        });\n    };\n    /**\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\n     * That's why we only support bulking in junction tables for those drivers.\n     *\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\n     */\n    SubjectExecutor.prototype.groupBulkSubjects = function (subjects, type) {\n        var group = {};\n        var keys = [];\n        var groupingAllowed = type === \"delete\" || this.queryRunner.connection.driver.isReturningSqlSupported();\n        subjects.forEach(function (subject, index) {\n            var key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + \"_\" + index;\n            if (!group[key]) {\n                group[key] = [subject];\n                keys.push(key);\n            }\n            else {\n                group[key].push(subject);\n            }\n        });\n        return [group, keys];\n    };\n    return SubjectExecutor;\n}());\nexports.SubjectExecutor = SubjectExecutor;\n\n//# sourceMappingURL=SubjectExecutor.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/typeorm/persistence/SubjectExecutor.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}}],"sources":{"../node_modules/typeorm/persistence/SubjectExecutor.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PromiseUtils_1 = require(\"../util/PromiseUtils\");\nvar SubjectTopoligicalSorter_1 = require(\"./SubjectTopoligicalSorter\");\nvar SubjectChangedColumnsComputer_1 = require(\"./SubjectChangedColumnsComputer\");\nvar SubjectWithoutIdentifierError_1 = require(\"../error/SubjectWithoutIdentifierError\");\nvar SubjectRemovedAndUpdatedError_1 = require(\"../error/SubjectRemovedAndUpdatedError\");\nvar MongoQueryRunner_1 = require(\"../driver/mongodb/MongoQueryRunner\");\nvar MongoDriver_1 = require(\"../driver/mongodb/MongoDriver\");\nvar BroadcasterResult_1 = require(\"../subscriber/BroadcasterResult\");\nvar OracleDriver_1 = require(\"../driver/oracle/OracleDriver\");\nvar NestedSetSubjectExecutor_1 = require(\"./tree/NestedSetSubjectExecutor\");\nvar ClosureSubjectExecutor_1 = require(\"./tree/ClosureSubjectExecutor\");\nvar MaterializedPathSubjectExecutor_1 = require(\"./tree/MaterializedPathSubjectExecutor\");\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nvar SubjectExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SubjectExecutor(queryRunner, subjects, options) {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\n         */\n        this.hasExecutableOperations = false;\n        /**\n         * Subjects that must be inserted.\n         */\n        this.insertSubjects = [];\n        /**\n         * Subjects that must be updated.\n         */\n        this.updateSubjects = [];\n        /**\n         * Subjects that must be removed.\n         */\n        this.removeSubjects = [];\n        this.queryRunner = queryRunner;\n        this.allSubjects = subjects;\n        this.options = options;\n        this.validate();\n        this.recompute();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    SubjectExecutor.prototype.execute = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var broadcasterResult;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        broadcasterResult = undefined;\n                        if (!(!this.options || this.options.listeners !== false)) return [3 /*break*/, 2];\n                        // console.time(\".broadcastBeforeEventsForAll\");\n                        broadcasterResult = this.broadcastBeforeEventsForAll();\n                        if (!(broadcasterResult.promises.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(broadcasterResult.promises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\n                        // recompute only in the case if any listener or subscriber was really executed\n                        if (broadcasterResult && broadcasterResult.count > 0) {\n                            // console.time(\".recompute\");\n                            this.recompute();\n                            // console.timeEnd(\".recompute\");\n                        }\n                        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\n                        // console.timeEnd(\"prepare\");\n                        // execute all insert operations\n                        // console.time(\".insertion\");\n                        this.insertSubjects = new SubjectTopoligicalSorter_1.SubjectTopoligicalSorter(this.insertSubjects).sort(\"insert\");\n                        return [4 /*yield*/, this.executeInsertOperations()];\n                    case 3:\n                        _a.sent();\n                        // console.timeEnd(\".insertion\");\n                        // recompute update operations since insertion can create updation operations for the\n                        // properties it wasn't able to handle on its own (referenced columns)\n                        this.updateSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeUpdated; });\n                        // execute update operations\n                        // console.time(\".updation\");\n                        return [4 /*yield*/, this.executeUpdateOperations()];\n                    case 4:\n                        // execute update operations\n                        // console.time(\".updation\");\n                        _a.sent();\n                        // console.timeEnd(\".updation\");\n                        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\n                        // console.time(\".removal\");\n                        this.removeSubjects = new SubjectTopoligicalSorter_1.SubjectTopoligicalSorter(this.removeSubjects).sort(\"delete\");\n                        return [4 /*yield*/, this.executeRemoveOperations()];\n                    case 5:\n                        _a.sent();\n                        // console.timeEnd(\".removal\");\n                        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n                        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n                        return [4 /*yield*/, this.updateSpecialColumnsInPersistedEntities()];\n                    case 6:\n                        // console.timeEnd(\".removal\");\n                        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n                        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n                        _a.sent();\n                        if (!(!this.options || this.options.listeners !== false)) return [3 /*break*/, 8];\n                        // console.time(\".broadcastAfterEventsForAll\");\n                        broadcasterResult = this.broadcastAfterEventsForAll();\n                        if (!(broadcasterResult.promises.length > 0)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, Promise.all(broadcasterResult.promises)];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given subjects.\n     */\n    SubjectExecutor.prototype.validate = function () {\n        this.allSubjects.forEach(function (subject) {\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\n                throw new SubjectRemovedAndUpdatedError_1.SubjectRemovedAndUpdatedError(subject);\n        });\n    };\n    /**\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\n     */\n    SubjectExecutor.prototype.recompute = function () {\n        new SubjectChangedColumnsComputer_1.SubjectChangedColumnsComputer().compute(this.allSubjects);\n        this.insertSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeInserted; });\n        this.updateSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeUpdated; });\n        this.removeSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeRemoved; });\n        this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0;\n    };\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    SubjectExecutor.prototype.broadcastBeforeEventsForAll = function () {\n        var _this = this;\n        var result = new BroadcasterResult_1.BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity); });\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        return result;\n    };\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     * Returns void if there wasn't any listener or subscriber executed.\n     * Note: this method has a performance-optimized code organization.\n     */\n    SubjectExecutor.prototype.broadcastAfterEventsForAll = function () {\n        var _this = this;\n        var result = new BroadcasterResult_1.BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity); });\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        return result;\n    };\n    /**\n     * Executes insert operations.\n     */\n    SubjectExecutor.prototype.executeInsertOperations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _a, groupedInsertSubjects, groupedInsertSubjectKeys;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.groupBulkSubjects(this.insertSubjects, \"insert\"), groupedInsertSubjects = _a[0], groupedInsertSubjectKeys = _a[1];\n                        // then we run insertion in the sequential order which is important since we have an ordered subjects\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(groupedInsertSubjectKeys, function (groupName) { return __awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                var subjects, bulkInsertMaps, bulkInsertSubjects, singleInsertSubjects, manager, insertResult_1, insertResult_2;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = groupedInsertSubjects[groupName];\n                                            bulkInsertMaps = [];\n                                            bulkInsertSubjects = [];\n                                            singleInsertSubjects = [];\n                                            if (this.queryRunner.connection.driver instanceof MongoDriver_1.MongoDriver) {\n                                                subjects.forEach(function (subject) {\n                                                    bulkInsertSubjects.push(subject);\n                                                    bulkInsertMaps.push(subject.entity);\n                                                });\n                                            }\n                                            else if (this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver) {\n                                                subjects.forEach(function (subject) {\n                                                    singleInsertSubjects.push(subject);\n                                                });\n                                            }\n                                            else {\n                                                subjects.forEach(function (subject) {\n                                                    // we do not insert in bulk in following cases:\n                                                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\n                                                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\n                                                    // - when oracle is used, since oracle's bulk insertion is very bad\n                                                    if (subject.changeMaps.length === 0 ||\n                                                        subject.metadata.treeType ||\n                                                        _this.queryRunner.connection.driver instanceof OracleDriver_1.OracleDriver) {\n                                                        singleInsertSubjects.push(subject);\n                                                    }\n                                                    else {\n                                                        bulkInsertSubjects.push(subject);\n                                                        bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());\n                                                    }\n                                                });\n                                            }\n                                            if (!(this.queryRunner instanceof MongoQueryRunner_1.MongoQueryRunner)) return [3 /*break*/, 2];\n                                            manager = this.queryRunner.manager;\n                                            return [4 /*yield*/, manager.insert(subjects[0].metadata.target, bulkInsertMaps)];\n                                        case 1:\n                                            insertResult_1 = _a.sent();\n                                            subjects.forEach(function (subject, index) {\n                                                subject.identifier = insertResult_1.identifiers[index];\n                                                subject.generatedMap = insertResult_1.generatedMaps[index];\n                                                subject.insertedValueSet = bulkInsertMaps[index];\n                                            });\n                                            return [3 /*break*/, 6];\n                                        case 2:\n                                            if (!(bulkInsertMaps.length > 0)) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.queryRunner\n                                                    .manager\n                                                    .createQueryBuilder()\n                                                    .insert()\n                                                    .into(subjects[0].metadata.target)\n                                                    .values(bulkInsertMaps)\n                                                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                                                    .callListeners(false)\n                                                    .execute()];\n                                        case 3:\n                                            insertResult_2 = _a.sent();\n                                            bulkInsertSubjects.forEach(function (subject, index) {\n                                                subject.identifier = insertResult_2.identifiers[index];\n                                                subject.generatedMap = insertResult_2.generatedMaps[index];\n                                                subject.insertedValueSet = bulkInsertMaps[index];\n                                            });\n                                            _a.label = 4;\n                                        case 4:\n                                            if (!(singleInsertSubjects.length > 0)) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(singleInsertSubjects, function (subject) { return __awaiter(_this, void 0, void 0, function () {\n                                                    return __generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it\n                                                                if (!(subject.metadata.treeType === \"nested-set\")) return [3 /*break*/, 2];\n                                                                return [4 /*yield*/, new NestedSetSubjectExecutor_1.NestedSetSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 1:\n                                                                _a.sent();\n                                                                _a.label = 2;\n                                                            case 2: return [4 /*yield*/, this.queryRunner\n                                                                    .manager\n                                                                    .createQueryBuilder()\n                                                                    .insert()\n                                                                    .into(subject.metadata.target)\n                                                                    .values(subject.insertedValueSet)\n                                                                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                                                                    .callListeners(false)\n                                                                    .execute()\n                                                                    .then(function (insertResult) {\n                                                                    subject.identifier = insertResult.identifiers[0];\n                                                                    subject.generatedMap = insertResult.generatedMaps[0];\n                                                                })];\n                                                            case 3:\n                                                                _a.sent();\n                                                                if (!(subject.metadata.treeType === \"closure-table\")) return [3 /*break*/, 5];\n                                                                return [4 /*yield*/, new ClosureSubjectExecutor_1.ClosureSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 4:\n                                                                _a.sent();\n                                                                return [3 /*break*/, 7];\n                                                            case 5:\n                                                                if (!(subject.metadata.treeType === \"materialized-path\")) return [3 /*break*/, 7];\n                                                                return [4 /*yield*/, new MaterializedPathSubjectExecutor_1.MaterializedPathSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 6:\n                                                                _a.sent();\n                                                                _a.label = 7;\n                                                            case 7: return [2 /*return*/];\n                                                        }\n                                                    });\n                                                }); })];\n                                        case 5:\n                                            _a.sent();\n                                            _a.label = 6;\n                                        case 6:\n                                            subjects.forEach(function (subject) {\n                                                if (subject.generatedMap) {\n                                                    subject.metadata.columns.forEach(function (column) {\n                                                        var value = column.getEntityValue(subject.generatedMap);\n                                                        if (value !== undefined && value !== null) {\n                                                            var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                            column.setEntityValue(subject.generatedMap, preparedValue);\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        // then we run insertion in the sequential order which is important since we have an ordered subjects\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates all given subjects in the database.\n     */\n    SubjectExecutor.prototype.executeUpdateOperations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.updateSubjects.map(function (subject) { return __awaiter(_this, void 0, void 0, function () {\n                            var _this = this;\n                            var updateMap, manager, updateQueryBuilder, updateResult;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!subject.identifier)\n                                            throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);\n                                        updateMap = this.queryRunner.connection.driver instanceof MongoDriver_1.MongoDriver ? subject.entity : subject.createValueSetAndPopChangeMap();\n                                        if (!(this.queryRunner instanceof MongoQueryRunner_1.MongoQueryRunner)) return [3 /*break*/, 2];\n                                        manager = this.queryRunner.manager;\n                                        return [4 /*yield*/, manager.update(subject.metadata.target, subject.identifier, updateMap)];\n                                    case 1:\n                                        _a.sent();\n                                        return [3 /*break*/, 4];\n                                    case 2:\n                                        updateQueryBuilder = this.queryRunner\n                                            .manager\n                                            .createQueryBuilder()\n                                            .update(subject.metadata.target)\n                                            .set(updateMap)\n                                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                                            .callListeners(false);\n                                        if (subject.entity) {\n                                            updateQueryBuilder.whereEntity(subject.identifier);\n                                        }\n                                        else { // in this case identifier is just conditions object to update by\n                                            updateQueryBuilder.where(subject.identifier);\n                                        }\n                                        return [4 /*yield*/, updateQueryBuilder.execute()];\n                                    case 3:\n                                        updateResult = _a.sent();\n                                        subject.generatedMap = updateResult.generatedMaps[0];\n                                        if (subject.generatedMap) {\n                                            subject.metadata.columns.forEach(function (column) {\n                                                var value = column.getEntityValue(subject.generatedMap);\n                                                if (value !== undefined && value !== null) {\n                                                    var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                    column.setEntityValue(subject.generatedMap, preparedValue);\n                                                }\n                                            });\n                                        }\n                                        _a.label = 4;\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all given subjects from the database.\n     *\n     * todo: we need to apply topological sort here as well\n     */\n    SubjectExecutor.prototype.executeRemoveOperations = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _a, groupedRemoveSubjects, groupedRemoveSubjectKeys;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this.groupBulkSubjects(this.removeSubjects, \"delete\"), groupedRemoveSubjects = _a[0], groupedRemoveSubjectKeys = _a[1];\n                        return [4 /*yield*/, PromiseUtils_1.PromiseUtils.runInSequence(groupedRemoveSubjectKeys, function (groupName) { return __awaiter(_this, void 0, void 0, function () {\n                                var subjects, deleteMaps, manager;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = groupedRemoveSubjects[groupName];\n                                            deleteMaps = subjects.map(function (subject) {\n                                                if (!subject.identifier)\n                                                    throw new SubjectWithoutIdentifierError_1.SubjectWithoutIdentifierError(subject);\n                                                return subject.identifier;\n                                            });\n                                            if (!(this.queryRunner instanceof MongoQueryRunner_1.MongoQueryRunner)) return [3 /*break*/, 2];\n                                            manager = this.queryRunner.manager;\n                                            return [4 /*yield*/, manager.delete(subjects[0].metadata.target, deleteMaps)];\n                                        case 1:\n                                            _a.sent();\n                                            return [3 /*break*/, 4];\n                                        case 2: \n                                        // here we execute our deletion query\n                                        // we don't need to specify entities and set update entity to true since the only thing query builder\n                                        // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                                        // also, we disable listeners because we call them on our own in persistence layer\n                                        return [4 /*yield*/, this.queryRunner\n                                                .manager\n                                                .createQueryBuilder()\n                                                .delete()\n                                                .from(subjects[0].metadata.target)\n                                                .where(deleteMaps)\n                                                .callListeners(false)\n                                                .execute()];\n                                        case 3:\n                                            // here we execute our deletion query\n                                            // we don't need to specify entities and set update entity to true since the only thing query builder\n                                            // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                                            // also, we disable listeners because we call them on our own in persistence layer\n                                            _a.sent();\n                                            _a.label = 4;\n                                        case 4: return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    SubjectExecutor.prototype.updateSpecialColumnsInPersistedEntities = function () {\n        // update inserted entity properties\n        if (this.insertSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);\n        // update updated entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);\n        // remove ids from the entities that were removed\n        if (this.removeSubjects.length) {\n            this.removeSubjects.forEach(function (subject) {\n                if (!subject.entity)\n                    return;\n                subject.metadata.primaryColumns.forEach(function (primaryColumn) {\n                    primaryColumn.setEntityValue(subject.entity, undefined);\n                });\n            });\n        }\n        // other post-persist updations\n        this.allSubjects.forEach(function (subject) {\n            if (!subject.entity)\n                return;\n            subject.metadata.relationIds.forEach(function (relationId) {\n                relationId.setValue(subject.entity);\n            });\n        });\n    };\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    SubjectExecutor.prototype.updateSpecialColumnsInInsertedAndUpdatedEntities = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            if (!subject.entity)\n                return;\n            // set values to \"null\" for nullable columns that did not have values\n            subject.metadata.columns.forEach(function (column) {\n                // if table inheritance is used make sure this column is not child's column\n                if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(function (metadata) { return metadata.target; }).indexOf(column.target) !== -1)\n                    return;\n                // entities does not have virtual columns\n                if (column.isVirtual)\n                    return;\n                // update nullable columns\n                if (column.isNullable) {\n                    var columnValue = column.getEntityValue(subject.entity);\n                    if (columnValue === undefined)\n                        column.setEntityValue(subject.entity, null);\n                }\n                // update relational columns\n                if (subject.updatedRelationMaps.length > 0) {\n                    subject.updatedRelationMaps.forEach(function (updatedRelationMap) {\n                        updatedRelationMap.relation.joinColumns.forEach(function (column) {\n                            if (column.isVirtual === true)\n                                return;\n                            column.setEntityValue(subject.entity, updatedRelationMap.value instanceof Object ? column.referencedColumn.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);\n                        });\n                    });\n                }\n            });\n            // merge into entity all generated values returned by a database\n            if (subject.generatedMap)\n                _this.queryRunner.manager.merge(subject.metadata.target, subject.entity, subject.generatedMap);\n        });\n    };\n    /**\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\n     * That's why we only support bulking in junction tables for those drivers.\n     *\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\n     */\n    SubjectExecutor.prototype.groupBulkSubjects = function (subjects, type) {\n        var group = {};\n        var keys = [];\n        var groupingAllowed = type === \"delete\" || this.queryRunner.connection.driver.isReturningSqlSupported();\n        subjects.forEach(function (subject, index) {\n            var key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + \"_\" + index;\n            if (!group[key]) {\n                group[key] = [subject];\n                keys.push(key);\n            }\n            else {\n                group[key].push(subject);\n            }\n        });\n        return [group, keys];\n    };\n    return SubjectExecutor;\n}());\nexports.SubjectExecutor = SubjectExecutor;\n\n//# sourceMappingURL=SubjectExecutor.js.map\n"},"lineCount":587}},"hash":"c8ab0ab663cfc2a47b8a380414ee1138","cacheData":{"env":{}}}