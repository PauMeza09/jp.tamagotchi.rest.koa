{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Index metadata contains all information about table's index.\n */\nvar IndexMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function IndexMetadata(options) {\n        /**\n         * Indicates if this index must be unique.\n         */\n        this.isUnique = false;\n        /**\n         * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n         * Works only in MySQL.\n         */\n        this.isSpatial = false;\n        /**\n         * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n         * Works only in MySQL.\n         */\n        this.isFulltext = false;\n        /**\n         * Indicates if this index must synchronize with database index.\n         */\n        this.synchronize = true;\n        /**\n         * Indexed columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null && options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    IndexMetadata.prototype.build = function (namingStrategy) {\n        var _this = this;\n        if (this.synchronize === false) {\n            this.name = this.givenName;\n            return this;\n        }\n        var map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            var columnPropertyPaths = [];\n            if (this.givenColumnNames instanceof Array) {\n                columnPropertyPaths = this.givenColumnNames.map(function (columnName) {\n                    if (_this.embeddedMetadata)\n                        return _this.embeddedMetadata.propertyPath + \".\" + columnName;\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(function (propertyPath) { return map[propertyPath] = 1; });\n            }\n            else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (columnsFnResult_1 instanceof Array) {\n                    columnPropertyPaths = columnsFnResult_1.map(function (i) { return String(i); });\n                    columnPropertyPaths.forEach(function (name) { return map[name] = 1; });\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) { return String(i); });\n                    Object.keys(columnsFnResult_1).forEach(function (columnName) { return map[columnName] = columnsFnResult_1[columnName]; });\n                }\n            }\n            this.columns = columnPropertyPaths.map(function (propertyPath) {\n                var columnWithSameName = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === propertyPath; });\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                var relationWithSameName = _this.entityMetadata.relations.find(function (relation) { return relation.isWithJoinColumn && relation.propertyName === propertyPath; });\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                throw new Error(\"Index \" + (_this.givenName ? \"\\\"\" + _this.givenName + \"\\\" \" : \"\") + \"contains column that is missing in the entity: \" + propertyPath);\n            })\n                .reduce(function (a, b) { return a.concat(b); });\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {\n            var column = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === key; });\n            if (column)\n                updatedMap[column.databaseName] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(function (column) { return column.databaseName; }), this.where);\n        return this;\n    };\n    return IndexMetadata;\n}());\nexports.IndexMetadata = IndexMetadata;\n\n//# sourceMappingURL=IndexMetadata.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata/IndexMetadata.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}}],"sources":{"../node_modules/typeorm/metadata/IndexMetadata.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Index metadata contains all information about table's index.\n */\nvar IndexMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function IndexMetadata(options) {\n        /**\n         * Indicates if this index must be unique.\n         */\n        this.isUnique = false;\n        /**\n         * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n         * Works only in MySQL.\n         */\n        this.isSpatial = false;\n        /**\n         * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n         * Works only in MySQL.\n         */\n        this.isFulltext = false;\n        /**\n         * Indicates if this index must synchronize with database index.\n         */\n        this.synchronize = true;\n        /**\n         * Indexed columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null && options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    IndexMetadata.prototype.build = function (namingStrategy) {\n        var _this = this;\n        if (this.synchronize === false) {\n            this.name = this.givenName;\n            return this;\n        }\n        var map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            var columnPropertyPaths = [];\n            if (this.givenColumnNames instanceof Array) {\n                columnPropertyPaths = this.givenColumnNames.map(function (columnName) {\n                    if (_this.embeddedMetadata)\n                        return _this.embeddedMetadata.propertyPath + \".\" + columnName;\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(function (propertyPath) { return map[propertyPath] = 1; });\n            }\n            else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (columnsFnResult_1 instanceof Array) {\n                    columnPropertyPaths = columnsFnResult_1.map(function (i) { return String(i); });\n                    columnPropertyPaths.forEach(function (name) { return map[name] = 1; });\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) { return String(i); });\n                    Object.keys(columnsFnResult_1).forEach(function (columnName) { return map[columnName] = columnsFnResult_1[columnName]; });\n                }\n            }\n            this.columns = columnPropertyPaths.map(function (propertyPath) {\n                var columnWithSameName = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === propertyPath; });\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                var relationWithSameName = _this.entityMetadata.relations.find(function (relation) { return relation.isWithJoinColumn && relation.propertyName === propertyPath; });\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                throw new Error(\"Index \" + (_this.givenName ? \"\\\"\" + _this.givenName + \"\\\" \" : \"\") + \"contains column that is missing in the entity: \" + propertyPath);\n            })\n                .reduce(function (a, b) { return a.concat(b); });\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {\n            var column = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === key; });\n            if (column)\n                updatedMap[column.databaseName] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(function (column) { return column.databaseName; }), this.where);\n        return this;\n    };\n    return IndexMetadata;\n}());\nexports.IndexMetadata = IndexMetadata;\n\n//# sourceMappingURL=IndexMetadata.js.map\n"},"lineCount":119}},"hash":"4fa5e7e2f65c3ae6d54b8cd285f8d302","cacheData":{"env":{}}}