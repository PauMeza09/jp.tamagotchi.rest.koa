{"dependencies":[{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/package.json","includedInParent":true,"mtime":1528316321058},{"name":"/mnt/data/hacking/projects/personal/jp.tamagotchi.rest.koa/node_modules/typeorm/package.json","includedInParent":true,"mtime":1526548133000},{"name":"../util/OrmUtils","loc":{"line":3,"column":25}},{"name":"../driver/postgres/PostgresDriver","loc":{"line":4,"column":31}},{"name":"../driver/sqlserver/SqlServerDriver","loc":{"line":5,"column":32}},{"name":"../error/CannotCreateEntityIdMapError","loc":{"line":6,"column":45}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../util/OrmUtils\");\nvar PostgresDriver_1 = require(\"../driver/postgres/PostgresDriver\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar CannotCreateEntityIdMapError_1 = require(\"../error/CannotCreateEntityIdMapError\");\n/**\n * Contains all entity metadata.\n */\nvar EntityMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EntityMetadata(options) {\n        /**\n         * Children entity metadatas. Used in inheritance patterns.\n         */\n        this.childEntityMetadatas = [];\n        /**\n         * All \"inheritance tree\" from a target entity.\n         * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n         * It also contains child entities for single table inheritance.\n         */\n        this.inheritanceTree = [];\n        /**\n         * Table type. Tables can be abstract, closure, junction, embedded, etc.\n         */\n        this.tableType = \"regular\";\n        /**\n         * Indicates if schema will be synchronized for this entity or not.\n         */\n        this.synchronize = true;\n        /**\n         * Checks if there any non-nullable column exist in this entity.\n         */\n        this.hasNonNullableRelations = false;\n        /**\n         * Indicates if this entity metadata of a junction table, or not.\n         * Junction table is a table created by many-to-many relationship.\n         *\n         * Its also possible to understand if entity is junction via tableType.\n         */\n        this.isJunction = false;\n        /**\n         * Checks if this table is a junction table of the closure table.\n         * This type is for tables that contain junction metadata of the closure tables.\n         */\n        this.isClosureJunction = false;\n        /**\n         * Checks if entity's table has multiple primary columns.\n         */\n        this.hasMultiplePrimaryKeys = false;\n        /**\n         * Indicates if this entity metadata has uuid generated columns.\n         */\n        this.hasUUIDGeneratedColumns = false;\n        /**\n         * Entity's column metadatas defined by user.\n         */\n        this.ownColumns = [];\n        /**\n         * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n         */\n        this.columns = [];\n        /**\n         * Ancestor columns used only in closure junction tables.\n         */\n        this.ancestorColumns = [];\n        /**\n         * Descendant columns used only in closure junction tables.\n         */\n        this.descendantColumns = [];\n        /**\n         * All columns except for virtual columns.\n         */\n        this.nonVirtualColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of owner entity.\n         */\n        this.ownerColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of inverse entity.\n         */\n        this.inverseColumns = [];\n        /**\n         * Gets the column with generated flag.\n         */\n        this.generatedColumns = [];\n        /**\n         * Gets the primary columns.\n         */\n        this.primaryColumns = [];\n        /**\n         * Entity's relation metadatas.\n         */\n        this.ownRelations = [];\n        /**\n         * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n         */\n        this.relations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.eagerRelations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.lazyRelations = [];\n        /**\n         * Gets only one-to-one relations of the entity.\n         */\n        this.oneToOneRelations = [];\n        /**\n         * Gets only owner one-to-one relations of the entity.\n         */\n        this.ownerOneToOneRelations = [];\n        /**\n         * Gets only one-to-many relations of the entity.\n         */\n        this.oneToManyRelations = [];\n        /**\n         * Gets only many-to-one relations of the entity.\n         */\n        this.manyToOneRelations = [];\n        /**\n         * Gets only many-to-many relations of the entity.\n         */\n        this.manyToManyRelations = [];\n        /**\n         * Gets only owner many-to-many relations of the entity.\n         */\n        this.ownerManyToManyRelations = [];\n        /**\n         * Gets only owner one-to-one and many-to-one relations.\n         */\n        this.relationsWithJoinColumns = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationIds = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationCounts = [];\n        /**\n         * Entity's foreign key metadatas.\n         */\n        this.foreignKeys = [];\n        /**\n         * Entity's embedded metadatas.\n         */\n        this.embeddeds = [];\n        /**\n         * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n         */\n        this.allEmbeddeds = [];\n        /**\n         * Entity's own indices.\n         */\n        this.ownIndices = [];\n        /**\n         * Entity's index metadatas.\n         */\n        this.indices = [];\n        /**\n         * Entity's unique metadatas.\n         */\n        this.uniques = [];\n        /**\n         * Entity's check metadatas.\n         */\n        this.checks = [];\n        /**\n         * Entity's own listener metadatas.\n         */\n        this.ownListeners = [];\n        /**\n         * Entity listener metadatas.\n         */\n        this.listeners = [];\n        /**\n         * Listener metadatas with \"AFTER LOAD\" type.\n         */\n        this.afterLoadListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.beforeInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.afterInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.beforeUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.afterUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.beforeRemoveListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.afterRemoveListeners = [];\n        this.connection = options.connection;\n        this.inheritanceTree = options.inheritanceTree || [];\n        this.inheritancePattern = options.inheritancePattern;\n        this.treeType = options.tableTree ? options.tableTree.type : undefined;\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata;\n        this.tableMetadataArgs = options.args;\n        this.target = this.tableMetadataArgs.target;\n        this.tableType = this.tableMetadataArgs.type;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new entity.\n     */\n    EntityMetadata.prototype.create = function (queryRunner) {\n        var _this = this;\n        // if target is set to a function (e.g. class) that can be created then create it\n        var ret;\n        if (this.target instanceof Function) {\n            ret = new this.target();\n            this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner); });\n            return ret;\n        }\n        // otherwise simply return a new empty object\n        var newObject = {};\n        this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner); });\n        return newObject;\n    };\n    /**\n     * Checks if given entity has an id.\n     */\n    EntityMetadata.prototype.hasId = function (entity) {\n        if (!entity)\n            return false;\n        return this.primaryColumns.every(function (primaryColumn) {\n            var value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    };\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    EntityMetadata.prototype.hasAllPrimaryKeys = function (entity) {\n        return this.primaryColumns.every(function (primaryColumn) {\n            var value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    };\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    EntityMetadata.prototype.ensureEntityIdMap = function (id) {\n        if (id instanceof Object)\n            return id;\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError_1.CannotCreateEntityIdMapError(this, id);\n        return this.primaryColumns[0].createValueMap(id);\n    };\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    EntityMetadata.prototype.getEntityIdMap = function (entity) {\n        if (!entity)\n            return undefined;\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, { skipNulls: true });\n    };\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    EntityMetadata.prototype.getEntityIdMixedMap = function (entity) {\n        if (!entity)\n            return entity;\n        var idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n        }\n        else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?\n        }\n        return idMap;\n    };\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    EntityMetadata.prototype.compareEntities = function (firstEntity, secondEntity) {\n        var firstEntityIdMap = this.getEntityIdMap(firstEntity);\n        if (!firstEntityIdMap)\n            return false;\n        var secondEntityIdMap = this.getEntityIdMap(secondEntity);\n        if (!secondEntityIdMap)\n            return false;\n        return EntityMetadata.compareIds(firstEntityIdMap, secondEntityIdMap);\n    };\n    /**\n     * Finds column with a given property name.\n     */\n    EntityMetadata.prototype.findColumnWithPropertyName = function (propertyName) {\n        return this.columns.find(function (column) { return column.propertyName === propertyName; });\n    };\n    /**\n     * Finds column with a given database name.\n     */\n    EntityMetadata.prototype.findColumnWithDatabaseName = function (databaseName) {\n        return this.columns.find(function (column) { return column.databaseName === databaseName; });\n    };\n    /**\n     * Finds column with a given property path.\n     */\n    EntityMetadata.prototype.findColumnWithPropertyPath = function (propertyPath) {\n        var column = this.columns.find(function (column) { return column.propertyPath === propertyPath; });\n        if (column)\n            return column;\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        var relation = this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0];\n        return undefined;\n    };\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    EntityMetadata.prototype.findColumnsWithPropertyPath = function (propertyPath) {\n        var column = this.columns.find(function (column) { return column.propertyPath === propertyPath; });\n        if (column)\n            return [column];\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        var relation = this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n        if (relation && relation.joinColumns)\n            return relation.joinColumns;\n        return [];\n    };\n    /**\n     * Finds relation with the given property path.\n     */\n    EntityMetadata.prototype.findRelationWithPropertyPath = function (propertyPath) {\n        return this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n    };\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    EntityMetadata.prototype.hasEmbeddedWithPropertyPath = function (propertyPath) {\n        return this.allEmbeddeds.some(function (embedded) { return embedded.propertyPath === propertyPath; });\n    };\n    /**\n     * Finds embedded with a given property path.\n     */\n    EntityMetadata.prototype.findEmbeddedWithPropertyPath = function (propertyPath) {\n        return this.allEmbeddeds.find(function (embedded) { return embedded.propertyPath === propertyPath; });\n    };\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    EntityMetadata.prototype.extractRelationValuesFromEntity = function (entity, relations) {\n        var relationsAndValues = [];\n        relations.forEach(function (relation) {\n            var value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                value.forEach(function (subValue) { return relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]); });\n            }\n            else if (value) {\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\n            }\n        });\n        return relationsAndValues;\n    };\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a property paths for a given entity.\n     */\n    EntityMetadata.createPropertyPath = function (metadata, entity, prefix) {\n        var _this = this;\n        if (prefix === void 0) { prefix = \"\"; }\n        var paths = [];\n        Object.keys(entity).forEach(function (key) {\n            // check for function is needed in the cases when createPropertyPath used on values containg a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            var parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                var subPaths = _this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push.apply(paths, subPaths);\n            }\n            else {\n                var path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    };\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    EntityMetadata.difference = function (firstIdMaps, secondIdMaps) {\n        return firstIdMaps.filter(function (firstIdMap) {\n            return !secondIdMaps.find(function (secondIdMap) { return OrmUtils_1.OrmUtils.deepCompare(firstIdMap, secondIdMap); });\n        });\n    };\n    /**\n     * Compares ids of the two entities.\n     * Returns true if they match, false otherwise.\n     */\n    EntityMetadata.compareIds = function (firstId, secondId) {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n        return OrmUtils_1.OrmUtils.deepCompare(firstId, secondId);\n    };\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    EntityMetadata.getValueMap = function (entity, columns, options) {\n        return columns.reduce(function (map, column) {\n            var value = column.getEntityValueMap(entity, options);\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined;\n            return column.isObjectId ? Object.assign(map, value) : OrmUtils_1.OrmUtils.mergeDeep(map, value);\n        }, {});\n    };\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    EntityMetadata.prototype.build = function () {\n        var namingStrategy = this.connection.namingStrategy;\n        var entityPrefix = this.connection.options.entityPrefix;\n        this.engine = this.tableMetadataArgs.engine;\n        this.database = this.tableMetadataArgs.database;\n        this.schema = this.tableMetadataArgs.schema || this.connection.options.schema;\n        this.givenTableName = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;\n        this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;\n        this.targetName = this.tableMetadataArgs.target instanceof Function ? this.tableMetadataArgs.target.name : this.tableMetadataArgs.target;\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName);\n        }\n        else if (this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);\n        }\n        else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);\n        }\n        this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n        this.tablePath = this.buildTablePath();\n        this.schemaPath = this.buildSchemaPath();\n        this.orderBy = (this.tableMetadataArgs.orderBy instanceof Function) ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not\n        this.isJunction = this.tableMetadataArgs.type === \"closure-junction\" || this.tableMetadataArgs.type === \"junction\";\n        this.isClosureJunction = this.tableMetadataArgs.type === \"closure-junction\";\n    };\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    EntityMetadata.prototype.registerColumn = function (column) {\n        if (this.ownColumns.indexOf(column) !== -1)\n            return;\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.columnsFromTree); }, this.ownColumns);\n        this.primaryColumns = this.columns.filter(function (column) { return column.isPrimary; });\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.hasUUIDGeneratedColumns = this.columns.filter(function (column) { return column.isGenerated || column.generationStrategy === \"uuid\"; }).length > 0;\n        this.propertiesMap = this.createPropertiesMap();\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach(function (entityMetadata) { return entityMetadata.registerColumn(column); });\n    };\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    EntityMetadata.prototype.createPropertiesMap = function () {\n        var map = {};\n        this.columns.forEach(function (column) { return OrmUtils_1.OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)); });\n        this.relations.forEach(function (relation) { return OrmUtils_1.OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)); });\n        return map;\n    };\n    /**\n     * Builds table path using database name, schema name and table name.\n     */\n    EntityMetadata.prototype.buildTablePath = function () {\n        var tablePath = this.tableName;\n        if (this.schema)\n            tablePath = this.schema + \".\" + tablePath;\n        if (this.database && !(this.connection.driver instanceof PostgresDriver_1.PostgresDriver)) {\n            if (!this.schema && this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                tablePath = this.database + \"..\" + tablePath;\n            }\n            else {\n                tablePath = this.database + \".\" + tablePath;\n            }\n        }\n        return tablePath;\n    };\n    /**\n     * Builds table path using schema name and database name.\n     */\n    EntityMetadata.prototype.buildSchemaPath = function () {\n        if (!this.schema)\n            return undefined;\n        return this.database && !(this.connection.driver instanceof PostgresDriver_1.PostgresDriver) ? this.database + \".\" + this.schema : this.schema;\n    };\n    return EntityMetadata;\n}());\nexports.EntityMetadata = EntityMetadata;\n\n//# sourceMappingURL=EntityMetadata.js.map\n","map":{"mappings":[{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/typeorm/metadata/EntityMetadata.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}}],"sources":{"../node_modules/typeorm/metadata/EntityMetadata.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrmUtils_1 = require(\"../util/OrmUtils\");\nvar PostgresDriver_1 = require(\"../driver/postgres/PostgresDriver\");\nvar SqlServerDriver_1 = require(\"../driver/sqlserver/SqlServerDriver\");\nvar CannotCreateEntityIdMapError_1 = require(\"../error/CannotCreateEntityIdMapError\");\n/**\n * Contains all entity metadata.\n */\nvar EntityMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EntityMetadata(options) {\n        /**\n         * Children entity metadatas. Used in inheritance patterns.\n         */\n        this.childEntityMetadatas = [];\n        /**\n         * All \"inheritance tree\" from a target entity.\n         * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n         * It also contains child entities for single table inheritance.\n         */\n        this.inheritanceTree = [];\n        /**\n         * Table type. Tables can be abstract, closure, junction, embedded, etc.\n         */\n        this.tableType = \"regular\";\n        /**\n         * Indicates if schema will be synchronized for this entity or not.\n         */\n        this.synchronize = true;\n        /**\n         * Checks if there any non-nullable column exist in this entity.\n         */\n        this.hasNonNullableRelations = false;\n        /**\n         * Indicates if this entity metadata of a junction table, or not.\n         * Junction table is a table created by many-to-many relationship.\n         *\n         * Its also possible to understand if entity is junction via tableType.\n         */\n        this.isJunction = false;\n        /**\n         * Checks if this table is a junction table of the closure table.\n         * This type is for tables that contain junction metadata of the closure tables.\n         */\n        this.isClosureJunction = false;\n        /**\n         * Checks if entity's table has multiple primary columns.\n         */\n        this.hasMultiplePrimaryKeys = false;\n        /**\n         * Indicates if this entity metadata has uuid generated columns.\n         */\n        this.hasUUIDGeneratedColumns = false;\n        /**\n         * Entity's column metadatas defined by user.\n         */\n        this.ownColumns = [];\n        /**\n         * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n         */\n        this.columns = [];\n        /**\n         * Ancestor columns used only in closure junction tables.\n         */\n        this.ancestorColumns = [];\n        /**\n         * Descendant columns used only in closure junction tables.\n         */\n        this.descendantColumns = [];\n        /**\n         * All columns except for virtual columns.\n         */\n        this.nonVirtualColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of owner entity.\n         */\n        this.ownerColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of inverse entity.\n         */\n        this.inverseColumns = [];\n        /**\n         * Gets the column with generated flag.\n         */\n        this.generatedColumns = [];\n        /**\n         * Gets the primary columns.\n         */\n        this.primaryColumns = [];\n        /**\n         * Entity's relation metadatas.\n         */\n        this.ownRelations = [];\n        /**\n         * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n         */\n        this.relations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.eagerRelations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.lazyRelations = [];\n        /**\n         * Gets only one-to-one relations of the entity.\n         */\n        this.oneToOneRelations = [];\n        /**\n         * Gets only owner one-to-one relations of the entity.\n         */\n        this.ownerOneToOneRelations = [];\n        /**\n         * Gets only one-to-many relations of the entity.\n         */\n        this.oneToManyRelations = [];\n        /**\n         * Gets only many-to-one relations of the entity.\n         */\n        this.manyToOneRelations = [];\n        /**\n         * Gets only many-to-many relations of the entity.\n         */\n        this.manyToManyRelations = [];\n        /**\n         * Gets only owner many-to-many relations of the entity.\n         */\n        this.ownerManyToManyRelations = [];\n        /**\n         * Gets only owner one-to-one and many-to-one relations.\n         */\n        this.relationsWithJoinColumns = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationIds = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationCounts = [];\n        /**\n         * Entity's foreign key metadatas.\n         */\n        this.foreignKeys = [];\n        /**\n         * Entity's embedded metadatas.\n         */\n        this.embeddeds = [];\n        /**\n         * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n         */\n        this.allEmbeddeds = [];\n        /**\n         * Entity's own indices.\n         */\n        this.ownIndices = [];\n        /**\n         * Entity's index metadatas.\n         */\n        this.indices = [];\n        /**\n         * Entity's unique metadatas.\n         */\n        this.uniques = [];\n        /**\n         * Entity's check metadatas.\n         */\n        this.checks = [];\n        /**\n         * Entity's own listener metadatas.\n         */\n        this.ownListeners = [];\n        /**\n         * Entity listener metadatas.\n         */\n        this.listeners = [];\n        /**\n         * Listener metadatas with \"AFTER LOAD\" type.\n         */\n        this.afterLoadListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.beforeInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.afterInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.beforeUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.afterUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.beforeRemoveListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.afterRemoveListeners = [];\n        this.connection = options.connection;\n        this.inheritanceTree = options.inheritanceTree || [];\n        this.inheritancePattern = options.inheritancePattern;\n        this.treeType = options.tableTree ? options.tableTree.type : undefined;\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata;\n        this.tableMetadataArgs = options.args;\n        this.target = this.tableMetadataArgs.target;\n        this.tableType = this.tableMetadataArgs.type;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new entity.\n     */\n    EntityMetadata.prototype.create = function (queryRunner) {\n        var _this = this;\n        // if target is set to a function (e.g. class) that can be created then create it\n        var ret;\n        if (this.target instanceof Function) {\n            ret = new this.target();\n            this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner); });\n            return ret;\n        }\n        // otherwise simply return a new empty object\n        var newObject = {};\n        this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner); });\n        return newObject;\n    };\n    /**\n     * Checks if given entity has an id.\n     */\n    EntityMetadata.prototype.hasId = function (entity) {\n        if (!entity)\n            return false;\n        return this.primaryColumns.every(function (primaryColumn) {\n            var value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    };\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    EntityMetadata.prototype.hasAllPrimaryKeys = function (entity) {\n        return this.primaryColumns.every(function (primaryColumn) {\n            var value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    };\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    EntityMetadata.prototype.ensureEntityIdMap = function (id) {\n        if (id instanceof Object)\n            return id;\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError_1.CannotCreateEntityIdMapError(this, id);\n        return this.primaryColumns[0].createValueMap(id);\n    };\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    EntityMetadata.prototype.getEntityIdMap = function (entity) {\n        if (!entity)\n            return undefined;\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, { skipNulls: true });\n    };\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    EntityMetadata.prototype.getEntityIdMixedMap = function (entity) {\n        if (!entity)\n            return entity;\n        var idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n        }\n        else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?\n        }\n        return idMap;\n    };\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    EntityMetadata.prototype.compareEntities = function (firstEntity, secondEntity) {\n        var firstEntityIdMap = this.getEntityIdMap(firstEntity);\n        if (!firstEntityIdMap)\n            return false;\n        var secondEntityIdMap = this.getEntityIdMap(secondEntity);\n        if (!secondEntityIdMap)\n            return false;\n        return EntityMetadata.compareIds(firstEntityIdMap, secondEntityIdMap);\n    };\n    /**\n     * Finds column with a given property name.\n     */\n    EntityMetadata.prototype.findColumnWithPropertyName = function (propertyName) {\n        return this.columns.find(function (column) { return column.propertyName === propertyName; });\n    };\n    /**\n     * Finds column with a given database name.\n     */\n    EntityMetadata.prototype.findColumnWithDatabaseName = function (databaseName) {\n        return this.columns.find(function (column) { return column.databaseName === databaseName; });\n    };\n    /**\n     * Finds column with a given property path.\n     */\n    EntityMetadata.prototype.findColumnWithPropertyPath = function (propertyPath) {\n        var column = this.columns.find(function (column) { return column.propertyPath === propertyPath; });\n        if (column)\n            return column;\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        var relation = this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0];\n        return undefined;\n    };\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    EntityMetadata.prototype.findColumnsWithPropertyPath = function (propertyPath) {\n        var column = this.columns.find(function (column) { return column.propertyPath === propertyPath; });\n        if (column)\n            return [column];\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        var relation = this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n        if (relation && relation.joinColumns)\n            return relation.joinColumns;\n        return [];\n    };\n    /**\n     * Finds relation with the given property path.\n     */\n    EntityMetadata.prototype.findRelationWithPropertyPath = function (propertyPath) {\n        return this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n    };\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    EntityMetadata.prototype.hasEmbeddedWithPropertyPath = function (propertyPath) {\n        return this.allEmbeddeds.some(function (embedded) { return embedded.propertyPath === propertyPath; });\n    };\n    /**\n     * Finds embedded with a given property path.\n     */\n    EntityMetadata.prototype.findEmbeddedWithPropertyPath = function (propertyPath) {\n        return this.allEmbeddeds.find(function (embedded) { return embedded.propertyPath === propertyPath; });\n    };\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    EntityMetadata.prototype.extractRelationValuesFromEntity = function (entity, relations) {\n        var relationsAndValues = [];\n        relations.forEach(function (relation) {\n            var value = relation.getEntityValue(entity);\n            if (value instanceof Array) {\n                value.forEach(function (subValue) { return relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]); });\n            }\n            else if (value) {\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\n            }\n        });\n        return relationsAndValues;\n    };\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a property paths for a given entity.\n     */\n    EntityMetadata.createPropertyPath = function (metadata, entity, prefix) {\n        var _this = this;\n        if (prefix === void 0) { prefix = \"\"; }\n        var paths = [];\n        Object.keys(entity).forEach(function (key) {\n            // check for function is needed in the cases when createPropertyPath used on values containg a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            var parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                var subPaths = _this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push.apply(paths, subPaths);\n            }\n            else {\n                var path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    };\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    EntityMetadata.difference = function (firstIdMaps, secondIdMaps) {\n        return firstIdMaps.filter(function (firstIdMap) {\n            return !secondIdMaps.find(function (secondIdMap) { return OrmUtils_1.OrmUtils.deepCompare(firstIdMap, secondIdMap); });\n        });\n    };\n    /**\n     * Compares ids of the two entities.\n     * Returns true if they match, false otherwise.\n     */\n    EntityMetadata.compareIds = function (firstId, secondId) {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n        return OrmUtils_1.OrmUtils.deepCompare(firstId, secondId);\n    };\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    EntityMetadata.getValueMap = function (entity, columns, options) {\n        return columns.reduce(function (map, column) {\n            var value = column.getEntityValueMap(entity, options);\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined;\n            return column.isObjectId ? Object.assign(map, value) : OrmUtils_1.OrmUtils.mergeDeep(map, value);\n        }, {});\n    };\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    EntityMetadata.prototype.build = function () {\n        var namingStrategy = this.connection.namingStrategy;\n        var entityPrefix = this.connection.options.entityPrefix;\n        this.engine = this.tableMetadataArgs.engine;\n        this.database = this.tableMetadataArgs.database;\n        this.schema = this.tableMetadataArgs.schema || this.connection.options.schema;\n        this.givenTableName = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;\n        this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;\n        this.targetName = this.tableMetadataArgs.target instanceof Function ? this.tableMetadataArgs.target.name : this.tableMetadataArgs.target;\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName);\n        }\n        else if (this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);\n        }\n        else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);\n        }\n        this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n        this.tablePath = this.buildTablePath();\n        this.schemaPath = this.buildSchemaPath();\n        this.orderBy = (this.tableMetadataArgs.orderBy instanceof Function) ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not\n        this.isJunction = this.tableMetadataArgs.type === \"closure-junction\" || this.tableMetadataArgs.type === \"junction\";\n        this.isClosureJunction = this.tableMetadataArgs.type === \"closure-junction\";\n    };\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    EntityMetadata.prototype.registerColumn = function (column) {\n        if (this.ownColumns.indexOf(column) !== -1)\n            return;\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.columnsFromTree); }, this.ownColumns);\n        this.primaryColumns = this.columns.filter(function (column) { return column.isPrimary; });\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.hasUUIDGeneratedColumns = this.columns.filter(function (column) { return column.isGenerated || column.generationStrategy === \"uuid\"; }).length > 0;\n        this.propertiesMap = this.createPropertiesMap();\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach(function (entityMetadata) { return entityMetadata.registerColumn(column); });\n    };\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    EntityMetadata.prototype.createPropertiesMap = function () {\n        var map = {};\n        this.columns.forEach(function (column) { return OrmUtils_1.OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)); });\n        this.relations.forEach(function (relation) { return OrmUtils_1.OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)); });\n        return map;\n    };\n    /**\n     * Builds table path using database name, schema name and table name.\n     */\n    EntityMetadata.prototype.buildTablePath = function () {\n        var tablePath = this.tableName;\n        if (this.schema)\n            tablePath = this.schema + \".\" + tablePath;\n        if (this.database && !(this.connection.driver instanceof PostgresDriver_1.PostgresDriver)) {\n            if (!this.schema && this.connection.driver instanceof SqlServerDriver_1.SqlServerDriver) {\n                tablePath = this.database + \"..\" + tablePath;\n            }\n            else {\n                tablePath = this.database + \".\" + tablePath;\n            }\n        }\n        return tablePath;\n    };\n    /**\n     * Builds table path using schema name and database name.\n     */\n    EntityMetadata.prototype.buildSchemaPath = function () {\n        if (!this.schema)\n            return undefined;\n        return this.database && !(this.connection.driver instanceof PostgresDriver_1.PostgresDriver) ? this.database + \".\" + this.schema : this.schema;\n    };\n    return EntityMetadata;\n}());\nexports.EntityMetadata = EntityMetadata;\n\n//# sourceMappingURL=EntityMetadata.js.map\n"},"lineCount":537}},"hash":"e8dcd2af5636d4e565de004aa323d00c","cacheData":{"env":{}}}